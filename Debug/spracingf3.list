
spracingf3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08005768  08005768  00015768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058fc  080058fc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080058fc  080058fc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058fc  080058fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058fc  080058fc  000158fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005900  08005900  00015900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005904  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000070  08005974  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  08005974  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014933  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027d6  00000000  00000000  000349d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  000371b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f78  00000000  00000000  00038220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f737  00000000  00000000  00039198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000149f6  00000000  00000000  000588cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9d06  00000000  00000000  0006d2c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00126fcb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d54  00000000  00000000  00127020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005750 	.word	0x08005750

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005750 	.word	0x08005750

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <EXTI0_IRQHandler>:
	int val = gpio_read(pin.argi);
	printf("pin interrupt %ld %d\n",pin.argi,val);
}

void EXTI0_IRQHandler(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000274:	2001      	movs	r0, #1
 8000276:	f001 fa07 	bl	8001688 <HAL_GPIO_EXTI_IRQHandler>

}
 800027a:	bf00      	nop
 800027c:	bd80      	pop	{r7, pc}

0800027e <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800027e:	b580      	push	{r7, lr}
 8000280:	af00      	add	r7, sp, #0

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000282:	2002      	movs	r0, #2
 8000284:	f001 fa00 	bl	8001688 <HAL_GPIO_EXTI_IRQHandler>

}
 8000288:	bf00      	nop
 800028a:	bd80      	pop	{r7, pc}

0800028c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10); //requires update if pins change. figure out how to rework.
 8000290:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000294:	f001 f9f8 	bl	8001688 <HAL_GPIO_EXTI_IRQHandler>

}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}

0800029c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	80fb      	strh	r3, [r7, #6]
	int i;
//	task gpio_task = { .arg.argi = GPIO_Pin,
//					   .func = test_gpio_task};
//	sched_add_task(&gpio_task);
	for(i=0;i<NUM_PINS;i++)
 80002a6:	2300      	movs	r3, #0
 80002a8:	60fb      	str	r3, [r7, #12]
 80002aa:	e009      	b.n	80002c0 <HAL_GPIO_EXTI_Callback+0x24>
	{
		if(gpio2hal_map[i] == GPIO_Pin)
 80002ac:	4a0f      	ldr	r2, [pc, #60]	; (80002ec <HAL_GPIO_EXTI_Callback+0x50>)
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002b4:	88fb      	ldrh	r3, [r7, #6]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d006      	beq.n	80002c8 <HAL_GPIO_EXTI_Callback+0x2c>
	for(i=0;i<NUM_PINS;i++)
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	3301      	adds	r3, #1
 80002be:	60fb      	str	r3, [r7, #12]
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	2b0a      	cmp	r3, #10
 80002c4:	d9f2      	bls.n	80002ac <HAL_GPIO_EXTI_Callback+0x10>
 80002c6:	e000      	b.n	80002ca <HAL_GPIO_EXTI_Callback+0x2e>
		{
			break;
 80002c8:	bf00      	nop
		}
	}
	if(pin_handlers[i] != 0)
 80002ca:	4a09      	ldr	r2, [pc, #36]	; (80002f0 <HAL_GPIO_EXTI_Callback+0x54>)
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d005      	beq.n	80002e2 <HAL_GPIO_EXTI_Callback+0x46>
	{
		pin_handlers[i](i);
 80002d6:	4a06      	ldr	r2, [pc, #24]	; (80002f0 <HAL_GPIO_EXTI_Callback+0x54>)
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002de:	68f8      	ldr	r0, [r7, #12]
 80002e0:	4798      	blx	r3
	}
}
 80002e2:	bf00      	nop
 80002e4:	3710      	adds	r7, #16
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	080057d4 	.word	0x080057d4
 80002f0:	2000008c 	.word	0x2000008c

080002f4 <gpio_init>:

void gpio_init()
{
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fa:	4b15      	ldr	r3, [pc, #84]	; (8000350 <gpio_init+0x5c>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a14      	ldr	r2, [pc, #80]	; (8000350 <gpio_init+0x5c>)
 8000300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b12      	ldr	r3, [pc, #72]	; (8000350 <gpio_init+0x5c>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800030e:	60fb      	str	r3, [r7, #12]
 8000310:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000312:	4b0f      	ldr	r3, [pc, #60]	; (8000350 <gpio_init+0x5c>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	4a0e      	ldr	r2, [pc, #56]	; (8000350 <gpio_init+0x5c>)
 8000318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800031c:	6153      	str	r3, [r2, #20]
 800031e:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <gpio_init+0x5c>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000326:	60bb      	str	r3, [r7, #8]
 8000328:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800032a:	4b09      	ldr	r3, [pc, #36]	; (8000350 <gpio_init+0x5c>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	4a08      	ldr	r2, [pc, #32]	; (8000350 <gpio_init+0x5c>)
 8000330:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000334:	6153      	str	r3, [r2, #20]
 8000336:	4b06      	ldr	r3, [pc, #24]	; (8000350 <gpio_init+0x5c>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800033e:	607b      	str	r3, [r7, #4]
 8000340:	687b      	ldr	r3, [r7, #4]
}
 8000342:	bf00      	nop
 8000344:	3714      	adds	r7, #20
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	40021000 	.word	0x40021000

08000354 <gpio_read>:
{
	return NUM_PINS;
}

int gpio_read(int pin)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(wrappers[pin].port, wrappers[pin].pin);
 800035c:	4a08      	ldr	r2, [pc, #32]	; (8000380 <gpio_read+0x2c>)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000364:	4906      	ldr	r1, [pc, #24]	; (8000380 <gpio_read+0x2c>)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	00db      	lsls	r3, r3, #3
 800036a:	440b      	add	r3, r1
 800036c:	889b      	ldrh	r3, [r3, #4]
 800036e:	4619      	mov	r1, r3
 8000370:	4610      	mov	r0, r2
 8000372:	f001 f959 	bl	8001628 <HAL_GPIO_ReadPin>
 8000376:	4603      	mov	r3, r0
}
 8000378:	4618      	mov	r0, r3
 800037a:	3708      	adds	r7, #8
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	0800577c 	.word	0x0800577c

08000384 <gpio_write>:

void gpio_write(int pin, int value)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(wrappers[pin].port, wrappers[pin].pin,!!value);
 800038e:	4a0b      	ldr	r2, [pc, #44]	; (80003bc <gpio_write+0x38>)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000396:	4a09      	ldr	r2, [pc, #36]	; (80003bc <gpio_write+0x38>)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	00db      	lsls	r3, r3, #3
 800039c:	4413      	add	r3, r2
 800039e:	8899      	ldrh	r1, [r3, #4]
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	bf14      	ite	ne
 80003a6:	2301      	movne	r3, #1
 80003a8:	2300      	moveq	r3, #0
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	461a      	mov	r2, r3
 80003ae:	f001 f953 	bl	8001658 <HAL_GPIO_WritePin>
}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	0800577c 	.word	0x0800577c

080003c0 <gpio_dir>:

void gpio_dir(int pin, int value) //0 is in 1 is out
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b088      	sub	sp, #32
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	6039      	str	r1, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ca:	f107 030c 	add.w	r3, r7, #12
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
 80003d8:	611a      	str	r2, [r3, #16]
	//HAL_GPIO_DeInit(wrappers[pin].port, wrappers[pin].pin);
	GPIO_InitStruct.Pin = wrappers[pin].pin;
 80003da:	4a11      	ldr	r2, [pc, #68]	; (8000420 <gpio_dir+0x60>)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	00db      	lsls	r3, r3, #3
 80003e0:	4413      	add	r3, r2
 80003e2:	889b      	ldrh	r3, [r3, #4]
 80003e4:	60fb      	str	r3, [r7, #12]

	if(value == 0)
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d104      	bne.n	80003f6 <gpio_dir+0x36>
	{
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ec:	2300      	movs	r3, #0
 80003ee:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f0:	2300      	movs	r3, #0
 80003f2:	617b      	str	r3, [r7, #20]
 80003f4:	e005      	b.n	8000402 <gpio_dir+0x42>
	}
	else
	{
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f6:	2301      	movs	r3, #1
 80003f8:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fa:	2300      	movs	r3, #0
 80003fc:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003fe:	2303      	movs	r3, #3
 8000400:	61bb      	str	r3, [r7, #24]
	}
	HAL_GPIO_Init(wrappers[pin].port, &GPIO_InitStruct);
 8000402:	4a07      	ldr	r2, [pc, #28]	; (8000420 <gpio_dir+0x60>)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800040a:	f107 020c 	add.w	r2, r7, #12
 800040e:	4611      	mov	r1, r2
 8000410:	4618      	mov	r0, r3
 8000412:	f000 ff8f 	bl	8001334 <HAL_GPIO_Init>
}
 8000416:	bf00      	nop
 8000418:	3720      	adds	r7, #32
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	0800577c 	.word	0x0800577c

08000424 <gpio_interrupt>:
}



void gpio_interrupt(int pin,void (*handler)(int))
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b088      	sub	sp, #32
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042e:	f107 030c 	add.w	r3, r7, #12
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
 800043a:	60da      	str	r2, [r3, #12]
 800043c:	611a      	str	r2, [r3, #16]

	//HAL_GPIO_DeInit(wrappers[pin].port, wrappers[pin].pin);

	pin_handlers[pin] = handler;
 800043e:	491b      	ldr	r1, [pc, #108]	; (80004ac <gpio_interrupt+0x88>)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	683a      	ldr	r2, [r7, #0]
 8000444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	GPIO_InitStruct.Pin = wrappers[pin].pin;
 8000448:	4a19      	ldr	r2, [pc, #100]	; (80004b0 <gpio_interrupt+0x8c>)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	00db      	lsls	r3, r3, #3
 800044e:	4413      	add	r3, r2
 8000450:	889b      	ldrh	r3, [r3, #4]
 8000452:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000454:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000458:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045a:	2300      	movs	r3, #0
 800045c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(wrappers[pin].port, &GPIO_InitStruct);
 800045e:	4a14      	ldr	r2, [pc, #80]	; (80004b0 <gpio_interrupt+0x8c>)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000466:	f107 020c 	add.w	r2, r7, #12
 800046a:	4611      	mov	r1, r2
 800046c:	4618      	mov	r0, r3
 800046e:	f000 ff61 	bl	8001334 <HAL_GPIO_Init>

	if(irq_nums[pin] > 0)
 8000472:	4a10      	ldr	r2, [pc, #64]	; (80004b4 <gpio_interrupt+0x90>)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800047a:	2b00      	cmp	r3, #0
 800047c:	dd11      	ble.n	80004a2 <gpio_interrupt+0x7e>
	{
		HAL_NVIC_SetPriority(irq_nums[pin], 0, 0);
 800047e:	4a0d      	ldr	r2, [pc, #52]	; (80004b4 <gpio_interrupt+0x90>)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000486:	b25b      	sxtb	r3, r3
 8000488:	2200      	movs	r2, #0
 800048a:	2100      	movs	r1, #0
 800048c:	4618      	mov	r0, r3
 800048e:	f000 ff1a 	bl	80012c6 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(irq_nums[pin]);
 8000492:	4a08      	ldr	r2, [pc, #32]	; (80004b4 <gpio_interrupt+0x90>)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800049a:	b25b      	sxtb	r3, r3
 800049c:	4618      	mov	r0, r3
 800049e:	f000 ff2e 	bl	80012fe <HAL_NVIC_EnableIRQ>
	}
}
 80004a2:	bf00      	nop
 80004a4:	3720      	adds	r7, #32
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	2000008c 	.word	0x2000008c
 80004b0:	0800577c 	.word	0x0800577c
 80004b4:	08005800 	.word	0x08005800

080004b8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80004c0:	1d39      	adds	r1, r7, #4
 80004c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004c6:	2201      	movs	r2, #1
 80004c8:	4803      	ldr	r0, [pc, #12]	; (80004d8 <__io_putchar+0x20>)
 80004ca:	f003 fcd1 	bl	8003e70 <HAL_UART_Transmit>

  return ch;
 80004ce:	687b      	ldr	r3, [r7, #4]
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	200001b0 	.word	0x200001b0

080004dc <steering_cb>:

void steering_cb(int pin)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	printf("pin %d\n",pin);
 80004e4:	6879      	ldr	r1, [r7, #4]
 80004e6:	4803      	ldr	r0, [pc, #12]	; (80004f4 <steering_cb+0x18>)
 80004e8:	f004 f966 	bl	80047b8 <iprintf>
}
 80004ec:	bf00      	nop
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	08005768 	.word	0x08005768

080004f8 <hello_cb>:

void hello_cb(task_arg arg)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	(void)arg.argi;
	printf("hello world\n");
 8000500:	4803      	ldr	r0, [pc, #12]	; (8000510 <hello_cb+0x18>)
 8000502:	f004 f9df 	bl	80048c4 <puts>
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	08005770 	.word	0x08005770

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fd93 	bl	8001044 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f85b 	bl	80005d8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  sched_init();
 8000522:	f000 fa9d 	bl	8000a60 <sched_init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 fa71 	bl	8000a0c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800052a:	f000 fa3f 	bl	80009ac <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800052e:	f000 f8ab 	bl	8000688 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000532:	f000 f937 	bl	80007a4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000536:	f000 f9b7 	bl	80008a8 <MX_TIM4_Init>
  MX_TIM2_Init();
 800053a:	f000 f8e5 	bl	8000708 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  task next_task;
  gpio_init();
 800053e:	f7ff fed9 	bl	80002f4 <gpio_init>
  gpio_dir(LED_PIN,1);
 8000542:	2101      	movs	r1, #1
 8000544:	2000      	movs	r0, #0
 8000546:	f7ff ff3b 	bl	80003c0 <gpio_dir>

  gpio_dir(MOTOR_1,1);
 800054a:	2101      	movs	r1, #1
 800054c:	2005      	movs	r0, #5
 800054e:	f7ff ff37 	bl	80003c0 <gpio_dir>
  gpio_interrupt(THROTTLE,steering_cb);
 8000552:	491c      	ldr	r1, [pc, #112]	; (80005c4 <main+0xb0>)
 8000554:	2003      	movs	r0, #3
 8000556:	f7ff ff65 	bl	8000424 <gpio_interrupt>
  gpio_interrupt(STEERING,steering_cb);
 800055a:	491a      	ldr	r1, [pc, #104]	; (80005c4 <main+0xb0>)
 800055c:	2002      	movs	r0, #2
 800055e:	f7ff ff61 	bl	8000424 <gpio_interrupt>
  //gpio_interrupt(GAIN,steering_cb);
  HAL_TIM_Base_Start(&htim2);
 8000562:	4819      	ldr	r0, [pc, #100]	; (80005c8 <main+0xb4>)
 8000564:	f002 fd14 	bl	8002f90 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8000568:	4818      	ldr	r0, [pc, #96]	; (80005cc <main+0xb8>)
 800056a:	f002 fd11 	bl	8002f90 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 800056e:	4818      	ldr	r0, [pc, #96]	; (80005d0 <main+0xbc>)
 8000570:	f002 fd0e 	bl	8002f90 <HAL_TIM_Base_Start>
  next_task.func = hello_cb;
 8000574:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <main+0xc0>)
 8000576:	607b      	str	r3, [r7, #4]
  sched_add_task(&next_task);
 8000578:	463b      	mov	r3, r7
 800057a:	4618      	mov	r0, r3
 800057c:	f000 fa80 	bl	8000a80 <sched_add_task>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	if(sched_get_task(&next_task))
 8000580:	463b      	mov	r3, r7
 8000582:	4618      	mov	r0, r3
 8000584:	f000 faac 	bl	8000ae0 <sched_get_task>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d003      	beq.n	8000596 <main+0x82>
	{
		next_task.func(next_task.arg);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	6838      	ldr	r0, [r7, #0]
 8000592:	4798      	blx	r3
 8000594:	e7f4      	b.n	8000580 <main+0x6c>
	}
	else
	{
		gpio_write(MOTOR_1,gpio_read(STEERING));
 8000596:	2002      	movs	r0, #2
 8000598:	f7ff fedc 	bl	8000354 <gpio_read>
 800059c:	4603      	mov	r3, r0
 800059e:	4619      	mov	r1, r3
 80005a0:	2005      	movs	r0, #5
 80005a2:	f7ff feef 	bl	8000384 <gpio_write>
		gpio_write(LED_PIN,!gpio_read(STEERING));
 80005a6:	2002      	movs	r0, #2
 80005a8:	f7ff fed4 	bl	8000354 <gpio_read>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	bf0c      	ite	eq
 80005b2:	2301      	moveq	r3, #1
 80005b4:	2300      	movne	r3, #0
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	4619      	mov	r1, r3
 80005ba:	2000      	movs	r0, #0
 80005bc:	f7ff fee2 	bl	8000384 <gpio_write>
	if(sched_get_task(&next_task))
 80005c0:	e7de      	b.n	8000580 <main+0x6c>
 80005c2:	bf00      	nop
 80005c4:	080004dd 	.word	0x080004dd
 80005c8:	20000238 	.word	0x20000238
 80005cc:	20000164 	.word	0x20000164
 80005d0:	200000c4 	.word	0x200000c4
 80005d4:	080004f9 	.word	0x080004f9

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b09e      	sub	sp, #120	; 0x78
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80005e2:	2228      	movs	r2, #40	; 0x28
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f004 f8de 	bl	80047a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005fc:	463b      	mov	r3, r7
 80005fe:	223c      	movs	r2, #60	; 0x3c
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f004 f8d0 	bl	80047a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000608:	2302      	movs	r3, #2
 800060a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000610:	2310      	movs	r3, #16
 8000612:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000614:	2302      	movs	r3, #2
 8000616:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000618:	2300      	movs	r3, #0
 800061a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800061c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000620:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000622:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000626:	4618      	mov	r0, r3
 8000628:	f001 f96c 	bl	8001904 <HAL_RCC_OscConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000632:	f000 fa0f 	bl	8000a54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000636:	230f      	movs	r3, #15
 8000638:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063a:	2302      	movs	r3, #2
 800063c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000646:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800064c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000650:	2102      	movs	r1, #2
 8000652:	4618      	mov	r0, r3
 8000654:	f002 f85e 	bl	8002714 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800065e:	f000 f9f9 	bl	8000a54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000662:	2321      	movs	r3, #33	; 0x21
 8000664:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800066e:	463b      	mov	r3, r7
 8000670:	4618      	mov	r0, r3
 8000672:	f002 fa85 	bl	8002b80 <HAL_RCCEx_PeriphCLKConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800067c:	f000 f9ea 	bl	8000a54 <Error_Handler>
  }
}
 8000680:	bf00      	nop
 8000682:	3778      	adds	r7, #120	; 0x78
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800068c:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <MX_I2C1_Init+0x74>)
 800068e:	4a1c      	ldr	r2, [pc, #112]	; (8000700 <MX_I2C1_Init+0x78>)
 8000690:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000692:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <MX_I2C1_Init+0x74>)
 8000694:	4a1b      	ldr	r2, [pc, #108]	; (8000704 <MX_I2C1_Init+0x7c>)
 8000696:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000698:	4b18      	ldr	r3, [pc, #96]	; (80006fc <MX_I2C1_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800069e:	4b17      	ldr	r3, [pc, #92]	; (80006fc <MX_I2C1_Init+0x74>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a4:	4b15      	ldr	r3, [pc, #84]	; (80006fc <MX_I2C1_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <MX_I2C1_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_I2C1_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_I2C1_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_I2C1_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c2:	480e      	ldr	r0, [pc, #56]	; (80006fc <MX_I2C1_Init+0x74>)
 80006c4:	f000 fff8 	bl	80016b8 <HAL_I2C_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006ce:	f000 f9c1 	bl	8000a54 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006d2:	2100      	movs	r1, #0
 80006d4:	4809      	ldr	r0, [pc, #36]	; (80006fc <MX_I2C1_Init+0x74>)
 80006d6:	f001 f87e 	bl	80017d6 <HAL_I2CEx_ConfigAnalogFilter>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006e0:	f000 f9b8 	bl	8000a54 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006e4:	2100      	movs	r1, #0
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_I2C1_Init+0x74>)
 80006e8:	f001 f8c0 	bl	800186c <HAL_I2CEx_ConfigDigitalFilter>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006f2:	f000 f9af 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000110 	.word	0x20000110
 8000700:	40005400 	.word	0x40005400
 8000704:	2000090e 	.word	0x2000090e

08000708 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800070e:	f107 0310 	add.w	r3, r7, #16
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000726:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <MX_TIM2_Init+0x98>)
 8000728:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800072c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <MX_TIM2_Init+0x98>)
 8000730:	2264      	movs	r2, #100	; 0x64
 8000732:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_TIM2_Init+0x98>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800073a:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <MX_TIM2_Init+0x98>)
 800073c:	f04f 32ff 	mov.w	r2, #4294967295
 8000740:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_TIM2_Init+0x98>)
 8000744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000748:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <MX_TIM2_Init+0x98>)
 800074c:	2280      	movs	r2, #128	; 0x80
 800074e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000750:	4813      	ldr	r0, [pc, #76]	; (80007a0 <MX_TIM2_Init+0x98>)
 8000752:	f002 fbc5 	bl	8002ee0 <HAL_TIM_Base_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800075c:	f000 f97a 	bl	8000a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000764:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000766:	f107 0310 	add.w	r3, r7, #16
 800076a:	4619      	mov	r1, r3
 800076c:	480c      	ldr	r0, [pc, #48]	; (80007a0 <MX_TIM2_Init+0x98>)
 800076e:	f002 fde7 	bl	8003340 <HAL_TIM_ConfigClockSource>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000778:	f000 f96c 	bl	8000a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077c:	2300      	movs	r3, #0
 800077e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	4619      	mov	r1, r3
 8000788:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_TIM2_Init+0x98>)
 800078a:	f003 faa3 	bl	8003cd4 <HAL_TIMEx_MasterConfigSynchronization>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000794:	f000 f95e 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	3720      	adds	r7, #32
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000238 	.word	0x20000238

080007a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08e      	sub	sp, #56	; 0x38
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007c4:	463b      	mov	r3, r7
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
 80007d2:	615a      	str	r2, [r3, #20]
 80007d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007d6:	4b32      	ldr	r3, [pc, #200]	; (80008a0 <MX_TIM3_Init+0xfc>)
 80007d8:	4a32      	ldr	r2, [pc, #200]	; (80008a4 <MX_TIM3_Init+0x100>)
 80007da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 80007dc:	4b30      	ldr	r3, [pc, #192]	; (80008a0 <MX_TIM3_Init+0xfc>)
 80007de:	2240      	movs	r2, #64	; 0x40
 80007e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e2:	4b2f      	ldr	r3, [pc, #188]	; (80008a0 <MX_TIM3_Init+0xfc>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80007e8:	4b2d      	ldr	r3, [pc, #180]	; (80008a0 <MX_TIM3_Init+0xfc>)
 80007ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80007ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f0:	4b2b      	ldr	r3, [pc, #172]	; (80008a0 <MX_TIM3_Init+0xfc>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f6:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <MX_TIM3_Init+0xfc>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007fc:	4828      	ldr	r0, [pc, #160]	; (80008a0 <MX_TIM3_Init+0xfc>)
 80007fe:	f002 fb6f 	bl	8002ee0 <HAL_TIM_Base_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000808:	f000 f924 	bl	8000a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800080c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000812:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000816:	4619      	mov	r1, r3
 8000818:	4821      	ldr	r0, [pc, #132]	; (80008a0 <MX_TIM3_Init+0xfc>)
 800081a:	f002 fd91 	bl	8003340 <HAL_TIM_ConfigClockSource>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000824:	f000 f916 	bl	8000a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000828:	481d      	ldr	r0, [pc, #116]	; (80008a0 <MX_TIM3_Init+0xfc>)
 800082a:	f002 fc13 	bl	8003054 <HAL_TIM_PWM_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000834:	f000 f90e 	bl	8000a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	4816      	ldr	r0, [pc, #88]	; (80008a0 <MX_TIM3_Init+0xfc>)
 8000848:	f003 fa44 	bl	8003cd4 <HAL_TIMEx_MasterConfigSynchronization>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000852:	f000 f8ff 	bl	8000a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000856:	2360      	movs	r3, #96	; 0x60
 8000858:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000866:	463b      	mov	r3, r7
 8000868:	2200      	movs	r2, #0
 800086a:	4619      	mov	r1, r3
 800086c:	480c      	ldr	r0, [pc, #48]	; (80008a0 <MX_TIM3_Init+0xfc>)
 800086e:	f002 fc53 	bl	8003118 <HAL_TIM_PWM_ConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000878:	f000 f8ec 	bl	8000a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800087c:	463b      	mov	r3, r7
 800087e:	2204      	movs	r2, #4
 8000880:	4619      	mov	r1, r3
 8000882:	4807      	ldr	r0, [pc, #28]	; (80008a0 <MX_TIM3_Init+0xfc>)
 8000884:	f002 fc48 	bl	8003118 <HAL_TIM_PWM_ConfigChannel>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800088e:	f000 f8e1 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000892:	4803      	ldr	r0, [pc, #12]	; (80008a0 <MX_TIM3_Init+0xfc>)
 8000894:	f000 fa2c 	bl	8000cf0 <HAL_TIM_MspPostInit>

}
 8000898:	bf00      	nop
 800089a:	3738      	adds	r7, #56	; 0x38
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000164 	.word	0x20000164
 80008a4:	40000400 	.word	0x40000400

080008a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08e      	sub	sp, #56	; 0x38
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008c8:	463b      	mov	r3, r7
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]
 80008d6:	615a      	str	r2, [r3, #20]
 80008d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008da:	4b32      	ldr	r3, [pc, #200]	; (80009a4 <MX_TIM4_Init+0xfc>)
 80008dc:	4a32      	ldr	r2, [pc, #200]	; (80009a8 <MX_TIM4_Init+0x100>)
 80008de:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5000;
 80008e0:	4b30      	ldr	r3, [pc, #192]	; (80009a4 <MX_TIM4_Init+0xfc>)
 80008e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80008e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e8:	4b2e      	ldr	r3, [pc, #184]	; (80009a4 <MX_TIM4_Init+0xfc>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 80008ee:	4b2d      	ldr	r3, [pc, #180]	; (80009a4 <MX_TIM4_Init+0xfc>)
 80008f0:	22ff      	movs	r2, #255	; 0xff
 80008f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f4:	4b2b      	ldr	r3, [pc, #172]	; (80009a4 <MX_TIM4_Init+0xfc>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fa:	4b2a      	ldr	r3, [pc, #168]	; (80009a4 <MX_TIM4_Init+0xfc>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000900:	4828      	ldr	r0, [pc, #160]	; (80009a4 <MX_TIM4_Init+0xfc>)
 8000902:	f002 faed 	bl	8002ee0 <HAL_TIM_Base_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800090c:	f000 f8a2 	bl	8000a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000916:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800091a:	4619      	mov	r1, r3
 800091c:	4821      	ldr	r0, [pc, #132]	; (80009a4 <MX_TIM4_Init+0xfc>)
 800091e:	f002 fd0f 	bl	8003340 <HAL_TIM_ConfigClockSource>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000928:	f000 f894 	bl	8000a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800092c:	481d      	ldr	r0, [pc, #116]	; (80009a4 <MX_TIM4_Init+0xfc>)
 800092e:	f002 fb91 	bl	8003054 <HAL_TIM_PWM_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000938:	f000 f88c 	bl	8000a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093c:	2300      	movs	r3, #0
 800093e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	4816      	ldr	r0, [pc, #88]	; (80009a4 <MX_TIM4_Init+0xfc>)
 800094c:	f003 f9c2 	bl	8003cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000956:	f000 f87d 	bl	8000a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800095a:	2360      	movs	r3, #96	; 0x60
 800095c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800096a:	463b      	mov	r3, r7
 800096c:	2200      	movs	r2, #0
 800096e:	4619      	mov	r1, r3
 8000970:	480c      	ldr	r0, [pc, #48]	; (80009a4 <MX_TIM4_Init+0xfc>)
 8000972:	f002 fbd1 	bl	8003118 <HAL_TIM_PWM_ConfigChannel>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800097c:	f000 f86a 	bl	8000a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000980:	463b      	mov	r3, r7
 8000982:	2204      	movs	r2, #4
 8000984:	4619      	mov	r1, r3
 8000986:	4807      	ldr	r0, [pc, #28]	; (80009a4 <MX_TIM4_Init+0xfc>)
 8000988:	f002 fbc6 	bl	8003118 <HAL_TIM_PWM_ConfigChannel>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8000992:	f000 f85f 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000996:	4803      	ldr	r0, [pc, #12]	; (80009a4 <MX_TIM4_Init+0xfc>)
 8000998:	f000 f9aa 	bl	8000cf0 <HAL_TIM_MspPostInit>

}
 800099c:	bf00      	nop
 800099e:	3738      	adds	r7, #56	; 0x38
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	200000c4 	.word	0x200000c4
 80009a8:	40000800 	.word	0x40000800

080009ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <MX_USART1_UART_Init+0x58>)
 80009b2:	4a15      	ldr	r2, [pc, #84]	; (8000a08 <MX_USART1_UART_Init+0x5c>)
 80009b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009b6:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <MX_USART1_UART_Init+0x58>)
 80009b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <MX_USART1_UART_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <MX_USART1_UART_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_USART1_UART_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MX_USART1_UART_Init+0x58>)
 80009d2:	220c      	movs	r2, #12
 80009d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <MX_USART1_UART_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_USART1_UART_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <MX_USART1_UART_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_USART1_UART_Init+0x58>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_USART1_UART_Init+0x58>)
 80009f0:	f003 f9f0 	bl	8003dd4 <HAL_UART_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009fa:	f000 f82b 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	200001b0 	.word	0x200001b0
 8000a08:	40013800 	.word	0x40013800

08000a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_GPIO_Init+0x44>)
 8000a14:	695b      	ldr	r3, [r3, #20]
 8000a16:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <MX_GPIO_Init+0x44>)
 8000a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a1c:	6153      	str	r3, [r2, #20]
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_GPIO_Init+0x44>)
 8000a20:	695b      	ldr	r3, [r3, #20]
 8000a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_GPIO_Init+0x44>)
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <MX_GPIO_Init+0x44>)
 8000a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a34:	6153      	str	r3, [r2, #20]
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <MX_GPIO_Init+0x44>)
 8000a38:	695b      	ldr	r3, [r3, #20]
 8000a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]

}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40021000 	.word	0x40021000

08000a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a58:	b672      	cpsid	i
}
 8000a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <Error_Handler+0x8>
	...

08000a60 <sched_init>:
};

struct sched_t sched;

void sched_init()
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
	sched.start = 0;
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <sched_init+0x1c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	801a      	strh	r2, [r3, #0]
	sched.end = 1;
 8000a6a:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <sched_init+0x1c>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	805a      	strh	r2, [r3, #2]
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	20000284 	.word	0x20000284

08000a80 <sched_add_task>:

int sched_add_task(task *t)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	if(sched.end == sched.start)
 8000a88:	4b14      	ldr	r3, [pc, #80]	; (8000adc <sched_add_task+0x5c>)
 8000a8a:	885a      	ldrh	r2, [r3, #2]
 8000a8c:	4b13      	ldr	r3, [pc, #76]	; (8000adc <sched_add_task+0x5c>)
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d101      	bne.n	8000a98 <sched_add_task+0x18>
	{
		return 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	e01a      	b.n	8000ace <sched_add_task+0x4e>
	}
	sched.tasks[sched.end].arg = t->arg;
 8000a98:	4b10      	ldr	r3, [pc, #64]	; (8000adc <sched_add_task+0x5c>)
 8000a9a:	885b      	ldrh	r3, [r3, #2]
 8000a9c:	4a0f      	ldr	r2, [pc, #60]	; (8000adc <sched_add_task+0x5c>)
 8000a9e:	00db      	lsls	r3, r3, #3
 8000aa0:	4413      	add	r3, r2
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	6812      	ldr	r2, [r2, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
	sched.tasks[sched.end].func = t->func;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <sched_add_task+0x5c>)
 8000aaa:	885b      	ldrh	r3, [r3, #2]
 8000aac:	4618      	mov	r0, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685a      	ldr	r2, [r3, #4]
 8000ab2:	490a      	ldr	r1, [pc, #40]	; (8000adc <sched_add_task+0x5c>)
 8000ab4:	00c3      	lsls	r3, r0, #3
 8000ab6:	440b      	add	r3, r1
 8000ab8:	609a      	str	r2, [r3, #8]
	sched.end = (sched.end + 1) & (QUEUE_SIZE-1);
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <sched_add_task+0x5c>)
 8000abc:	885b      	ldrh	r3, [r3, #2]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	f003 030f 	and.w	r3, r3, #15
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	4b04      	ldr	r3, [pc, #16]	; (8000adc <sched_add_task+0x5c>)
 8000aca:	805a      	strh	r2, [r3, #2]
	return 1;
 8000acc:	2301      	movs	r3, #1
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20000284 	.word	0x20000284

08000ae0 <sched_get_task>:

int sched_get_task(task *t)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b087      	sub	sp, #28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	uint32_t primask;
	if(sched.start+1 == sched.end)
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <sched_get_task+0x74>)
 8000aea:	881b      	ldrh	r3, [r3, #0]
 8000aec:	3301      	adds	r3, #1
 8000aee:	4a19      	ldr	r2, [pc, #100]	; (8000b54 <sched_get_task+0x74>)
 8000af0:	8852      	ldrh	r2, [r2, #2]
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d101      	bne.n	8000afa <sched_get_task+0x1a>
	{
		return 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	e026      	b.n	8000b48 <sched_get_task+0x68>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000afa:	f3ef 8310 	mrs	r3, PRIMASK
 8000afe:	60fb      	str	r3, [r7, #12]
  return(result);
 8000b00:	68fb      	ldr	r3, [r7, #12]
	}
	primask = __get_PRIMASK();
 8000b02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
}
 8000b06:	bf00      	nop
	__disable_irq();

	sched.start = (sched.start+1) & (QUEUE_SIZE - 1);
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <sched_get_task+0x74>)
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	f003 030f 	and.w	r3, r3, #15
 8000b14:	b29a      	uxth	r2, r3
 8000b16:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <sched_get_task+0x74>)
 8000b18:	801a      	strh	r2, [r3, #0]
	t->arg = sched.tasks[sched.start].arg;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <sched_get_task+0x74>)
 8000b1c:	881b      	ldrh	r3, [r3, #0]
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	490c      	ldr	r1, [pc, #48]	; (8000b54 <sched_get_task+0x74>)
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	440b      	add	r3, r1
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	6013      	str	r3, [r2, #0]
	t->func = sched.tasks[sched.start].func;
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <sched_get_task+0x74>)
 8000b2c:	881b      	ldrh	r3, [r3, #0]
 8000b2e:	4a09      	ldr	r2, [pc, #36]	; (8000b54 <sched_get_task+0x74>)
 8000b30:	00db      	lsls	r3, r3, #3
 8000b32:	4413      	add	r3, r2
 8000b34:	689a      	ldr	r2, [r3, #8]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	f383 8810 	msr	PRIMASK, r3
}
 8000b44:	bf00      	nop

	__set_PRIMASK(primask);
	return 1;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	371c      	adds	r7, #28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	20000284 	.word	0x20000284

08000b58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <HAL_MspInit+0x44>)
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	4a0e      	ldr	r2, [pc, #56]	; (8000b9c <HAL_MspInit+0x44>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6193      	str	r3, [r2, #24]
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <HAL_MspInit+0x44>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <HAL_MspInit+0x44>)
 8000b78:	69db      	ldr	r3, [r3, #28]
 8000b7a:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <HAL_MspInit+0x44>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b80:	61d3      	str	r3, [r2, #28]
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_MspInit+0x44>)
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a26      	ldr	r2, [pc, #152]	; (8000c58 <HAL_I2C_MspInit+0xb8>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d145      	bne.n	8000c4e <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <HAL_I2C_MspInit+0xbc>)
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	4a25      	ldr	r2, [pc, #148]	; (8000c5c <HAL_I2C_MspInit+0xbc>)
 8000bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bcc:	6153      	str	r3, [r2, #20]
 8000bce:	4b23      	ldr	r3, [pc, #140]	; (8000c5c <HAL_I2C_MspInit+0xbc>)
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bda:	4b20      	ldr	r3, [pc, #128]	; (8000c5c <HAL_I2C_MspInit+0xbc>)
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	4a1f      	ldr	r2, [pc, #124]	; (8000c5c <HAL_I2C_MspInit+0xbc>)
 8000be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000be4:	6153      	str	r3, [r2, #20]
 8000be6:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <HAL_I2C_MspInit+0xbc>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf8:	2312      	movs	r3, #18
 8000bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c00:	2303      	movs	r3, #3
 8000c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c04:	2304      	movs	r3, #4
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c12:	f000 fb8f 	bl	8001334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c16:	2380      	movs	r3, #128	; 0x80
 8000c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c1a:	2312      	movs	r3, #18
 8000c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c26:	2304      	movs	r3, #4
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	480b      	ldr	r0, [pc, #44]	; (8000c60 <HAL_I2C_MspInit+0xc0>)
 8000c32:	f000 fb7f 	bl	8001334 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <HAL_I2C_MspInit+0xbc>)
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	4a08      	ldr	r2, [pc, #32]	; (8000c5c <HAL_I2C_MspInit+0xbc>)
 8000c3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c40:	61d3      	str	r3, [r2, #28]
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_I2C_MspInit+0xbc>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c4e:	bf00      	nop
 8000c50:	3728      	adds	r7, #40	; 0x28
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40005400 	.word	0x40005400
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	48000400 	.word	0x48000400

08000c64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b087      	sub	sp, #28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c74:	d10c      	bne.n	8000c90 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c76:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <HAL_TIM_Base_MspInit+0x80>)
 8000c78:	69db      	ldr	r3, [r3, #28]
 8000c7a:	4a1a      	ldr	r2, [pc, #104]	; (8000ce4 <HAL_TIM_Base_MspInit+0x80>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	61d3      	str	r3, [r2, #28]
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <HAL_TIM_Base_MspInit+0x80>)
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c8e:	e022      	b.n	8000cd6 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a14      	ldr	r2, [pc, #80]	; (8000ce8 <HAL_TIM_Base_MspInit+0x84>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d10c      	bne.n	8000cb4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_TIM_Base_MspInit+0x80>)
 8000c9c:	69db      	ldr	r3, [r3, #28]
 8000c9e:	4a11      	ldr	r2, [pc, #68]	; (8000ce4 <HAL_TIM_Base_MspInit+0x80>)
 8000ca0:	f043 0302 	orr.w	r3, r3, #2
 8000ca4:	61d3      	str	r3, [r2, #28]
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <HAL_TIM_Base_MspInit+0x80>)
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]
}
 8000cb2:	e010      	b.n	8000cd6 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0c      	ldr	r2, [pc, #48]	; (8000cec <HAL_TIM_Base_MspInit+0x88>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d10b      	bne.n	8000cd6 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <HAL_TIM_Base_MspInit+0x80>)
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	4a08      	ldr	r2, [pc, #32]	; (8000ce4 <HAL_TIM_Base_MspInit+0x80>)
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	61d3      	str	r3, [r2, #28]
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_TIM_Base_MspInit+0x80>)
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	f003 0304 	and.w	r3, r3, #4
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
}
 8000cd6:	bf00      	nop
 8000cd8:	371c      	adds	r7, #28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	40000400 	.word	0x40000400
 8000cec:	40000800 	.word	0x40000800

08000cf0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a23      	ldr	r2, [pc, #140]	; (8000d9c <HAL_TIM_MspPostInit+0xac>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d11d      	bne.n	8000d4e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	4b23      	ldr	r3, [pc, #140]	; (8000da0 <HAL_TIM_MspPostInit+0xb0>)
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	4a22      	ldr	r2, [pc, #136]	; (8000da0 <HAL_TIM_MspPostInit+0xb0>)
 8000d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d1c:	6153      	str	r3, [r2, #20]
 8000d1e:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <HAL_TIM_MspPostInit+0xb0>)
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d2a:	23c0      	movs	r3, #192	; 0xc0
 8000d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d48:	f000 faf4 	bl	8001334 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000d4c:	e022      	b.n	8000d94 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM4)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a14      	ldr	r2, [pc, #80]	; (8000da4 <HAL_TIM_MspPostInit+0xb4>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d11d      	bne.n	8000d94 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <HAL_TIM_MspPostInit+0xb0>)
 8000d5a:	695b      	ldr	r3, [r3, #20]
 8000d5c:	4a10      	ldr	r2, [pc, #64]	; (8000da0 <HAL_TIM_MspPostInit+0xb0>)
 8000d5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d62:	6153      	str	r3, [r2, #20]
 8000d64:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <HAL_TIM_MspPostInit+0xb0>)
 8000d66:	695b      	ldr	r3, [r3, #20]
 8000d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d70:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8000d82:	230a      	movs	r3, #10
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d90:	f000 fad0 	bl	8001334 <HAL_GPIO_Init>
}
 8000d94:	bf00      	nop
 8000d96:	3728      	adds	r7, #40	; 0x28
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40000400 	.word	0x40000400
 8000da0:	40021000 	.word	0x40021000
 8000da4:	40000800 	.word	0x40000800

08000da8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a18      	ldr	r2, [pc, #96]	; (8000e28 <HAL_UART_MspInit+0x80>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d129      	bne.n	8000e1e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dca:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <HAL_UART_MspInit+0x84>)
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	4a17      	ldr	r2, [pc, #92]	; (8000e2c <HAL_UART_MspInit+0x84>)
 8000dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd4:	6193      	str	r3, [r2, #24]
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_UART_MspInit+0x84>)
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_UART_MspInit+0x84>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	4a11      	ldr	r2, [pc, #68]	; (8000e2c <HAL_UART_MspInit+0x84>)
 8000de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dec:	6153      	str	r3, [r2, #20]
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <HAL_UART_MspInit+0x84>)
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dfa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e0c:	2307      	movs	r3, #7
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4619      	mov	r1, r3
 8000e16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e1a:	f000 fa8b 	bl	8001334 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e1e:	bf00      	nop
 8000e20:	3728      	adds	r7, #40	; 0x28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40013800 	.word	0x40013800
 8000e2c:	40021000 	.word	0x40021000

08000e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <NMI_Handler+0x4>

08000e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <HardFault_Handler+0x4>

08000e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <MemManage_Handler+0x4>

08000e42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <BusFault_Handler+0x4>

08000e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <UsageFault_Handler+0x4>

08000e4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e7c:	f000 f928 	bl	80010d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	e00a      	b.n	8000eac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e96:	f3af 8000 	nop.w
 8000e9a:	4601      	mov	r1, r0
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	1c5a      	adds	r2, r3, #1
 8000ea0:	60ba      	str	r2, [r7, #8]
 8000ea2:	b2ca      	uxtb	r2, r1
 8000ea4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	697a      	ldr	r2, [r7, #20]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	dbf0      	blt.n	8000e96 <_read+0x12>
	}

return len;
 8000eb4:	687b      	ldr	r3, [r7, #4]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b086      	sub	sp, #24
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	60f8      	str	r0, [r7, #12]
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
 8000ece:	e009      	b.n	8000ee4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	1c5a      	adds	r2, r3, #1
 8000ed4:	60ba      	str	r2, [r7, #8]
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff faed 	bl	80004b8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	697a      	ldr	r2, [r7, #20]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	dbf1      	blt.n	8000ed0 <_write+0x12>
	}
	return len;
 8000eec:	687b      	ldr	r3, [r7, #4]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <_close>:

int _close(int file)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
	return -1;
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b083      	sub	sp, #12
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f1e:	605a      	str	r2, [r3, #4]
	return 0;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <_isatty>:

int _isatty(int file)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
	return 1;
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
	return 0;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3714      	adds	r7, #20
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f68:	4a14      	ldr	r2, [pc, #80]	; (8000fbc <_sbrk+0x5c>)
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <_sbrk+0x60>)
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f74:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <_sbrk+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d102      	bne.n	8000f82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <_sbrk+0x64>)
 8000f7e:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <_sbrk+0x68>)
 8000f80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <_sbrk+0x64>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d207      	bcs.n	8000fa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f90:	f003 fbe0 	bl	8004754 <__errno>
 8000f94:	4603      	mov	r3, r0
 8000f96:	220c      	movs	r2, #12
 8000f98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9e:	e009      	b.n	8000fb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <_sbrk+0x64>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fa6:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <_sbrk+0x64>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	4a05      	ldr	r2, [pc, #20]	; (8000fc4 <_sbrk+0x64>)
 8000fb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20008000 	.word	0x20008000
 8000fc0:	00000400 	.word	0x00000400
 8000fc4:	200000b8 	.word	0x200000b8
 8000fc8:	20000320 	.word	0x20000320

08000fcc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <SystemInit+0x20>)
 8000fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fd6:	4a05      	ldr	r2, [pc, #20]	; (8000fec <SystemInit+0x20>)
 8000fd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ff0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001028 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ff4:	f7ff ffea 	bl	8000fcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff8:	480c      	ldr	r0, [pc, #48]	; (800102c <LoopForever+0x6>)
  ldr r1, =_edata
 8000ffa:	490d      	ldr	r1, [pc, #52]	; (8001030 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <LoopForever+0xe>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001000:	e002      	b.n	8001008 <LoopCopyDataInit>

08001002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001006:	3304      	adds	r3, #4

08001008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800100c:	d3f9      	bcc.n	8001002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001010:	4c0a      	ldr	r4, [pc, #40]	; (800103c <LoopForever+0x16>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001014:	e001      	b.n	800101a <LoopFillZerobss>

08001016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001018:	3204      	adds	r2, #4

0800101a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800101c:	d3fb      	bcc.n	8001016 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800101e:	f003 fb9f 	bl	8004760 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001022:	f7ff fa77 	bl	8000514 <main>

08001026 <LoopForever>:

LoopForever:
    b LoopForever
 8001026:	e7fe      	b.n	8001026 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001028:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800102c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001030:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001034:	08005904 	.word	0x08005904
  ldr r2, =_sbss
 8001038:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800103c:	2000031c 	.word	0x2000031c

08001040 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001040:	e7fe      	b.n	8001040 <ADC1_2_IRQHandler>
	...

08001044 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <HAL_Init+0x28>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a07      	ldr	r2, [pc, #28]	; (800106c <HAL_Init+0x28>)
 800104e:	f043 0310 	orr.w	r3, r3, #16
 8001052:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001054:	2003      	movs	r0, #3
 8001056:	f000 f92b 	bl	80012b0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800105a:	2000      	movs	r0, #0
 800105c:	f000 f808 	bl	8001070 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001060:	f7ff fd7a 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40022000 	.word	0x40022000

08001070 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_InitTick+0x54>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_InitTick+0x58>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	fbb3 f3f1 	udiv	r3, r3, r1
 800108a:	fbb2 f3f3 	udiv	r3, r2, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f943 	bl	800131a <HAL_SYSTICK_Config>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e00e      	b.n	80010bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b0f      	cmp	r3, #15
 80010a2:	d80a      	bhi.n	80010ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a4:	2200      	movs	r2, #0
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f000 f90b 	bl	80012c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b0:	4a06      	ldr	r2, [pc, #24]	; (80010cc <HAL_InitTick+0x5c>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e000      	b.n	80010bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000000 	.word	0x20000000
 80010c8:	20000008 	.word	0x20000008
 80010cc:	20000004 	.word	0x20000004

080010d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_IncTick+0x20>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_IncTick+0x24>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <HAL_IncTick+0x24>)
 80010e2:	6013      	str	r3, [r2, #0]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000008 	.word	0x20000008
 80010f4:	20000308 	.word	0x20000308

080010f8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return uwTick;  
 80010fc:	4b03      	ldr	r3, [pc, #12]	; (800110c <HAL_GetTick+0x14>)
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	20000308 	.word	0x20000308

08001110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800112c:	4013      	ands	r3, r2
 800112e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001138:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800113c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001142:	4a04      	ldr	r2, [pc, #16]	; (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	60d3      	str	r3, [r2, #12]
}
 8001148:	bf00      	nop
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <__NVIC_GetPriorityGrouping+0x18>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	0a1b      	lsrs	r3, r3, #8
 8001162:	f003 0307 	and.w	r3, r3, #7
}
 8001166:	4618      	mov	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	2b00      	cmp	r3, #0
 8001184:	db0b      	blt.n	800119e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	f003 021f 	and.w	r2, r3, #31
 800118c:	4907      	ldr	r1, [pc, #28]	; (80011ac <__NVIC_EnableIRQ+0x38>)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	095b      	lsrs	r3, r3, #5
 8001194:	2001      	movs	r0, #1
 8001196:	fa00 f202 	lsl.w	r2, r0, r2
 800119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000e100 	.word	0xe000e100

080011b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	6039      	str	r1, [r7, #0]
 80011ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	db0a      	blt.n	80011da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	490c      	ldr	r1, [pc, #48]	; (80011fc <__NVIC_SetPriority+0x4c>)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	b2d2      	uxtb	r2, r2
 80011d2:	440b      	add	r3, r1
 80011d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d8:	e00a      	b.n	80011f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4908      	ldr	r1, [pc, #32]	; (8001200 <__NVIC_SetPriority+0x50>)
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	3b04      	subs	r3, #4
 80011e8:	0112      	lsls	r2, r2, #4
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	440b      	add	r3, r1
 80011ee:	761a      	strb	r2, [r3, #24]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000e100 	.word	0xe000e100
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001204:	b480      	push	{r7}
 8001206:	b089      	sub	sp, #36	; 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f1c3 0307 	rsb	r3, r3, #7
 800121e:	2b04      	cmp	r3, #4
 8001220:	bf28      	it	cs
 8001222:	2304      	movcs	r3, #4
 8001224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3304      	adds	r3, #4
 800122a:	2b06      	cmp	r3, #6
 800122c:	d902      	bls.n	8001234 <NVIC_EncodePriority+0x30>
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3b03      	subs	r3, #3
 8001232:	e000      	b.n	8001236 <NVIC_EncodePriority+0x32>
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	f04f 32ff 	mov.w	r2, #4294967295
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43da      	mvns	r2, r3
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	401a      	ands	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800124c:	f04f 31ff 	mov.w	r1, #4294967295
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	fa01 f303 	lsl.w	r3, r1, r3
 8001256:	43d9      	mvns	r1, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	4313      	orrs	r3, r2
         );
}
 800125e:	4618      	mov	r0, r3
 8001260:	3724      	adds	r7, #36	; 0x24
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800127c:	d301      	bcc.n	8001282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127e:	2301      	movs	r3, #1
 8001280:	e00f      	b.n	80012a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001282:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <SysTick_Config+0x40>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128a:	210f      	movs	r1, #15
 800128c:	f04f 30ff 	mov.w	r0, #4294967295
 8001290:	f7ff ff8e 	bl	80011b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <SysTick_Config+0x40>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129a:	4b04      	ldr	r3, [pc, #16]	; (80012ac <SysTick_Config+0x40>)
 800129c:	2207      	movs	r2, #7
 800129e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	e000e010 	.word	0xe000e010

080012b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ff29 	bl	8001110 <__NVIC_SetPriorityGrouping>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d8:	f7ff ff3e 	bl	8001158 <__NVIC_GetPriorityGrouping>
 80012dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f7ff ff8e 	bl	8001204 <NVIC_EncodePriority>
 80012e8:	4602      	mov	r2, r0
 80012ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff5d 	bl	80011b0 <__NVIC_SetPriority>
}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff31 	bl	8001174 <__NVIC_EnableIRQ>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ffa2 	bl	800126c <SysTick_Config>
 8001328:	4603      	mov	r3, r0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001334:	b480      	push	{r7}
 8001336:	b087      	sub	sp, #28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001342:	e154      	b.n	80015ee <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	2101      	movs	r1, #1
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	fa01 f303 	lsl.w	r3, r1, r3
 8001350:	4013      	ands	r3, r2
 8001352:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 8146 	beq.w	80015e8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	2b01      	cmp	r3, #1
 8001366:	d005      	beq.n	8001374 <HAL_GPIO_Init+0x40>
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 0303 	and.w	r3, r3, #3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d130      	bne.n	80013d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	2203      	movs	r2, #3
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	68da      	ldr	r2, [r3, #12]
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4313      	orrs	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013aa:	2201      	movs	r2, #1
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4013      	ands	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	091b      	lsrs	r3, r3, #4
 80013c0:	f003 0201 	and.w	r2, r3, #1
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	2b03      	cmp	r3, #3
 80013e0:	d017      	beq.n	8001412 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	2203      	movs	r2, #3
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	4013      	ands	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d123      	bne.n	8001466 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	08da      	lsrs	r2, r3, #3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	3208      	adds	r2, #8
 8001426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800142a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	220f      	movs	r2, #15
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	4013      	ands	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	691a      	ldr	r2, [r3, #16]
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	f003 0307 	and.w	r3, r3, #7
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	08da      	lsrs	r2, r3, #3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3208      	adds	r2, #8
 8001460:	6939      	ldr	r1, [r7, #16]
 8001462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	2203      	movs	r2, #3
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f003 0203 	and.w	r2, r3, #3
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f000 80a0 	beq.w	80015e8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a8:	4b58      	ldr	r3, [pc, #352]	; (800160c <HAL_GPIO_Init+0x2d8>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	4a57      	ldr	r2, [pc, #348]	; (800160c <HAL_GPIO_Init+0x2d8>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6193      	str	r3, [r2, #24]
 80014b4:	4b55      	ldr	r3, [pc, #340]	; (800160c <HAL_GPIO_Init+0x2d8>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014c0:	4a53      	ldr	r2, [pc, #332]	; (8001610 <HAL_GPIO_Init+0x2dc>)
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	089b      	lsrs	r3, r3, #2
 80014c6:	3302      	adds	r3, #2
 80014c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	220f      	movs	r2, #15
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014ea:	d019      	beq.n	8001520 <HAL_GPIO_Init+0x1ec>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a49      	ldr	r2, [pc, #292]	; (8001614 <HAL_GPIO_Init+0x2e0>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d013      	beq.n	800151c <HAL_GPIO_Init+0x1e8>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a48      	ldr	r2, [pc, #288]	; (8001618 <HAL_GPIO_Init+0x2e4>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d00d      	beq.n	8001518 <HAL_GPIO_Init+0x1e4>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a47      	ldr	r2, [pc, #284]	; (800161c <HAL_GPIO_Init+0x2e8>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d007      	beq.n	8001514 <HAL_GPIO_Init+0x1e0>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a46      	ldr	r2, [pc, #280]	; (8001620 <HAL_GPIO_Init+0x2ec>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d101      	bne.n	8001510 <HAL_GPIO_Init+0x1dc>
 800150c:	2304      	movs	r3, #4
 800150e:	e008      	b.n	8001522 <HAL_GPIO_Init+0x1ee>
 8001510:	2305      	movs	r3, #5
 8001512:	e006      	b.n	8001522 <HAL_GPIO_Init+0x1ee>
 8001514:	2303      	movs	r3, #3
 8001516:	e004      	b.n	8001522 <HAL_GPIO_Init+0x1ee>
 8001518:	2302      	movs	r3, #2
 800151a:	e002      	b.n	8001522 <HAL_GPIO_Init+0x1ee>
 800151c:	2301      	movs	r3, #1
 800151e:	e000      	b.n	8001522 <HAL_GPIO_Init+0x1ee>
 8001520:	2300      	movs	r3, #0
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	f002 0203 	and.w	r2, r2, #3
 8001528:	0092      	lsls	r2, r2, #2
 800152a:	4093      	lsls	r3, r2
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4313      	orrs	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001532:	4937      	ldr	r1, [pc, #220]	; (8001610 <HAL_GPIO_Init+0x2dc>)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	089b      	lsrs	r3, r3, #2
 8001538:	3302      	adds	r3, #2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001540:	4b38      	ldr	r3, [pc, #224]	; (8001624 <HAL_GPIO_Init+0x2f0>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	43db      	mvns	r3, r3
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4013      	ands	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d003      	beq.n	8001564 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4313      	orrs	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001564:	4a2f      	ldr	r2, [pc, #188]	; (8001624 <HAL_GPIO_Init+0x2f0>)
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800156a:	4b2e      	ldr	r3, [pc, #184]	; (8001624 <HAL_GPIO_Init+0x2f0>)
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	43db      	mvns	r3, r3
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	4013      	ands	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4313      	orrs	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800158e:	4a25      	ldr	r2, [pc, #148]	; (8001624 <HAL_GPIO_Init+0x2f0>)
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001594:	4b23      	ldr	r3, [pc, #140]	; (8001624 <HAL_GPIO_Init+0x2f0>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	43db      	mvns	r3, r3
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4013      	ands	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015b8:	4a1a      	ldr	r2, [pc, #104]	; (8001624 <HAL_GPIO_Init+0x2f0>)
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015be:	4b19      	ldr	r3, [pc, #100]	; (8001624 <HAL_GPIO_Init+0x2f0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	43db      	mvns	r3, r3
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4013      	ands	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4313      	orrs	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015e2:	4a10      	ldr	r2, [pc, #64]	; (8001624 <HAL_GPIO_Init+0x2f0>)
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	3301      	adds	r3, #1
 80015ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	fa22 f303 	lsr.w	r3, r2, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f47f aea3 	bne.w	8001344 <HAL_GPIO_Init+0x10>
  }
}
 80015fe:	bf00      	nop
 8001600:	bf00      	nop
 8001602:	371c      	adds	r7, #28
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	40021000 	.word	0x40021000
 8001610:	40010000 	.word	0x40010000
 8001614:	48000400 	.word	0x48000400
 8001618:	48000800 	.word	0x48000800
 800161c:	48000c00 	.word	0x48000c00
 8001620:	48001000 	.word	0x48001000
 8001624:	40010400 	.word	0x40010400

08001628 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691a      	ldr	r2, [r3, #16]
 8001638:	887b      	ldrh	r3, [r7, #2]
 800163a:	4013      	ands	r3, r2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d002      	beq.n	8001646 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001640:	2301      	movs	r3, #1
 8001642:	73fb      	strb	r3, [r7, #15]
 8001644:	e001      	b.n	800164a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001646:	2300      	movs	r3, #0
 8001648:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800164a:	7bfb      	ldrb	r3, [r7, #15]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]
 8001664:	4613      	mov	r3, r2
 8001666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001668:	787b      	ldrb	r3, [r7, #1]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800166e:	887a      	ldrh	r2, [r7, #2]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001674:	e002      	b.n	800167c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001676:	887a      	ldrh	r2, [r7, #2]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001692:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001694:	695a      	ldr	r2, [r3, #20]
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	4013      	ands	r3, r2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d006      	beq.n	80016ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800169e:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016a0:	88fb      	ldrh	r3, [r7, #6]
 80016a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe fdf8 	bl	800029c <HAL_GPIO_EXTI_Callback>
  }
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40010400 	.word	0x40010400

080016b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e081      	b.n	80017ce <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d106      	bne.n	80016e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff fa5e 	bl	8000ba0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2224      	movs	r2, #36	; 0x24
 80016e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0201 	bic.w	r2, r2, #1
 80016fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001708:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001718:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d107      	bne.n	8001732 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	e006      	b.n	8001740 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800173e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	2b02      	cmp	r3, #2
 8001746:	d104      	bne.n	8001752 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001750:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6812      	ldr	r2, [r2, #0]
 800175c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001760:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001764:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68da      	ldr	r2, [r3, #12]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001774:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691a      	ldr	r2, [r3, #16]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69d9      	ldr	r1, [r3, #28]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a1a      	ldr	r2, [r3, #32]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f042 0201 	orr.w	r2, r2, #1
 80017ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2220      	movs	r2, #32
 80017ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b20      	cmp	r3, #32
 80017ea:	d138      	bne.n	800185e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e032      	b.n	8001860 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2224      	movs	r2, #36	; 0x24
 8001806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 0201 	bic.w	r2, r2, #1
 8001818:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001828:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6819      	ldr	r1, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f042 0201 	orr.w	r2, r2, #1
 8001848:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2220      	movs	r2, #32
 800184e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	e000      	b.n	8001860 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800185e:	2302      	movs	r3, #2
  }
}
 8001860:	4618      	mov	r0, r3
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b20      	cmp	r3, #32
 8001880:	d139      	bne.n	80018f6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001888:	2b01      	cmp	r3, #1
 800188a:	d101      	bne.n	8001890 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800188c:	2302      	movs	r3, #2
 800188e:	e033      	b.n	80018f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2224      	movs	r2, #36	; 0x24
 800189c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 0201 	bic.w	r2, r2, #1
 80018ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018be:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	021b      	lsls	r3, r3, #8
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f042 0201 	orr.w	r2, r2, #1
 80018e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2220      	movs	r2, #32
 80018e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e000      	b.n	80018f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80018f6:	2302      	movs	r3, #2
  }
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800190a:	af00      	add	r7, sp, #0
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d102      	bne.n	800191e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	f000 bef4 	b.w	8002706 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 816a 	beq.w	8001c02 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800192e:	4bb3      	ldr	r3, [pc, #716]	; (8001bfc <HAL_RCC_OscConfig+0x2f8>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 030c 	and.w	r3, r3, #12
 8001936:	2b04      	cmp	r3, #4
 8001938:	d00c      	beq.n	8001954 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800193a:	4bb0      	ldr	r3, [pc, #704]	; (8001bfc <HAL_RCC_OscConfig+0x2f8>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 030c 	and.w	r3, r3, #12
 8001942:	2b08      	cmp	r3, #8
 8001944:	d159      	bne.n	80019fa <HAL_RCC_OscConfig+0xf6>
 8001946:	4bad      	ldr	r3, [pc, #692]	; (8001bfc <HAL_RCC_OscConfig+0x2f8>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001952:	d152      	bne.n	80019fa <HAL_RCC_OscConfig+0xf6>
 8001954:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001958:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001960:	fa93 f3a3 	rbit	r3, r3
 8001964:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001968:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196c:	fab3 f383 	clz	r3, r3
 8001970:	b2db      	uxtb	r3, r3
 8001972:	095b      	lsrs	r3, r3, #5
 8001974:	b2db      	uxtb	r3, r3
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b01      	cmp	r3, #1
 800197e:	d102      	bne.n	8001986 <HAL_RCC_OscConfig+0x82>
 8001980:	4b9e      	ldr	r3, [pc, #632]	; (8001bfc <HAL_RCC_OscConfig+0x2f8>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	e015      	b.n	80019b2 <HAL_RCC_OscConfig+0xae>
 8001986:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800198a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001992:	fa93 f3a3 	rbit	r3, r3
 8001996:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800199a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800199e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80019a2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80019a6:	fa93 f3a3 	rbit	r3, r3
 80019aa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80019ae:	4b93      	ldr	r3, [pc, #588]	; (8001bfc <HAL_RCC_OscConfig+0x2f8>)
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019b6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80019ba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80019be:	fa92 f2a2 	rbit	r2, r2
 80019c2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80019c6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80019ca:	fab2 f282 	clz	r2, r2
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	f042 0220 	orr.w	r2, r2, #32
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	f002 021f 	and.w	r2, r2, #31
 80019da:	2101      	movs	r1, #1
 80019dc:	fa01 f202 	lsl.w	r2, r1, r2
 80019e0:	4013      	ands	r3, r2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 810c 	beq.w	8001c00 <HAL_RCC_OscConfig+0x2fc>
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f040 8106 	bne.w	8001c00 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	f000 be86 	b.w	8002706 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019fa:	1d3b      	adds	r3, r7, #4
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a04:	d106      	bne.n	8001a14 <HAL_RCC_OscConfig+0x110>
 8001a06:	4b7d      	ldr	r3, [pc, #500]	; (8001bfc <HAL_RCC_OscConfig+0x2f8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a7c      	ldr	r2, [pc, #496]	; (8001bfc <HAL_RCC_OscConfig+0x2f8>)
 8001a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	e030      	b.n	8001a76 <HAL_RCC_OscConfig+0x172>
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10c      	bne.n	8001a38 <HAL_RCC_OscConfig+0x134>
 8001a1e:	4b77      	ldr	r3, [pc, #476]	; (8001bfc <HAL_RCC_OscConfig+0x2f8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a76      	ldr	r2, [pc, #472]	; (8001bfc <HAL_RCC_OscConfig+0x2f8>)
 8001a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	4b74      	ldr	r3, [pc, #464]	; (8001bfc <HAL_RCC_OscConfig+0x2f8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a73      	ldr	r2, [pc, #460]	; (8001bfc <HAL_RCC_OscConfig+0x2f8>)
 8001a30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	e01e      	b.n	8001a76 <HAL_RCC_OscConfig+0x172>
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a42:	d10c      	bne.n	8001a5e <HAL_RCC_OscConfig+0x15a>
 8001a44:	4b6d      	ldr	r3, [pc, #436]	; (8001bfc <HAL_RCC_OscConfig+0x2f8>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a6c      	ldr	r2, [pc, #432]	; (8001bfc <HAL_RCC_OscConfig+0x2f8>)
 8001a4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	4b6a      	ldr	r3, [pc, #424]	; (8001bfc <HAL_RCC_OscConfig+0x2f8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a69      	ldr	r2, [pc, #420]	; (8001bfc <HAL_RCC_OscConfig+0x2f8>)
 8001a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	e00b      	b.n	8001a76 <HAL_RCC_OscConfig+0x172>
 8001a5e:	4b67      	ldr	r3, [pc, #412]	; (8001bfc <HAL_RCC_OscConfig+0x2f8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a66      	ldr	r2, [pc, #408]	; (8001bfc <HAL_RCC_OscConfig+0x2f8>)
 8001a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	4b64      	ldr	r3, [pc, #400]	; (8001bfc <HAL_RCC_OscConfig+0x2f8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a63      	ldr	r2, [pc, #396]	; (8001bfc <HAL_RCC_OscConfig+0x2f8>)
 8001a70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a74:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a76:	4b61      	ldr	r3, [pc, #388]	; (8001bfc <HAL_RCC_OscConfig+0x2f8>)
 8001a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7a:	f023 020f 	bic.w	r2, r3, #15
 8001a7e:	1d3b      	adds	r3, r7, #4
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	495d      	ldr	r1, [pc, #372]	; (8001bfc <HAL_RCC_OscConfig+0x2f8>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d059      	beq.n	8001b48 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a94:	f7ff fb30 	bl	80010f8 <HAL_GetTick>
 8001a98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9c:	e00a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a9e:	f7ff fb2b 	bl	80010f8 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b64      	cmp	r3, #100	; 0x64
 8001aac:	d902      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	f000 be29 	b.w	8002706 <HAL_RCC_OscConfig+0xe02>
 8001ab4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ab8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001ac0:	fa93 f3a3 	rbit	r3, r3
 8001ac4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001ac8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001acc:	fab3 f383 	clz	r3, r3
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	095b      	lsrs	r3, r3, #5
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d102      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x1e2>
 8001ae0:	4b46      	ldr	r3, [pc, #280]	; (8001bfc <HAL_RCC_OscConfig+0x2f8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	e015      	b.n	8001b12 <HAL_RCC_OscConfig+0x20e>
 8001ae6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aee:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001af2:	fa93 f3a3 	rbit	r3, r3
 8001af6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001afa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001afe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001b02:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001b06:	fa93 f3a3 	rbit	r3, r3
 8001b0a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001b0e:	4b3b      	ldr	r3, [pc, #236]	; (8001bfc <HAL_RCC_OscConfig+0x2f8>)
 8001b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b16:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001b1a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001b1e:	fa92 f2a2 	rbit	r2, r2
 8001b22:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001b26:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001b2a:	fab2 f282 	clz	r2, r2
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	f042 0220 	orr.w	r2, r2, #32
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	f002 021f 	and.w	r2, r2, #31
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b40:	4013      	ands	r3, r2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0ab      	beq.n	8001a9e <HAL_RCC_OscConfig+0x19a>
 8001b46:	e05c      	b.n	8001c02 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7ff fad6 	bl	80010f8 <HAL_GetTick>
 8001b4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b50:	e00a      	b.n	8001b68 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b52:	f7ff fad1 	bl	80010f8 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b64      	cmp	r3, #100	; 0x64
 8001b60:	d902      	bls.n	8001b68 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	f000 bdcf 	b.w	8002706 <HAL_RCC_OscConfig+0xe02>
 8001b68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b6c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b70:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001b74:	fa93 f3a3 	rbit	r3, r3
 8001b78:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001b7c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b80:	fab3 f383 	clz	r3, r3
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	095b      	lsrs	r3, r3, #5
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d102      	bne.n	8001b9a <HAL_RCC_OscConfig+0x296>
 8001b94:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <HAL_RCC_OscConfig+0x2f8>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	e015      	b.n	8001bc6 <HAL_RCC_OscConfig+0x2c2>
 8001b9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b9e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001ba6:	fa93 f3a3 	rbit	r3, r3
 8001baa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001bae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bb2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001bb6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001bba:	fa93 f3a3 	rbit	r3, r3
 8001bbe:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <HAL_RCC_OscConfig+0x2f8>)
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bca:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001bce:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001bd2:	fa92 f2a2 	rbit	r2, r2
 8001bd6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001bda:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001bde:	fab2 f282 	clz	r2, r2
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	f042 0220 	orr.w	r2, r2, #32
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	f002 021f 	and.w	r2, r2, #31
 8001bee:	2101      	movs	r1, #1
 8001bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1ab      	bne.n	8001b52 <HAL_RCC_OscConfig+0x24e>
 8001bfa:	e002      	b.n	8001c02 <HAL_RCC_OscConfig+0x2fe>
 8001bfc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 816f 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c12:	4bd0      	ldr	r3, [pc, #832]	; (8001f54 <HAL_RCC_OscConfig+0x650>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 030c 	and.w	r3, r3, #12
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00b      	beq.n	8001c36 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c1e:	4bcd      	ldr	r3, [pc, #820]	; (8001f54 <HAL_RCC_OscConfig+0x650>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 030c 	and.w	r3, r3, #12
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d16c      	bne.n	8001d04 <HAL_RCC_OscConfig+0x400>
 8001c2a:	4bca      	ldr	r3, [pc, #808]	; (8001f54 <HAL_RCC_OscConfig+0x650>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d166      	bne.n	8001d04 <HAL_RCC_OscConfig+0x400>
 8001c36:	2302      	movs	r3, #2
 8001c38:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001c40:	fa93 f3a3 	rbit	r3, r3
 8001c44:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001c48:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4c:	fab3 f383 	clz	r3, r3
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	095b      	lsrs	r3, r3, #5
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d102      	bne.n	8001c66 <HAL_RCC_OscConfig+0x362>
 8001c60:	4bbc      	ldr	r3, [pc, #752]	; (8001f54 <HAL_RCC_OscConfig+0x650>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	e013      	b.n	8001c8e <HAL_RCC_OscConfig+0x38a>
 8001c66:	2302      	movs	r3, #2
 8001c68:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001c70:	fa93 f3a3 	rbit	r3, r3
 8001c74:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001c78:	2302      	movs	r3, #2
 8001c7a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001c7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001c82:	fa93 f3a3 	rbit	r3, r3
 8001c86:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001c8a:	4bb2      	ldr	r3, [pc, #712]	; (8001f54 <HAL_RCC_OscConfig+0x650>)
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8e:	2202      	movs	r2, #2
 8001c90:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001c94:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001c98:	fa92 f2a2 	rbit	r2, r2
 8001c9c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001ca0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001ca4:	fab2 f282 	clz	r2, r2
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	f042 0220 	orr.w	r2, r2, #32
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	f002 021f 	and.w	r2, r2, #31
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cba:	4013      	ands	r3, r2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d007      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x3cc>
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d002      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	f000 bd1b 	b.w	8002706 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd0:	4ba0      	ldr	r3, [pc, #640]	; (8001f54 <HAL_RCC_OscConfig+0x650>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	21f8      	movs	r1, #248	; 0xf8
 8001ce0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001ce8:	fa91 f1a1 	rbit	r1, r1
 8001cec:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001cf0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001cf4:	fab1 f181 	clz	r1, r1
 8001cf8:	b2c9      	uxtb	r1, r1
 8001cfa:	408b      	lsls	r3, r1
 8001cfc:	4995      	ldr	r1, [pc, #596]	; (8001f54 <HAL_RCC_OscConfig+0x650>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d02:	e0f5      	b.n	8001ef0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 8085 	beq.w	8001e1a <HAL_RCC_OscConfig+0x516>
 8001d10:	2301      	movs	r3, #1
 8001d12:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001d1a:	fa93 f3a3 	rbit	r3, r3
 8001d1e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001d22:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d26:	fab3 f383 	clz	r3, r3
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	461a      	mov	r2, r3
 8001d38:	2301      	movs	r3, #1
 8001d3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3c:	f7ff f9dc 	bl	80010f8 <HAL_GetTick>
 8001d40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d44:	e00a      	b.n	8001d5c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d46:	f7ff f9d7 	bl	80010f8 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d902      	bls.n	8001d5c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	f000 bcd5 	b.w	8002706 <HAL_RCC_OscConfig+0xe02>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d62:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001d66:	fa93 f3a3 	rbit	r3, r3
 8001d6a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001d6e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d72:	fab3 f383 	clz	r3, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	095b      	lsrs	r3, r3, #5
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d102      	bne.n	8001d8c <HAL_RCC_OscConfig+0x488>
 8001d86:	4b73      	ldr	r3, [pc, #460]	; (8001f54 <HAL_RCC_OscConfig+0x650>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	e013      	b.n	8001db4 <HAL_RCC_OscConfig+0x4b0>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001d96:	fa93 f3a3 	rbit	r3, r3
 8001d9a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001d9e:	2302      	movs	r3, #2
 8001da0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001da4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001da8:	fa93 f3a3 	rbit	r3, r3
 8001dac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001db0:	4b68      	ldr	r3, [pc, #416]	; (8001f54 <HAL_RCC_OscConfig+0x650>)
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	2202      	movs	r2, #2
 8001db6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001dba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001dbe:	fa92 f2a2 	rbit	r2, r2
 8001dc2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001dc6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001dca:	fab2 f282 	clz	r2, r2
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	f042 0220 	orr.w	r2, r2, #32
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	f002 021f 	and.w	r2, r2, #31
 8001dda:	2101      	movs	r1, #1
 8001ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8001de0:	4013      	ands	r3, r2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0af      	beq.n	8001d46 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de6:	4b5b      	ldr	r3, [pc, #364]	; (8001f54 <HAL_RCC_OscConfig+0x650>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dee:	1d3b      	adds	r3, r7, #4
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	21f8      	movs	r1, #248	; 0xf8
 8001df6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001dfe:	fa91 f1a1 	rbit	r1, r1
 8001e02:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001e06:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001e0a:	fab1 f181 	clz	r1, r1
 8001e0e:	b2c9      	uxtb	r1, r1
 8001e10:	408b      	lsls	r3, r1
 8001e12:	4950      	ldr	r1, [pc, #320]	; (8001f54 <HAL_RCC_OscConfig+0x650>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	600b      	str	r3, [r1, #0]
 8001e18:	e06a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x5ec>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e20:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001e24:	fa93 f3a3 	rbit	r3, r3
 8001e28:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001e2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e30:	fab3 f383 	clz	r3, r3
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e3a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	461a      	mov	r2, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e46:	f7ff f957 	bl	80010f8 <HAL_GetTick>
 8001e4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e4e:	e00a      	b.n	8001e66 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e50:	f7ff f952 	bl	80010f8 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d902      	bls.n	8001e66 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	f000 bc50 	b.w	8002706 <HAL_RCC_OscConfig+0xe02>
 8001e66:	2302      	movs	r3, #2
 8001e68:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001e70:	fa93 f3a3 	rbit	r3, r3
 8001e74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001e78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e7c:	fab3 f383 	clz	r3, r3
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	095b      	lsrs	r3, r3, #5
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d102      	bne.n	8001e96 <HAL_RCC_OscConfig+0x592>
 8001e90:	4b30      	ldr	r3, [pc, #192]	; (8001f54 <HAL_RCC_OscConfig+0x650>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	e013      	b.n	8001ebe <HAL_RCC_OscConfig+0x5ba>
 8001e96:	2302      	movs	r3, #2
 8001e98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001ea0:	fa93 f3a3 	rbit	r3, r3
 8001ea4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001eae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001eb2:	fa93 f3a3 	rbit	r3, r3
 8001eb6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001eba:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <HAL_RCC_OscConfig+0x650>)
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001ec4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001ec8:	fa92 f2a2 	rbit	r2, r2
 8001ecc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001ed0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001ed4:	fab2 f282 	clz	r2, r2
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	f042 0220 	orr.w	r2, r2, #32
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	f002 021f 	and.w	r2, r2, #31
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eea:	4013      	ands	r3, r2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1af      	bne.n	8001e50 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ef0:	1d3b      	adds	r3, r7, #4
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 80da 	beq.w	80020b4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d069      	beq.n	8001fde <HAL_RCC_OscConfig+0x6da>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f10:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f20:	fab3 f383 	clz	r3, r3
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	461a      	mov	r2, r3
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <HAL_RCC_OscConfig+0x654>)
 8001f2a:	4413      	add	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	461a      	mov	r2, r3
 8001f30:	2301      	movs	r3, #1
 8001f32:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f34:	f7ff f8e0 	bl	80010f8 <HAL_GetTick>
 8001f38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3c:	e00e      	b.n	8001f5c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f3e:	f7ff f8db 	bl	80010f8 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d906      	bls.n	8001f5c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e3d9      	b.n	8002706 <HAL_RCC_OscConfig+0xe02>
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000
 8001f58:	10908120 	.word	0x10908120
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001f66:	fa93 f3a3 	rbit	r3, r3
 8001f6a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f6e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001f72:	2202      	movs	r2, #2
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	fa93 f2a3 	rbit	r2, r3
 8001f80:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	fa93 f2a3 	rbit	r2, r3
 8001f98:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001f9c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9e:	4ba5      	ldr	r3, [pc, #660]	; (8002234 <HAL_RCC_OscConfig+0x930>)
 8001fa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fa2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001fa6:	2102      	movs	r1, #2
 8001fa8:	6019      	str	r1, [r3, #0]
 8001faa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	fa93 f1a3 	rbit	r1, r3
 8001fb4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001fb8:	6019      	str	r1, [r3, #0]
  return result;
 8001fba:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	fab3 f383 	clz	r3, r3
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	f003 031f 	and.w	r3, r3, #31
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0b0      	beq.n	8001f3e <HAL_RCC_OscConfig+0x63a>
 8001fdc:	e06a      	b.n	80020b4 <HAL_RCC_OscConfig+0x7b0>
 8001fde:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	fa93 f2a3 	rbit	r2, r3
 8001ff0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ff4:	601a      	str	r2, [r3, #0]
  return result;
 8001ff6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ffa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ffc:	fab3 f383 	clz	r3, r3
 8002000:	b2db      	uxtb	r3, r3
 8002002:	461a      	mov	r2, r3
 8002004:	4b8c      	ldr	r3, [pc, #560]	; (8002238 <HAL_RCC_OscConfig+0x934>)
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	461a      	mov	r2, r3
 800200c:	2300      	movs	r3, #0
 800200e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002010:	f7ff f872 	bl	80010f8 <HAL_GetTick>
 8002014:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002018:	e009      	b.n	800202e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800201a:	f7ff f86d 	bl	80010f8 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e36b      	b.n	8002706 <HAL_RCC_OscConfig+0xe02>
 800202e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002032:	2202      	movs	r2, #2
 8002034:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002036:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	fa93 f2a3 	rbit	r2, r3
 8002040:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800204a:	2202      	movs	r2, #2
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	fa93 f2a3 	rbit	r2, r3
 8002058:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002062:	2202      	movs	r2, #2
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	fa93 f2a3 	rbit	r2, r3
 8002070:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002074:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002076:	4b6f      	ldr	r3, [pc, #444]	; (8002234 <HAL_RCC_OscConfig+0x930>)
 8002078:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800207a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800207e:	2102      	movs	r1, #2
 8002080:	6019      	str	r1, [r3, #0]
 8002082:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	fa93 f1a3 	rbit	r1, r3
 800208c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002090:	6019      	str	r1, [r3, #0]
  return result;
 8002092:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	fab3 f383 	clz	r3, r3
 800209c:	b2db      	uxtb	r3, r3
 800209e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	2101      	movs	r1, #1
 80020aa:	fa01 f303 	lsl.w	r3, r1, r3
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1b2      	bne.n	800201a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b4:	1d3b      	adds	r3, r7, #4
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 8158 	beq.w	8002374 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020c4:	2300      	movs	r3, #0
 80020c6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ca:	4b5a      	ldr	r3, [pc, #360]	; (8002234 <HAL_RCC_OscConfig+0x930>)
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d112      	bne.n	80020fc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d6:	4b57      	ldr	r3, [pc, #348]	; (8002234 <HAL_RCC_OscConfig+0x930>)
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	4a56      	ldr	r2, [pc, #344]	; (8002234 <HAL_RCC_OscConfig+0x930>)
 80020dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e0:	61d3      	str	r3, [r2, #28]
 80020e2:	4b54      	ldr	r3, [pc, #336]	; (8002234 <HAL_RCC_OscConfig+0x930>)
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80020ea:	f107 0308 	add.w	r3, r7, #8
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	f107 0308 	add.w	r3, r7, #8
 80020f4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80020f6:	2301      	movs	r3, #1
 80020f8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fc:	4b4f      	ldr	r3, [pc, #316]	; (800223c <HAL_RCC_OscConfig+0x938>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002104:	2b00      	cmp	r3, #0
 8002106:	d11a      	bne.n	800213e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002108:	4b4c      	ldr	r3, [pc, #304]	; (800223c <HAL_RCC_OscConfig+0x938>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a4b      	ldr	r2, [pc, #300]	; (800223c <HAL_RCC_OscConfig+0x938>)
 800210e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002112:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002114:	f7fe fff0 	bl	80010f8 <HAL_GetTick>
 8002118:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211c:	e009      	b.n	8002132 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800211e:	f7fe ffeb 	bl	80010f8 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b64      	cmp	r3, #100	; 0x64
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e2e9      	b.n	8002706 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002132:	4b42      	ldr	r3, [pc, #264]	; (800223c <HAL_RCC_OscConfig+0x938>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0ef      	beq.n	800211e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800213e:	1d3b      	adds	r3, r7, #4
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d106      	bne.n	8002156 <HAL_RCC_OscConfig+0x852>
 8002148:	4b3a      	ldr	r3, [pc, #232]	; (8002234 <HAL_RCC_OscConfig+0x930>)
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	4a39      	ldr	r2, [pc, #228]	; (8002234 <HAL_RCC_OscConfig+0x930>)
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	6213      	str	r3, [r2, #32]
 8002154:	e02f      	b.n	80021b6 <HAL_RCC_OscConfig+0x8b2>
 8002156:	1d3b      	adds	r3, r7, #4
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10c      	bne.n	800217a <HAL_RCC_OscConfig+0x876>
 8002160:	4b34      	ldr	r3, [pc, #208]	; (8002234 <HAL_RCC_OscConfig+0x930>)
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	4a33      	ldr	r2, [pc, #204]	; (8002234 <HAL_RCC_OscConfig+0x930>)
 8002166:	f023 0301 	bic.w	r3, r3, #1
 800216a:	6213      	str	r3, [r2, #32]
 800216c:	4b31      	ldr	r3, [pc, #196]	; (8002234 <HAL_RCC_OscConfig+0x930>)
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	4a30      	ldr	r2, [pc, #192]	; (8002234 <HAL_RCC_OscConfig+0x930>)
 8002172:	f023 0304 	bic.w	r3, r3, #4
 8002176:	6213      	str	r3, [r2, #32]
 8002178:	e01d      	b.n	80021b6 <HAL_RCC_OscConfig+0x8b2>
 800217a:	1d3b      	adds	r3, r7, #4
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	2b05      	cmp	r3, #5
 8002182:	d10c      	bne.n	800219e <HAL_RCC_OscConfig+0x89a>
 8002184:	4b2b      	ldr	r3, [pc, #172]	; (8002234 <HAL_RCC_OscConfig+0x930>)
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	4a2a      	ldr	r2, [pc, #168]	; (8002234 <HAL_RCC_OscConfig+0x930>)
 800218a:	f043 0304 	orr.w	r3, r3, #4
 800218e:	6213      	str	r3, [r2, #32]
 8002190:	4b28      	ldr	r3, [pc, #160]	; (8002234 <HAL_RCC_OscConfig+0x930>)
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	4a27      	ldr	r2, [pc, #156]	; (8002234 <HAL_RCC_OscConfig+0x930>)
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	6213      	str	r3, [r2, #32]
 800219c:	e00b      	b.n	80021b6 <HAL_RCC_OscConfig+0x8b2>
 800219e:	4b25      	ldr	r3, [pc, #148]	; (8002234 <HAL_RCC_OscConfig+0x930>)
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	4a24      	ldr	r2, [pc, #144]	; (8002234 <HAL_RCC_OscConfig+0x930>)
 80021a4:	f023 0301 	bic.w	r3, r3, #1
 80021a8:	6213      	str	r3, [r2, #32]
 80021aa:	4b22      	ldr	r3, [pc, #136]	; (8002234 <HAL_RCC_OscConfig+0x930>)
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	4a21      	ldr	r2, [pc, #132]	; (8002234 <HAL_RCC_OscConfig+0x930>)
 80021b0:	f023 0304 	bic.w	r3, r3, #4
 80021b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021b6:	1d3b      	adds	r3, r7, #4
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d06b      	beq.n	8002298 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c0:	f7fe ff9a 	bl	80010f8 <HAL_GetTick>
 80021c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c8:	e00b      	b.n	80021e2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ca:	f7fe ff95 	bl	80010f8 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021da:	4293      	cmp	r3, r2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e291      	b.n	8002706 <HAL_RCC_OscConfig+0xe02>
 80021e2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80021e6:	2202      	movs	r2, #2
 80021e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	fa93 f2a3 	rbit	r2, r3
 80021f4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80021fe:	2202      	movs	r2, #2
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	fa93 f2a3 	rbit	r2, r3
 800220c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002210:	601a      	str	r2, [r3, #0]
  return result;
 8002212:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002216:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002218:	fab3 f383 	clz	r3, r3
 800221c:	b2db      	uxtb	r3, r3
 800221e:	095b      	lsrs	r3, r3, #5
 8002220:	b2db      	uxtb	r3, r3
 8002222:	f043 0302 	orr.w	r3, r3, #2
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d109      	bne.n	8002240 <HAL_RCC_OscConfig+0x93c>
 800222c:	4b01      	ldr	r3, [pc, #4]	; (8002234 <HAL_RCC_OscConfig+0x930>)
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	e014      	b.n	800225c <HAL_RCC_OscConfig+0x958>
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000
 8002238:	10908120 	.word	0x10908120
 800223c:	40007000 	.word	0x40007000
 8002240:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002244:	2202      	movs	r2, #2
 8002246:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002248:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	fa93 f2a3 	rbit	r2, r3
 8002252:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	4bbb      	ldr	r3, [pc, #748]	; (8002548 <HAL_RCC_OscConfig+0xc44>)
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002260:	2102      	movs	r1, #2
 8002262:	6011      	str	r1, [r2, #0]
 8002264:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	fa92 f1a2 	rbit	r1, r2
 800226e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002272:	6011      	str	r1, [r2, #0]
  return result;
 8002274:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002278:	6812      	ldr	r2, [r2, #0]
 800227a:	fab2 f282 	clz	r2, r2
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	f002 021f 	and.w	r2, r2, #31
 800228a:	2101      	movs	r1, #1
 800228c:	fa01 f202 	lsl.w	r2, r1, r2
 8002290:	4013      	ands	r3, r2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d099      	beq.n	80021ca <HAL_RCC_OscConfig+0x8c6>
 8002296:	e063      	b.n	8002360 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002298:	f7fe ff2e 	bl	80010f8 <HAL_GetTick>
 800229c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a0:	e00b      	b.n	80022ba <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022a2:	f7fe ff29 	bl	80010f8 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e225      	b.n	8002706 <HAL_RCC_OscConfig+0xe02>
 80022ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80022be:	2202      	movs	r2, #2
 80022c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	fa93 f2a3 	rbit	r2, r3
 80022cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80022d6:	2202      	movs	r2, #2
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	fa93 f2a3 	rbit	r2, r3
 80022e4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80022e8:	601a      	str	r2, [r3, #0]
  return result;
 80022ea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80022ee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f0:	fab3 f383 	clz	r3, r3
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	f043 0302 	orr.w	r3, r3, #2
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d102      	bne.n	800230a <HAL_RCC_OscConfig+0xa06>
 8002304:	4b90      	ldr	r3, [pc, #576]	; (8002548 <HAL_RCC_OscConfig+0xc44>)
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	e00d      	b.n	8002326 <HAL_RCC_OscConfig+0xa22>
 800230a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800230e:	2202      	movs	r2, #2
 8002310:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002312:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	fa93 f2a3 	rbit	r2, r3
 800231c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	4b89      	ldr	r3, [pc, #548]	; (8002548 <HAL_RCC_OscConfig+0xc44>)
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800232a:	2102      	movs	r1, #2
 800232c:	6011      	str	r1, [r2, #0]
 800232e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	fa92 f1a2 	rbit	r1, r2
 8002338:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800233c:	6011      	str	r1, [r2, #0]
  return result;
 800233e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	fab2 f282 	clz	r2, r2
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	f002 021f 	and.w	r2, r2, #31
 8002354:	2101      	movs	r1, #1
 8002356:	fa01 f202 	lsl.w	r2, r1, r2
 800235a:	4013      	ands	r3, r2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1a0      	bne.n	80022a2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002360:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002364:	2b01      	cmp	r3, #1
 8002366:	d105      	bne.n	8002374 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002368:	4b77      	ldr	r3, [pc, #476]	; (8002548 <HAL_RCC_OscConfig+0xc44>)
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	4a76      	ldr	r2, [pc, #472]	; (8002548 <HAL_RCC_OscConfig+0xc44>)
 800236e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002372:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002374:	1d3b      	adds	r3, r7, #4
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 81c2 	beq.w	8002704 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002380:	4b71      	ldr	r3, [pc, #452]	; (8002548 <HAL_RCC_OscConfig+0xc44>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 030c 	and.w	r3, r3, #12
 8002388:	2b08      	cmp	r3, #8
 800238a:	f000 819c 	beq.w	80026c6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800238e:	1d3b      	adds	r3, r7, #4
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	2b02      	cmp	r3, #2
 8002396:	f040 8114 	bne.w	80025c2 <HAL_RCC_OscConfig+0xcbe>
 800239a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800239e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	fa93 f2a3 	rbit	r2, r3
 80023ae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80023b2:	601a      	str	r2, [r3, #0]
  return result;
 80023b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80023b8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ba:	fab3 f383 	clz	r3, r3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	461a      	mov	r2, r3
 80023cc:	2300      	movs	r3, #0
 80023ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d0:	f7fe fe92 	bl	80010f8 <HAL_GetTick>
 80023d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d8:	e009      	b.n	80023ee <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023da:	f7fe fe8d 	bl	80010f8 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e18b      	b.n	8002706 <HAL_RCC_OscConfig+0xe02>
 80023ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80023f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	fa93 f2a3 	rbit	r2, r3
 8002402:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002406:	601a      	str	r2, [r3, #0]
  return result;
 8002408:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800240c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800240e:	fab3 f383 	clz	r3, r3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	095b      	lsrs	r3, r3, #5
 8002416:	b2db      	uxtb	r3, r3
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b01      	cmp	r3, #1
 8002420:	d102      	bne.n	8002428 <HAL_RCC_OscConfig+0xb24>
 8002422:	4b49      	ldr	r3, [pc, #292]	; (8002548 <HAL_RCC_OscConfig+0xc44>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	e01b      	b.n	8002460 <HAL_RCC_OscConfig+0xb5c>
 8002428:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800242c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002430:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	fa93 f2a3 	rbit	r2, r3
 800243c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002446:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	fa93 f2a3 	rbit	r2, r3
 8002456:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	4b3a      	ldr	r3, [pc, #232]	; (8002548 <HAL_RCC_OscConfig+0xc44>)
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002464:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002468:	6011      	str	r1, [r2, #0]
 800246a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	fa92 f1a2 	rbit	r1, r2
 8002474:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002478:	6011      	str	r1, [r2, #0]
  return result;
 800247a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	fab2 f282 	clz	r2, r2
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	f042 0220 	orr.w	r2, r2, #32
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	f002 021f 	and.w	r2, r2, #31
 8002490:	2101      	movs	r1, #1
 8002492:	fa01 f202 	lsl.w	r2, r1, r2
 8002496:	4013      	ands	r3, r2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d19e      	bne.n	80023da <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800249c:	4b2a      	ldr	r3, [pc, #168]	; (8002548 <HAL_RCC_OscConfig+0xc44>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024a4:	1d3b      	adds	r3, r7, #4
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80024aa:	1d3b      	adds	r3, r7, #4
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	430b      	orrs	r3, r1
 80024b2:	4925      	ldr	r1, [pc, #148]	; (8002548 <HAL_RCC_OscConfig+0xc44>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	604b      	str	r3, [r1, #4]
 80024b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	fa93 f2a3 	rbit	r2, r3
 80024cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024d0:	601a      	str	r2, [r3, #0]
  return result;
 80024d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024d6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024d8:	fab3 f383 	clz	r3, r3
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	461a      	mov	r2, r3
 80024ea:	2301      	movs	r3, #1
 80024ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ee:	f7fe fe03 	bl	80010f8 <HAL_GetTick>
 80024f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024f6:	e009      	b.n	800250c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f8:	f7fe fdfe 	bl	80010f8 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e0fc      	b.n	8002706 <HAL_RCC_OscConfig+0xe02>
 800250c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002510:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002514:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002516:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	fa93 f2a3 	rbit	r2, r3
 8002520:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002524:	601a      	str	r2, [r3, #0]
  return result;
 8002526:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800252a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800252c:	fab3 f383 	clz	r3, r3
 8002530:	b2db      	uxtb	r3, r3
 8002532:	095b      	lsrs	r3, r3, #5
 8002534:	b2db      	uxtb	r3, r3
 8002536:	f043 0301 	orr.w	r3, r3, #1
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b01      	cmp	r3, #1
 800253e:	d105      	bne.n	800254c <HAL_RCC_OscConfig+0xc48>
 8002540:	4b01      	ldr	r3, [pc, #4]	; (8002548 <HAL_RCC_OscConfig+0xc44>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	e01e      	b.n	8002584 <HAL_RCC_OscConfig+0xc80>
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000
 800254c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002550:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002554:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	fa93 f2a3 	rbit	r2, r3
 8002560:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800256a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	fa93 f2a3 	rbit	r2, r3
 800257a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	4b63      	ldr	r3, [pc, #396]	; (8002710 <HAL_RCC_OscConfig+0xe0c>)
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002588:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800258c:	6011      	str	r1, [r2, #0]
 800258e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002592:	6812      	ldr	r2, [r2, #0]
 8002594:	fa92 f1a2 	rbit	r1, r2
 8002598:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800259c:	6011      	str	r1, [r2, #0]
  return result;
 800259e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	fab2 f282 	clz	r2, r2
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	f042 0220 	orr.w	r2, r2, #32
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	f002 021f 	and.w	r2, r2, #31
 80025b4:	2101      	movs	r1, #1
 80025b6:	fa01 f202 	lsl.w	r2, r1, r2
 80025ba:	4013      	ands	r3, r2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d09b      	beq.n	80024f8 <HAL_RCC_OscConfig+0xbf4>
 80025c0:	e0a0      	b.n	8002704 <HAL_RCC_OscConfig+0xe00>
 80025c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	fa93 f2a3 	rbit	r2, r3
 80025d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025da:	601a      	str	r2, [r3, #0]
  return result;
 80025dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025e0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e2:	fab3 f383 	clz	r3, r3
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	461a      	mov	r2, r3
 80025f4:	2300      	movs	r3, #0
 80025f6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f8:	f7fe fd7e 	bl	80010f8 <HAL_GetTick>
 80025fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002600:	e009      	b.n	8002616 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002602:	f7fe fd79 	bl	80010f8 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e077      	b.n	8002706 <HAL_RCC_OscConfig+0xe02>
 8002616:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800261a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800261e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002620:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	fa93 f2a3 	rbit	r2, r3
 800262a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800262e:	601a      	str	r2, [r3, #0]
  return result;
 8002630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002634:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002636:	fab3 f383 	clz	r3, r3
 800263a:	b2db      	uxtb	r3, r3
 800263c:	095b      	lsrs	r3, r3, #5
 800263e:	b2db      	uxtb	r3, r3
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b01      	cmp	r3, #1
 8002648:	d102      	bne.n	8002650 <HAL_RCC_OscConfig+0xd4c>
 800264a:	4b31      	ldr	r3, [pc, #196]	; (8002710 <HAL_RCC_OscConfig+0xe0c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	e01b      	b.n	8002688 <HAL_RCC_OscConfig+0xd84>
 8002650:	f107 0320 	add.w	r3, r7, #32
 8002654:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002658:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	f107 0320 	add.w	r3, r7, #32
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	fa93 f2a3 	rbit	r2, r3
 8002664:	f107 031c 	add.w	r3, r7, #28
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	f107 0318 	add.w	r3, r7, #24
 800266e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	f107 0318 	add.w	r3, r7, #24
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	fa93 f2a3 	rbit	r2, r3
 800267e:	f107 0314 	add.w	r3, r7, #20
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	4b22      	ldr	r3, [pc, #136]	; (8002710 <HAL_RCC_OscConfig+0xe0c>)
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	f107 0210 	add.w	r2, r7, #16
 800268c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002690:	6011      	str	r1, [r2, #0]
 8002692:	f107 0210 	add.w	r2, r7, #16
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	fa92 f1a2 	rbit	r1, r2
 800269c:	f107 020c 	add.w	r2, r7, #12
 80026a0:	6011      	str	r1, [r2, #0]
  return result;
 80026a2:	f107 020c 	add.w	r2, r7, #12
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	fab2 f282 	clz	r2, r2
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	f042 0220 	orr.w	r2, r2, #32
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	f002 021f 	and.w	r2, r2, #31
 80026b8:	2101      	movs	r1, #1
 80026ba:	fa01 f202 	lsl.w	r2, r1, r2
 80026be:	4013      	ands	r3, r2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d19e      	bne.n	8002602 <HAL_RCC_OscConfig+0xcfe>
 80026c4:	e01e      	b.n	8002704 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026c6:	1d3b      	adds	r3, r7, #4
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d101      	bne.n	80026d4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e018      	b.n	8002706 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026d4:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <HAL_RCC_OscConfig+0xe0c>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026dc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80026e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026e4:	1d3b      	adds	r3, r7, #4
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d108      	bne.n	8002700 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80026ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80026f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026f6:	1d3b      	adds	r3, r7, #4
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e000      	b.n	8002706 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40021000 	.word	0x40021000

08002714 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b09e      	sub	sp, #120	; 0x78
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800271e:	2300      	movs	r3, #0
 8002720:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e162      	b.n	80029f2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800272c:	4b90      	ldr	r3, [pc, #576]	; (8002970 <HAL_RCC_ClockConfig+0x25c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d910      	bls.n	800275c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273a:	4b8d      	ldr	r3, [pc, #564]	; (8002970 <HAL_RCC_ClockConfig+0x25c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 0207 	bic.w	r2, r3, #7
 8002742:	498b      	ldr	r1, [pc, #556]	; (8002970 <HAL_RCC_ClockConfig+0x25c>)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	4313      	orrs	r3, r2
 8002748:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800274a:	4b89      	ldr	r3, [pc, #548]	; (8002970 <HAL_RCC_ClockConfig+0x25c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d001      	beq.n	800275c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e14a      	b.n	80029f2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002768:	4b82      	ldr	r3, [pc, #520]	; (8002974 <HAL_RCC_ClockConfig+0x260>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	497f      	ldr	r1, [pc, #508]	; (8002974 <HAL_RCC_ClockConfig+0x260>)
 8002776:	4313      	orrs	r3, r2
 8002778:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 80dc 	beq.w	8002940 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d13c      	bne.n	800280a <HAL_RCC_ClockConfig+0xf6>
 8002790:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002794:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002796:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002798:	fa93 f3a3 	rbit	r3, r3
 800279c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800279e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d102      	bne.n	80027ba <HAL_RCC_ClockConfig+0xa6>
 80027b4:	4b6f      	ldr	r3, [pc, #444]	; (8002974 <HAL_RCC_ClockConfig+0x260>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	e00f      	b.n	80027da <HAL_RCC_ClockConfig+0xc6>
 80027ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027c2:	fa93 f3a3 	rbit	r3, r3
 80027c6:	667b      	str	r3, [r7, #100]	; 0x64
 80027c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027cc:	663b      	str	r3, [r7, #96]	; 0x60
 80027ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027d0:	fa93 f3a3 	rbit	r3, r3
 80027d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027d6:	4b67      	ldr	r3, [pc, #412]	; (8002974 <HAL_RCC_ClockConfig+0x260>)
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027de:	65ba      	str	r2, [r7, #88]	; 0x58
 80027e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027e2:	fa92 f2a2 	rbit	r2, r2
 80027e6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80027e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80027ea:	fab2 f282 	clz	r2, r2
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	f042 0220 	orr.w	r2, r2, #32
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	f002 021f 	and.w	r2, r2, #31
 80027fa:	2101      	movs	r1, #1
 80027fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002800:	4013      	ands	r3, r2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d17b      	bne.n	80028fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e0f3      	b.n	80029f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b02      	cmp	r3, #2
 8002810:	d13c      	bne.n	800288c <HAL_RCC_ClockConfig+0x178>
 8002812:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002816:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800281a:	fa93 f3a3 	rbit	r3, r3
 800281e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002822:	fab3 f383 	clz	r3, r3
 8002826:	b2db      	uxtb	r3, r3
 8002828:	095b      	lsrs	r3, r3, #5
 800282a:	b2db      	uxtb	r3, r3
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b01      	cmp	r3, #1
 8002834:	d102      	bne.n	800283c <HAL_RCC_ClockConfig+0x128>
 8002836:	4b4f      	ldr	r3, [pc, #316]	; (8002974 <HAL_RCC_ClockConfig+0x260>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	e00f      	b.n	800285c <HAL_RCC_ClockConfig+0x148>
 800283c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002840:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002844:	fa93 f3a3 	rbit	r3, r3
 8002848:	647b      	str	r3, [r7, #68]	; 0x44
 800284a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800284e:	643b      	str	r3, [r7, #64]	; 0x40
 8002850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002852:	fa93 f3a3 	rbit	r3, r3
 8002856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002858:	4b46      	ldr	r3, [pc, #280]	; (8002974 <HAL_RCC_ClockConfig+0x260>)
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002860:	63ba      	str	r2, [r7, #56]	; 0x38
 8002862:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002864:	fa92 f2a2 	rbit	r2, r2
 8002868:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800286a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800286c:	fab2 f282 	clz	r2, r2
 8002870:	b2d2      	uxtb	r2, r2
 8002872:	f042 0220 	orr.w	r2, r2, #32
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	f002 021f 	and.w	r2, r2, #31
 800287c:	2101      	movs	r1, #1
 800287e:	fa01 f202 	lsl.w	r2, r1, r2
 8002882:	4013      	ands	r3, r2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d13a      	bne.n	80028fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e0b2      	b.n	80029f2 <HAL_RCC_ClockConfig+0x2de>
 800288c:	2302      	movs	r3, #2
 800288e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002892:	fa93 f3a3 	rbit	r3, r3
 8002896:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289a:	fab3 f383 	clz	r3, r3
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	095b      	lsrs	r3, r3, #5
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d102      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x1a0>
 80028ae:	4b31      	ldr	r3, [pc, #196]	; (8002974 <HAL_RCC_ClockConfig+0x260>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	e00d      	b.n	80028d0 <HAL_RCC_ClockConfig+0x1bc>
 80028b4:	2302      	movs	r3, #2
 80028b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ba:	fa93 f3a3 	rbit	r3, r3
 80028be:	627b      	str	r3, [r7, #36]	; 0x24
 80028c0:	2302      	movs	r3, #2
 80028c2:	623b      	str	r3, [r7, #32]
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	fa93 f3a3 	rbit	r3, r3
 80028ca:	61fb      	str	r3, [r7, #28]
 80028cc:	4b29      	ldr	r3, [pc, #164]	; (8002974 <HAL_RCC_ClockConfig+0x260>)
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	2202      	movs	r2, #2
 80028d2:	61ba      	str	r2, [r7, #24]
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	fa92 f2a2 	rbit	r2, r2
 80028da:	617a      	str	r2, [r7, #20]
  return result;
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	fab2 f282 	clz	r2, r2
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	f042 0220 	orr.w	r2, r2, #32
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	f002 021f 	and.w	r2, r2, #31
 80028ee:	2101      	movs	r1, #1
 80028f0:	fa01 f202 	lsl.w	r2, r1, r2
 80028f4:	4013      	ands	r3, r2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e079      	b.n	80029f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028fe:	4b1d      	ldr	r3, [pc, #116]	; (8002974 <HAL_RCC_ClockConfig+0x260>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f023 0203 	bic.w	r2, r3, #3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	491a      	ldr	r1, [pc, #104]	; (8002974 <HAL_RCC_ClockConfig+0x260>)
 800290c:	4313      	orrs	r3, r2
 800290e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002910:	f7fe fbf2 	bl	80010f8 <HAL_GetTick>
 8002914:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002916:	e00a      	b.n	800292e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002918:	f7fe fbee 	bl	80010f8 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	f241 3288 	movw	r2, #5000	; 0x1388
 8002926:	4293      	cmp	r3, r2
 8002928:	d901      	bls.n	800292e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e061      	b.n	80029f2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292e:	4b11      	ldr	r3, [pc, #68]	; (8002974 <HAL_RCC_ClockConfig+0x260>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f003 020c 	and.w	r2, r3, #12
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	429a      	cmp	r2, r3
 800293e:	d1eb      	bne.n	8002918 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <HAL_RCC_ClockConfig+0x25c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d214      	bcs.n	8002978 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294e:	4b08      	ldr	r3, [pc, #32]	; (8002970 <HAL_RCC_ClockConfig+0x25c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f023 0207 	bic.w	r2, r3, #7
 8002956:	4906      	ldr	r1, [pc, #24]	; (8002970 <HAL_RCC_ClockConfig+0x25c>)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	4313      	orrs	r3, r2
 800295c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800295e:	4b04      	ldr	r3, [pc, #16]	; (8002970 <HAL_RCC_ClockConfig+0x25c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d005      	beq.n	8002978 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e040      	b.n	80029f2 <HAL_RCC_ClockConfig+0x2de>
 8002970:	40022000 	.word	0x40022000
 8002974:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d008      	beq.n	8002996 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002984:	4b1d      	ldr	r3, [pc, #116]	; (80029fc <HAL_RCC_ClockConfig+0x2e8>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	491a      	ldr	r1, [pc, #104]	; (80029fc <HAL_RCC_ClockConfig+0x2e8>)
 8002992:	4313      	orrs	r3, r2
 8002994:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d009      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029a2:	4b16      	ldr	r3, [pc, #88]	; (80029fc <HAL_RCC_ClockConfig+0x2e8>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	4912      	ldr	r1, [pc, #72]	; (80029fc <HAL_RCC_ClockConfig+0x2e8>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80029b6:	f000 f829 	bl	8002a0c <HAL_RCC_GetSysClockFreq>
 80029ba:	4601      	mov	r1, r0
 80029bc:	4b0f      	ldr	r3, [pc, #60]	; (80029fc <HAL_RCC_ClockConfig+0x2e8>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029c4:	22f0      	movs	r2, #240	; 0xf0
 80029c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	fa92 f2a2 	rbit	r2, r2
 80029ce:	60fa      	str	r2, [r7, #12]
  return result;
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	fab2 f282 	clz	r2, r2
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	40d3      	lsrs	r3, r2
 80029da:	4a09      	ldr	r2, [pc, #36]	; (8002a00 <HAL_RCC_ClockConfig+0x2ec>)
 80029dc:	5cd3      	ldrb	r3, [r2, r3]
 80029de:	fa21 f303 	lsr.w	r3, r1, r3
 80029e2:	4a08      	ldr	r2, [pc, #32]	; (8002a04 <HAL_RCC_ClockConfig+0x2f0>)
 80029e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80029e6:	4b08      	ldr	r3, [pc, #32]	; (8002a08 <HAL_RCC_ClockConfig+0x2f4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe fb40 	bl	8001070 <HAL_InitTick>
  
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3778      	adds	r7, #120	; 0x78
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40021000 	.word	0x40021000
 8002a00:	0800582c 	.word	0x0800582c
 8002a04:	20000000 	.word	0x20000000
 8002a08:	20000004 	.word	0x20000004

08002a0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b08b      	sub	sp, #44	; 0x2c
 8002a10:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
 8002a16:	2300      	movs	r3, #0
 8002a18:	61bb      	str	r3, [r7, #24]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002a26:	4b29      	ldr	r3, [pc, #164]	; (8002acc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d002      	beq.n	8002a3c <HAL_RCC_GetSysClockFreq+0x30>
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d003      	beq.n	8002a42 <HAL_RCC_GetSysClockFreq+0x36>
 8002a3a:	e03c      	b.n	8002ab6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a3c:	4b24      	ldr	r3, [pc, #144]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a3e:	623b      	str	r3, [r7, #32]
      break;
 8002a40:	e03c      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a48:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002a4c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	fa92 f2a2 	rbit	r2, r2
 8002a54:	607a      	str	r2, [r7, #4]
  return result;
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	fab2 f282 	clz	r2, r2
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	40d3      	lsrs	r3, r2
 8002a60:	4a1c      	ldr	r2, [pc, #112]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a62:	5cd3      	ldrb	r3, [r2, r3]
 8002a64:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a66:	4b19      	ldr	r3, [pc, #100]	; (8002acc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	220f      	movs	r2, #15
 8002a70:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	fa92 f2a2 	rbit	r2, r2
 8002a78:	60fa      	str	r2, [r7, #12]
  return result;
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	fab2 f282 	clz	r2, r2
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	40d3      	lsrs	r3, r2
 8002a84:	4a14      	ldr	r2, [pc, #80]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a86:	5cd3      	ldrb	r3, [r2, r3]
 8002a88:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a94:	4a0e      	ldr	r2, [pc, #56]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	fb02 f303 	mul.w	r3, r2, r3
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa4:	e004      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	4a0c      	ldr	r2, [pc, #48]	; (8002adc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002aaa:	fb02 f303 	mul.w	r3, r2, r3
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	623b      	str	r3, [r7, #32]
      break;
 8002ab4:	e002      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ab6:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ab8:	623b      	str	r3, [r7, #32]
      break;
 8002aba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002abc:	6a3b      	ldr	r3, [r7, #32]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	372c      	adds	r7, #44	; 0x2c
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	007a1200 	.word	0x007a1200
 8002ad4:	08005844 	.word	0x08005844
 8002ad8:	08005854 	.word	0x08005854
 8002adc:	003d0900 	.word	0x003d0900

08002ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ae4:	4b03      	ldr	r3, [pc, #12]	; (8002af4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	20000000 	.word	0x20000000

08002af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002afe:	f7ff ffef 	bl	8002ae0 <HAL_RCC_GetHCLKFreq>
 8002b02:	4601      	mov	r1, r0
 8002b04:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b0c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b10:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	fa92 f2a2 	rbit	r2, r2
 8002b18:	603a      	str	r2, [r7, #0]
  return result;
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	fab2 f282 	clz	r2, r2
 8002b20:	b2d2      	uxtb	r2, r2
 8002b22:	40d3      	lsrs	r3, r2
 8002b24:	4a04      	ldr	r2, [pc, #16]	; (8002b38 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b26:	5cd3      	ldrb	r3, [r2, r3]
 8002b28:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40021000 	.word	0x40021000
 8002b38:	0800583c 	.word	0x0800583c

08002b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b42:	f7ff ffcd 	bl	8002ae0 <HAL_RCC_GetHCLKFreq>
 8002b46:	4601      	mov	r1, r0
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002b50:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002b54:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	fa92 f2a2 	rbit	r2, r2
 8002b5c:	603a      	str	r2, [r7, #0]
  return result;
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	fab2 f282 	clz	r2, r2
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	40d3      	lsrs	r3, r2
 8002b68:	4a04      	ldr	r2, [pc, #16]	; (8002b7c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002b6a:	5cd3      	ldrb	r3, [r2, r3]
 8002b6c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002b70:	4618      	mov	r0, r3
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	0800583c 	.word	0x0800583c

08002b80 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b092      	sub	sp, #72	; 0x48
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002b90:	2300      	movs	r3, #0
 8002b92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 80d4 	beq.w	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ba4:	4b4e      	ldr	r3, [pc, #312]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10e      	bne.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb0:	4b4b      	ldr	r3, [pc, #300]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	4a4a      	ldr	r2, [pc, #296]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bba:	61d3      	str	r3, [r2, #28]
 8002bbc:	4b48      	ldr	r3, [pc, #288]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bce:	4b45      	ldr	r3, [pc, #276]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d118      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bda:	4b42      	ldr	r3, [pc, #264]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a41      	ldr	r2, [pc, #260]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002be6:	f7fe fa87 	bl	80010f8 <HAL_GetTick>
 8002bea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bec:	e008      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bee:	f7fe fa83 	bl	80010f8 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b64      	cmp	r3, #100	; 0x64
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e169      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c00:	4b38      	ldr	r3, [pc, #224]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f0      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c0c:	4b34      	ldr	r3, [pc, #208]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c14:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 8084 	beq.w	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d07c      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c2c:	4b2c      	ldr	r3, [pc, #176]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c46:	fab3 f383 	clz	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4b26      	ldr	r3, [pc, #152]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c50:	4413      	add	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	461a      	mov	r2, r3
 8002c56:	2301      	movs	r3, #1
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c62:	fa93 f3a3 	rbit	r3, r3
 8002c66:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c6a:	fab3 f383 	clz	r3, r3
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	461a      	mov	r2, r3
 8002c72:	4b1d      	ldr	r3, [pc, #116]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	461a      	mov	r2, r3
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c7e:	4a18      	ldr	r2, [pc, #96]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c82:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d04b      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8e:	f7fe fa33 	bl	80010f8 <HAL_GetTick>
 8002c92:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c94:	e00a      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c96:	f7fe fa2f 	bl	80010f8 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e113      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002cac:	2302      	movs	r3, #2
 8002cae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb2:	fa93 f3a3 	rbit	r3, r3
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb8:	2302      	movs	r3, #2
 8002cba:	623b      	str	r3, [r7, #32]
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	fa93 f3a3 	rbit	r3, r3
 8002cc2:	61fb      	str	r3, [r7, #28]
  return result;
 8002cc4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc6:	fab3 f383 	clz	r3, r3
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	095b      	lsrs	r3, r3, #5
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	f043 0302 	orr.w	r3, r3, #2
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d108      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002cda:	4b01      	ldr	r3, [pc, #4]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	e00d      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40007000 	.word	0x40007000
 8002ce8:	10908100 	.word	0x10908100
 8002cec:	2302      	movs	r3, #2
 8002cee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	fa93 f3a3 	rbit	r3, r3
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	4b78      	ldr	r3, [pc, #480]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	613a      	str	r2, [r7, #16]
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	fa92 f2a2 	rbit	r2, r2
 8002d06:	60fa      	str	r2, [r7, #12]
  return result;
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	fab2 f282 	clz	r2, r2
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	f002 021f 	and.w	r2, r2, #31
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0b7      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d26:	4b6d      	ldr	r3, [pc, #436]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	496a      	ldr	r1, [pc, #424]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d105      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d40:	4b66      	ldr	r3, [pc, #408]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	4a65      	ldr	r2, [pc, #404]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d008      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d58:	4b60      	ldr	r3, [pc, #384]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5c:	f023 0203 	bic.w	r2, r3, #3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	495d      	ldr	r1, [pc, #372]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d008      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d76:	4b59      	ldr	r3, [pc, #356]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	4956      	ldr	r1, [pc, #344]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d008      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d94:	4b51      	ldr	r3, [pc, #324]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	494e      	ldr	r1, [pc, #312]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0320 	and.w	r3, r3, #32
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d008      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002db2:	4b4a      	ldr	r3, [pc, #296]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	f023 0210 	bic.w	r2, r3, #16
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	4947      	ldr	r1, [pc, #284]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002dd0:	4b42      	ldr	r3, [pc, #264]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ddc:	493f      	ldr	r1, [pc, #252]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d008      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dee:	4b3b      	ldr	r3, [pc, #236]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	f023 0220 	bic.w	r2, r3, #32
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	4938      	ldr	r1, [pc, #224]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0308 	and.w	r3, r3, #8
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d008      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e0c:	4b33      	ldr	r3, [pc, #204]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	4930      	ldr	r1, [pc, #192]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0310 	and.w	r3, r3, #16
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d008      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e2a:	4b2c      	ldr	r3, [pc, #176]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	4929      	ldr	r1, [pc, #164]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d008      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e48:	4b24      	ldr	r3, [pc, #144]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e54:	4921      	ldr	r1, [pc, #132]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d008      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e66:	4b1d      	ldr	r3, [pc, #116]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	491a      	ldr	r1, [pc, #104]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d008      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002e84:	4b15      	ldr	r3, [pc, #84]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	4912      	ldr	r1, [pc, #72]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d008      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ea2:	4b0e      	ldr	r3, [pc, #56]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	490b      	ldr	r1, [pc, #44]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d008      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002ec0:	4b06      	ldr	r3, [pc, #24]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ecc:	4903      	ldr	r1, [pc, #12]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3748      	adds	r7, #72	; 0x48
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40021000 	.word	0x40021000

08002ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e049      	b.n	8002f86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d106      	bne.n	8002f0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7fd feac 	bl	8000c64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4610      	mov	r0, r2
 8002f20:	f000 fad8 	bl	80034d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d001      	beq.n	8002fa8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e042      	b.n	800302e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2202      	movs	r2, #2
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a21      	ldr	r2, [pc, #132]	; (800303c <HAL_TIM_Base_Start+0xac>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d018      	beq.n	8002fec <HAL_TIM_Base_Start+0x5c>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc2:	d013      	beq.n	8002fec <HAL_TIM_Base_Start+0x5c>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a1d      	ldr	r2, [pc, #116]	; (8003040 <HAL_TIM_Base_Start+0xb0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d00e      	beq.n	8002fec <HAL_TIM_Base_Start+0x5c>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a1c      	ldr	r2, [pc, #112]	; (8003044 <HAL_TIM_Base_Start+0xb4>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d009      	beq.n	8002fec <HAL_TIM_Base_Start+0x5c>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a1a      	ldr	r2, [pc, #104]	; (8003048 <HAL_TIM_Base_Start+0xb8>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d004      	beq.n	8002fec <HAL_TIM_Base_Start+0x5c>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a19      	ldr	r2, [pc, #100]	; (800304c <HAL_TIM_Base_Start+0xbc>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d115      	bne.n	8003018 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	4b17      	ldr	r3, [pc, #92]	; (8003050 <HAL_TIM_Base_Start+0xc0>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2b06      	cmp	r3, #6
 8002ffc:	d015      	beq.n	800302a <HAL_TIM_Base_Start+0x9a>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003004:	d011      	beq.n	800302a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 0201 	orr.w	r2, r2, #1
 8003014:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003016:	e008      	b.n	800302a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0201 	orr.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	e000      	b.n	800302c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800302a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40012c00 	.word	0x40012c00
 8003040:	40000400 	.word	0x40000400
 8003044:	40000800 	.word	0x40000800
 8003048:	40013400 	.word	0x40013400
 800304c:	40014000 	.word	0x40014000
 8003050:	00010007 	.word	0x00010007

08003054 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e049      	b.n	80030fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d106      	bne.n	8003080 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f841 	bl	8003102 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3304      	adds	r3, #4
 8003090:	4619      	mov	r1, r3
 8003092:	4610      	mov	r0, r2
 8003094:	f000 fa1e 	bl	80034d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
	...

08003118 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003132:	2302      	movs	r3, #2
 8003134:	e0ff      	b.n	8003336 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b14      	cmp	r3, #20
 8003142:	f200 80f0 	bhi.w	8003326 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003146:	a201      	add	r2, pc, #4	; (adr r2, 800314c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314c:	080031a1 	.word	0x080031a1
 8003150:	08003327 	.word	0x08003327
 8003154:	08003327 	.word	0x08003327
 8003158:	08003327 	.word	0x08003327
 800315c:	080031e1 	.word	0x080031e1
 8003160:	08003327 	.word	0x08003327
 8003164:	08003327 	.word	0x08003327
 8003168:	08003327 	.word	0x08003327
 800316c:	08003223 	.word	0x08003223
 8003170:	08003327 	.word	0x08003327
 8003174:	08003327 	.word	0x08003327
 8003178:	08003327 	.word	0x08003327
 800317c:	08003263 	.word	0x08003263
 8003180:	08003327 	.word	0x08003327
 8003184:	08003327 	.word	0x08003327
 8003188:	08003327 	.word	0x08003327
 800318c:	080032a5 	.word	0x080032a5
 8003190:	08003327 	.word	0x08003327
 8003194:	08003327 	.word	0x08003327
 8003198:	08003327 	.word	0x08003327
 800319c:	080032e5 	.word	0x080032e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68b9      	ldr	r1, [r7, #8]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 fa24 	bl	80035f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699a      	ldr	r2, [r3, #24]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f042 0208 	orr.w	r2, r2, #8
 80031ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699a      	ldr	r2, [r3, #24]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0204 	bic.w	r2, r2, #4
 80031ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6999      	ldr	r1, [r3, #24]
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	691a      	ldr	r2, [r3, #16]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	619a      	str	r2, [r3, #24]
      break;
 80031de:	e0a5      	b.n	800332c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68b9      	ldr	r1, [r7, #8]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 fa94 	bl	8003714 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699a      	ldr	r2, [r3, #24]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699a      	ldr	r2, [r3, #24]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800320a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6999      	ldr	r1, [r3, #24]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	021a      	lsls	r2, r3, #8
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	619a      	str	r2, [r3, #24]
      break;
 8003220:	e084      	b.n	800332c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68b9      	ldr	r1, [r7, #8]
 8003228:	4618      	mov	r0, r3
 800322a:	f000 fafd 	bl	8003828 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69da      	ldr	r2, [r3, #28]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f042 0208 	orr.w	r2, r2, #8
 800323c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	69da      	ldr	r2, [r3, #28]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0204 	bic.w	r2, r2, #4
 800324c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	69d9      	ldr	r1, [r3, #28]
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	61da      	str	r2, [r3, #28]
      break;
 8003260:	e064      	b.n	800332c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68b9      	ldr	r1, [r7, #8]
 8003268:	4618      	mov	r0, r3
 800326a:	f000 fb65 	bl	8003938 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	69da      	ldr	r2, [r3, #28]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800327c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	69da      	ldr	r2, [r3, #28]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800328c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	69d9      	ldr	r1, [r3, #28]
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	021a      	lsls	r2, r3, #8
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	61da      	str	r2, [r3, #28]
      break;
 80032a2:	e043      	b.n	800332c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68b9      	ldr	r1, [r7, #8]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 fbae 	bl	8003a0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0208 	orr.w	r2, r2, #8
 80032be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0204 	bic.w	r2, r2, #4
 80032ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	691a      	ldr	r2, [r3, #16]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80032e2:	e023      	b.n	800332c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68b9      	ldr	r1, [r7, #8]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 fbf2 	bl	8003ad4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800330e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	021a      	lsls	r2, r3, #8
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003324:	e002      	b.n	800332c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	75fb      	strb	r3, [r7, #23]
      break;
 800332a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003334:	7dfb      	ldrb	r3, [r7, #23]
}
 8003336:	4618      	mov	r0, r3
 8003338:	3718      	adds	r7, #24
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop

08003340 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_TIM_ConfigClockSource+0x1c>
 8003358:	2302      	movs	r3, #2
 800335a:	e0b6      	b.n	80034ca <HAL_TIM_ConfigClockSource+0x18a>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800337a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800337e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003386:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003398:	d03e      	beq.n	8003418 <HAL_TIM_ConfigClockSource+0xd8>
 800339a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800339e:	f200 8087 	bhi.w	80034b0 <HAL_TIM_ConfigClockSource+0x170>
 80033a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033a6:	f000 8086 	beq.w	80034b6 <HAL_TIM_ConfigClockSource+0x176>
 80033aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ae:	d87f      	bhi.n	80034b0 <HAL_TIM_ConfigClockSource+0x170>
 80033b0:	2b70      	cmp	r3, #112	; 0x70
 80033b2:	d01a      	beq.n	80033ea <HAL_TIM_ConfigClockSource+0xaa>
 80033b4:	2b70      	cmp	r3, #112	; 0x70
 80033b6:	d87b      	bhi.n	80034b0 <HAL_TIM_ConfigClockSource+0x170>
 80033b8:	2b60      	cmp	r3, #96	; 0x60
 80033ba:	d050      	beq.n	800345e <HAL_TIM_ConfigClockSource+0x11e>
 80033bc:	2b60      	cmp	r3, #96	; 0x60
 80033be:	d877      	bhi.n	80034b0 <HAL_TIM_ConfigClockSource+0x170>
 80033c0:	2b50      	cmp	r3, #80	; 0x50
 80033c2:	d03c      	beq.n	800343e <HAL_TIM_ConfigClockSource+0xfe>
 80033c4:	2b50      	cmp	r3, #80	; 0x50
 80033c6:	d873      	bhi.n	80034b0 <HAL_TIM_ConfigClockSource+0x170>
 80033c8:	2b40      	cmp	r3, #64	; 0x40
 80033ca:	d058      	beq.n	800347e <HAL_TIM_ConfigClockSource+0x13e>
 80033cc:	2b40      	cmp	r3, #64	; 0x40
 80033ce:	d86f      	bhi.n	80034b0 <HAL_TIM_ConfigClockSource+0x170>
 80033d0:	2b30      	cmp	r3, #48	; 0x30
 80033d2:	d064      	beq.n	800349e <HAL_TIM_ConfigClockSource+0x15e>
 80033d4:	2b30      	cmp	r3, #48	; 0x30
 80033d6:	d86b      	bhi.n	80034b0 <HAL_TIM_ConfigClockSource+0x170>
 80033d8:	2b20      	cmp	r3, #32
 80033da:	d060      	beq.n	800349e <HAL_TIM_ConfigClockSource+0x15e>
 80033dc:	2b20      	cmp	r3, #32
 80033de:	d867      	bhi.n	80034b0 <HAL_TIM_ConfigClockSource+0x170>
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d05c      	beq.n	800349e <HAL_TIM_ConfigClockSource+0x15e>
 80033e4:	2b10      	cmp	r3, #16
 80033e6:	d05a      	beq.n	800349e <HAL_TIM_ConfigClockSource+0x15e>
 80033e8:	e062      	b.n	80034b0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6818      	ldr	r0, [r3, #0]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	6899      	ldr	r1, [r3, #8]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f000 fc4b 	bl	8003c94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800340c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	609a      	str	r2, [r3, #8]
      break;
 8003416:	e04f      	b.n	80034b8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6818      	ldr	r0, [r3, #0]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	6899      	ldr	r1, [r3, #8]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f000 fc34 	bl	8003c94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800343a:	609a      	str	r2, [r3, #8]
      break;
 800343c:	e03c      	b.n	80034b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6818      	ldr	r0, [r3, #0]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	6859      	ldr	r1, [r3, #4]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	461a      	mov	r2, r3
 800344c:	f000 fba8 	bl	8003ba0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2150      	movs	r1, #80	; 0x50
 8003456:	4618      	mov	r0, r3
 8003458:	f000 fc01 	bl	8003c5e <TIM_ITRx_SetConfig>
      break;
 800345c:	e02c      	b.n	80034b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	6859      	ldr	r1, [r3, #4]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	461a      	mov	r2, r3
 800346c:	f000 fbc7 	bl	8003bfe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2160      	movs	r1, #96	; 0x60
 8003476:	4618      	mov	r0, r3
 8003478:	f000 fbf1 	bl	8003c5e <TIM_ITRx_SetConfig>
      break;
 800347c:	e01c      	b.n	80034b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	6859      	ldr	r1, [r3, #4]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	461a      	mov	r2, r3
 800348c:	f000 fb88 	bl	8003ba0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2140      	movs	r1, #64	; 0x40
 8003496:	4618      	mov	r0, r3
 8003498:	f000 fbe1 	bl	8003c5e <TIM_ITRx_SetConfig>
      break;
 800349c:	e00c      	b.n	80034b8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4619      	mov	r1, r3
 80034a8:	4610      	mov	r0, r2
 80034aa:	f000 fbd8 	bl	8003c5e <TIM_ITRx_SetConfig>
      break;
 80034ae:	e003      	b.n	80034b8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	73fb      	strb	r3, [r7, #15]
      break;
 80034b4:	e000      	b.n	80034b8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80034b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a3c      	ldr	r2, [pc, #240]	; (80035d8 <TIM_Base_SetConfig+0x104>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d00f      	beq.n	800350c <TIM_Base_SetConfig+0x38>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f2:	d00b      	beq.n	800350c <TIM_Base_SetConfig+0x38>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a39      	ldr	r2, [pc, #228]	; (80035dc <TIM_Base_SetConfig+0x108>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d007      	beq.n	800350c <TIM_Base_SetConfig+0x38>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a38      	ldr	r2, [pc, #224]	; (80035e0 <TIM_Base_SetConfig+0x10c>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d003      	beq.n	800350c <TIM_Base_SetConfig+0x38>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a37      	ldr	r2, [pc, #220]	; (80035e4 <TIM_Base_SetConfig+0x110>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d108      	bne.n	800351e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	4313      	orrs	r3, r2
 800351c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a2d      	ldr	r2, [pc, #180]	; (80035d8 <TIM_Base_SetConfig+0x104>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d01b      	beq.n	800355e <TIM_Base_SetConfig+0x8a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352c:	d017      	beq.n	800355e <TIM_Base_SetConfig+0x8a>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a2a      	ldr	r2, [pc, #168]	; (80035dc <TIM_Base_SetConfig+0x108>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d013      	beq.n	800355e <TIM_Base_SetConfig+0x8a>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a29      	ldr	r2, [pc, #164]	; (80035e0 <TIM_Base_SetConfig+0x10c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d00f      	beq.n	800355e <TIM_Base_SetConfig+0x8a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a28      	ldr	r2, [pc, #160]	; (80035e4 <TIM_Base_SetConfig+0x110>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d00b      	beq.n	800355e <TIM_Base_SetConfig+0x8a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a27      	ldr	r2, [pc, #156]	; (80035e8 <TIM_Base_SetConfig+0x114>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d007      	beq.n	800355e <TIM_Base_SetConfig+0x8a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a26      	ldr	r2, [pc, #152]	; (80035ec <TIM_Base_SetConfig+0x118>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d003      	beq.n	800355e <TIM_Base_SetConfig+0x8a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a25      	ldr	r2, [pc, #148]	; (80035f0 <TIM_Base_SetConfig+0x11c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d108      	bne.n	8003570 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	4313      	orrs	r3, r2
 800356e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a10      	ldr	r2, [pc, #64]	; (80035d8 <TIM_Base_SetConfig+0x104>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d00f      	beq.n	80035bc <TIM_Base_SetConfig+0xe8>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a11      	ldr	r2, [pc, #68]	; (80035e4 <TIM_Base_SetConfig+0x110>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d00b      	beq.n	80035bc <TIM_Base_SetConfig+0xe8>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a10      	ldr	r2, [pc, #64]	; (80035e8 <TIM_Base_SetConfig+0x114>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d007      	beq.n	80035bc <TIM_Base_SetConfig+0xe8>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a0f      	ldr	r2, [pc, #60]	; (80035ec <TIM_Base_SetConfig+0x118>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d003      	beq.n	80035bc <TIM_Base_SetConfig+0xe8>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a0e      	ldr	r2, [pc, #56]	; (80035f0 <TIM_Base_SetConfig+0x11c>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d103      	bne.n	80035c4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	615a      	str	r2, [r3, #20]
}
 80035ca:	bf00      	nop
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	40012c00 	.word	0x40012c00
 80035dc:	40000400 	.word	0x40000400
 80035e0:	40000800 	.word	0x40000800
 80035e4:	40013400 	.word	0x40013400
 80035e8:	40014000 	.word	0x40014000
 80035ec:	40014400 	.word	0x40014400
 80035f0:	40014800 	.word	0x40014800

080035f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	f023 0201 	bic.w	r2, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 0303 	bic.w	r3, r3, #3
 800362e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4313      	orrs	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f023 0302 	bic.w	r3, r3, #2
 8003640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	4313      	orrs	r3, r2
 800364a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a2c      	ldr	r2, [pc, #176]	; (8003700 <TIM_OC1_SetConfig+0x10c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d00f      	beq.n	8003674 <TIM_OC1_SetConfig+0x80>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a2b      	ldr	r2, [pc, #172]	; (8003704 <TIM_OC1_SetConfig+0x110>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d00b      	beq.n	8003674 <TIM_OC1_SetConfig+0x80>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a2a      	ldr	r2, [pc, #168]	; (8003708 <TIM_OC1_SetConfig+0x114>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d007      	beq.n	8003674 <TIM_OC1_SetConfig+0x80>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a29      	ldr	r2, [pc, #164]	; (800370c <TIM_OC1_SetConfig+0x118>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d003      	beq.n	8003674 <TIM_OC1_SetConfig+0x80>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a28      	ldr	r2, [pc, #160]	; (8003710 <TIM_OC1_SetConfig+0x11c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d10c      	bne.n	800368e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f023 0308 	bic.w	r3, r3, #8
 800367a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	4313      	orrs	r3, r2
 8003684:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f023 0304 	bic.w	r3, r3, #4
 800368c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a1b      	ldr	r2, [pc, #108]	; (8003700 <TIM_OC1_SetConfig+0x10c>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d00f      	beq.n	80036b6 <TIM_OC1_SetConfig+0xc2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a1a      	ldr	r2, [pc, #104]	; (8003704 <TIM_OC1_SetConfig+0x110>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00b      	beq.n	80036b6 <TIM_OC1_SetConfig+0xc2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a19      	ldr	r2, [pc, #100]	; (8003708 <TIM_OC1_SetConfig+0x114>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d007      	beq.n	80036b6 <TIM_OC1_SetConfig+0xc2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a18      	ldr	r2, [pc, #96]	; (800370c <TIM_OC1_SetConfig+0x118>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d003      	beq.n	80036b6 <TIM_OC1_SetConfig+0xc2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a17      	ldr	r2, [pc, #92]	; (8003710 <TIM_OC1_SetConfig+0x11c>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d111      	bne.n	80036da <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	621a      	str	r2, [r3, #32]
}
 80036f4:	bf00      	nop
 80036f6:	371c      	adds	r7, #28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	40012c00 	.word	0x40012c00
 8003704:	40013400 	.word	0x40013400
 8003708:	40014000 	.word	0x40014000
 800370c:	40014400 	.word	0x40014400
 8003710:	40014800 	.word	0x40014800

08003714 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003714:	b480      	push	{r7}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	f023 0210 	bic.w	r2, r3, #16
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800374e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	021b      	lsls	r3, r3, #8
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	4313      	orrs	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f023 0320 	bic.w	r3, r3, #32
 8003762:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	4313      	orrs	r3, r2
 800376e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a28      	ldr	r2, [pc, #160]	; (8003814 <TIM_OC2_SetConfig+0x100>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d003      	beq.n	8003780 <TIM_OC2_SetConfig+0x6c>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a27      	ldr	r2, [pc, #156]	; (8003818 <TIM_OC2_SetConfig+0x104>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d10d      	bne.n	800379c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	011b      	lsls	r3, r3, #4
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	4313      	orrs	r3, r2
 8003792:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800379a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a1d      	ldr	r2, [pc, #116]	; (8003814 <TIM_OC2_SetConfig+0x100>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d00f      	beq.n	80037c4 <TIM_OC2_SetConfig+0xb0>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a1c      	ldr	r2, [pc, #112]	; (8003818 <TIM_OC2_SetConfig+0x104>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d00b      	beq.n	80037c4 <TIM_OC2_SetConfig+0xb0>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a1b      	ldr	r2, [pc, #108]	; (800381c <TIM_OC2_SetConfig+0x108>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d007      	beq.n	80037c4 <TIM_OC2_SetConfig+0xb0>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a1a      	ldr	r2, [pc, #104]	; (8003820 <TIM_OC2_SetConfig+0x10c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d003      	beq.n	80037c4 <TIM_OC2_SetConfig+0xb0>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a19      	ldr	r2, [pc, #100]	; (8003824 <TIM_OC2_SetConfig+0x110>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d113      	bne.n	80037ec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037ca:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037d2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	4313      	orrs	r3, r2
 80037de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	621a      	str	r2, [r3, #32]
}
 8003806:	bf00      	nop
 8003808:	371c      	adds	r7, #28
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	40012c00 	.word	0x40012c00
 8003818:	40013400 	.word	0x40013400
 800381c:	40014000 	.word	0x40014000
 8003820:	40014400 	.word	0x40014400
 8003824:	40014800 	.word	0x40014800

08003828 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 0303 	bic.w	r3, r3, #3
 8003862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	021b      	lsls	r3, r3, #8
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	4313      	orrs	r3, r2
 8003880:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a27      	ldr	r2, [pc, #156]	; (8003924 <TIM_OC3_SetConfig+0xfc>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d003      	beq.n	8003892 <TIM_OC3_SetConfig+0x6a>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a26      	ldr	r2, [pc, #152]	; (8003928 <TIM_OC3_SetConfig+0x100>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d10d      	bne.n	80038ae <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003898:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	021b      	lsls	r3, r3, #8
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038ac:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a1c      	ldr	r2, [pc, #112]	; (8003924 <TIM_OC3_SetConfig+0xfc>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d00f      	beq.n	80038d6 <TIM_OC3_SetConfig+0xae>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a1b      	ldr	r2, [pc, #108]	; (8003928 <TIM_OC3_SetConfig+0x100>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d00b      	beq.n	80038d6 <TIM_OC3_SetConfig+0xae>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a1a      	ldr	r2, [pc, #104]	; (800392c <TIM_OC3_SetConfig+0x104>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d007      	beq.n	80038d6 <TIM_OC3_SetConfig+0xae>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a19      	ldr	r2, [pc, #100]	; (8003930 <TIM_OC3_SetConfig+0x108>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d003      	beq.n	80038d6 <TIM_OC3_SetConfig+0xae>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a18      	ldr	r2, [pc, #96]	; (8003934 <TIM_OC3_SetConfig+0x10c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d113      	bne.n	80038fe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	011b      	lsls	r3, r3, #4
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	621a      	str	r2, [r3, #32]
}
 8003918:	bf00      	nop
 800391a:	371c      	adds	r7, #28
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	40012c00 	.word	0x40012c00
 8003928:	40013400 	.word	0x40013400
 800392c:	40014000 	.word	0x40014000
 8003930:	40014400 	.word	0x40014400
 8003934:	40014800 	.word	0x40014800

08003938 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003938:	b480      	push	{r7}
 800393a:	b087      	sub	sp, #28
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800396a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003972:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	021b      	lsls	r3, r3, #8
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	4313      	orrs	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003986:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	031b      	lsls	r3, r3, #12
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4313      	orrs	r3, r2
 8003992:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a18      	ldr	r2, [pc, #96]	; (80039f8 <TIM_OC4_SetConfig+0xc0>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d00f      	beq.n	80039bc <TIM_OC4_SetConfig+0x84>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a17      	ldr	r2, [pc, #92]	; (80039fc <TIM_OC4_SetConfig+0xc4>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d00b      	beq.n	80039bc <TIM_OC4_SetConfig+0x84>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a16      	ldr	r2, [pc, #88]	; (8003a00 <TIM_OC4_SetConfig+0xc8>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d007      	beq.n	80039bc <TIM_OC4_SetConfig+0x84>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a15      	ldr	r2, [pc, #84]	; (8003a04 <TIM_OC4_SetConfig+0xcc>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d003      	beq.n	80039bc <TIM_OC4_SetConfig+0x84>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a14      	ldr	r2, [pc, #80]	; (8003a08 <TIM_OC4_SetConfig+0xd0>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d109      	bne.n	80039d0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	019b      	lsls	r3, r3, #6
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	621a      	str	r2, [r3, #32]
}
 80039ea:	bf00      	nop
 80039ec:	371c      	adds	r7, #28
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40012c00 	.word	0x40012c00
 80039fc:	40013400 	.word	0x40013400
 8003a00:	40014000 	.word	0x40014000
 8003a04:	40014400 	.word	0x40014400
 8003a08:	40014800 	.word	0x40014800

08003a0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003a50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	041b      	lsls	r3, r3, #16
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a17      	ldr	r2, [pc, #92]	; (8003ac0 <TIM_OC5_SetConfig+0xb4>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d00f      	beq.n	8003a86 <TIM_OC5_SetConfig+0x7a>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a16      	ldr	r2, [pc, #88]	; (8003ac4 <TIM_OC5_SetConfig+0xb8>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d00b      	beq.n	8003a86 <TIM_OC5_SetConfig+0x7a>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a15      	ldr	r2, [pc, #84]	; (8003ac8 <TIM_OC5_SetConfig+0xbc>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d007      	beq.n	8003a86 <TIM_OC5_SetConfig+0x7a>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a14      	ldr	r2, [pc, #80]	; (8003acc <TIM_OC5_SetConfig+0xc0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d003      	beq.n	8003a86 <TIM_OC5_SetConfig+0x7a>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a13      	ldr	r2, [pc, #76]	; (8003ad0 <TIM_OC5_SetConfig+0xc4>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d109      	bne.n	8003a9a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	021b      	lsls	r3, r3, #8
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	621a      	str	r2, [r3, #32]
}
 8003ab4:	bf00      	nop
 8003ab6:	371c      	adds	r7, #28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	40012c00 	.word	0x40012c00
 8003ac4:	40013400 	.word	0x40013400
 8003ac8:	40014000 	.word	0x40014000
 8003acc:	40014400 	.word	0x40014400
 8003ad0:	40014800 	.word	0x40014800

08003ad4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	021b      	lsls	r3, r3, #8
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	051b      	lsls	r3, r3, #20
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a18      	ldr	r2, [pc, #96]	; (8003b8c <TIM_OC6_SetConfig+0xb8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d00f      	beq.n	8003b50 <TIM_OC6_SetConfig+0x7c>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a17      	ldr	r2, [pc, #92]	; (8003b90 <TIM_OC6_SetConfig+0xbc>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d00b      	beq.n	8003b50 <TIM_OC6_SetConfig+0x7c>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a16      	ldr	r2, [pc, #88]	; (8003b94 <TIM_OC6_SetConfig+0xc0>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d007      	beq.n	8003b50 <TIM_OC6_SetConfig+0x7c>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a15      	ldr	r2, [pc, #84]	; (8003b98 <TIM_OC6_SetConfig+0xc4>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d003      	beq.n	8003b50 <TIM_OC6_SetConfig+0x7c>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a14      	ldr	r2, [pc, #80]	; (8003b9c <TIM_OC6_SetConfig+0xc8>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d109      	bne.n	8003b64 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	029b      	lsls	r3, r3, #10
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	621a      	str	r2, [r3, #32]
}
 8003b7e:	bf00      	nop
 8003b80:	371c      	adds	r7, #28
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	40012c00 	.word	0x40012c00
 8003b90:	40013400 	.word	0x40013400
 8003b94:	40014000 	.word	0x40014000
 8003b98:	40014400 	.word	0x40014400
 8003b9c:	40014800 	.word	0x40014800

08003ba0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b087      	sub	sp, #28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	f023 0201 	bic.w	r2, r3, #1
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	011b      	lsls	r3, r3, #4
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f023 030a 	bic.w	r3, r3, #10
 8003bdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	621a      	str	r2, [r3, #32]
}
 8003bf2:	bf00      	nop
 8003bf4:	371c      	adds	r7, #28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b087      	sub	sp, #28
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	60f8      	str	r0, [r7, #12]
 8003c06:	60b9      	str	r1, [r7, #8]
 8003c08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	f023 0210 	bic.w	r2, r3, #16
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	031b      	lsls	r3, r3, #12
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	621a      	str	r2, [r3, #32]
}
 8003c52:	bf00      	nop
 8003c54:	371c      	adds	r7, #28
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b085      	sub	sp, #20
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
 8003c66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f043 0307 	orr.w	r3, r3, #7
 8003c80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	609a      	str	r2, [r3, #8]
}
 8003c88:	bf00      	nop
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
 8003ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	021a      	lsls	r2, r3, #8
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	609a      	str	r2, [r3, #8]
}
 8003cc8:	bf00      	nop
 8003cca:	371c      	adds	r7, #28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d101      	bne.n	8003cec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	e063      	b.n	8003db4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a2b      	ldr	r2, [pc, #172]	; (8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d004      	beq.n	8003d20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a2a      	ldr	r2, [pc, #168]	; (8003dc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d108      	bne.n	8003d32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003d26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a1b      	ldr	r2, [pc, #108]	; (8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d018      	beq.n	8003d88 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d5e:	d013      	beq.n	8003d88 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a18      	ldr	r2, [pc, #96]	; (8003dc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d00e      	beq.n	8003d88 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a17      	ldr	r2, [pc, #92]	; (8003dcc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d009      	beq.n	8003d88 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a12      	ldr	r2, [pc, #72]	; (8003dc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d004      	beq.n	8003d88 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a13      	ldr	r2, [pc, #76]	; (8003dd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d10c      	bne.n	8003da2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	40012c00 	.word	0x40012c00
 8003dc4:	40013400 	.word	0x40013400
 8003dc8:	40000400 	.word	0x40000400
 8003dcc:	40000800 	.word	0x40000800
 8003dd0:	40014000 	.word	0x40014000

08003dd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e040      	b.n	8003e68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d106      	bne.n	8003dfc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7fc ffd6 	bl	8000da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2224      	movs	r2, #36	; 0x24
 8003e00:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0201 	bic.w	r2, r2, #1
 8003e10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f8b6 	bl	8003f84 <UART_SetConfig>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d101      	bne.n	8003e22 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e022      	b.n	8003e68 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d002      	beq.n	8003e30 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 fa7c 	bl	8004328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0201 	orr.w	r2, r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 fb03 	bl	800446c <UART_CheckIdleState>
 8003e66:	4603      	mov	r3, r0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08a      	sub	sp, #40	; 0x28
 8003e74:	af02      	add	r7, sp, #8
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	603b      	str	r3, [r7, #0]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e84:	2b20      	cmp	r3, #32
 8003e86:	d178      	bne.n	8003f7a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d002      	beq.n	8003e94 <HAL_UART_Transmit+0x24>
 8003e8e:	88fb      	ldrh	r3, [r7, #6]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e071      	b.n	8003f7c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2221      	movs	r2, #33	; 0x21
 8003ea4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ea6:	f7fd f927 	bl	80010f8 <HAL_GetTick>
 8003eaa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	88fa      	ldrh	r2, [r7, #6]
 8003eb0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	88fa      	ldrh	r2, [r7, #6]
 8003eb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec4:	d108      	bne.n	8003ed8 <HAL_UART_Transmit+0x68>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d104      	bne.n	8003ed8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	61bb      	str	r3, [r7, #24]
 8003ed6:	e003      	b.n	8003ee0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003edc:	2300      	movs	r3, #0
 8003ede:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ee0:	e030      	b.n	8003f44 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	2180      	movs	r1, #128	; 0x80
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 fb65 	bl	80045bc <UART_WaitOnFlagUntilTimeout>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d004      	beq.n	8003f02 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2220      	movs	r2, #32
 8003efc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e03c      	b.n	8003f7c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10b      	bne.n	8003f20 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	881a      	ldrh	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f14:	b292      	uxth	r2, r2
 8003f16:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	3302      	adds	r3, #2
 8003f1c:	61bb      	str	r3, [r7, #24]
 8003f1e:	e008      	b.n	8003f32 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	781a      	ldrb	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	b292      	uxth	r2, r2
 8003f2a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1c8      	bne.n	8003ee2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2200      	movs	r2, #0
 8003f58:	2140      	movs	r1, #64	; 0x40
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 fb2e 	bl	80045bc <UART_WaitOnFlagUntilTimeout>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d004      	beq.n	8003f70 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e005      	b.n	8003f7c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2220      	movs	r2, #32
 8003f74:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	e000      	b.n	8003f7c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003f7a:	2302      	movs	r3, #2
  }
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3720      	adds	r7, #32
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b088      	sub	sp, #32
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003fb2:	f023 030c 	bic.w	r3, r3, #12
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6812      	ldr	r2, [r2, #0]
 8003fba:	6979      	ldr	r1, [r7, #20]
 8003fbc:	430b      	orrs	r3, r1
 8003fbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4aad      	ldr	r2, [pc, #692]	; (80042b4 <UART_SetConfig+0x330>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d120      	bne.n	8004046 <UART_SetConfig+0xc2>
 8004004:	4bac      	ldr	r3, [pc, #688]	; (80042b8 <UART_SetConfig+0x334>)
 8004006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004008:	f003 0303 	and.w	r3, r3, #3
 800400c:	2b03      	cmp	r3, #3
 800400e:	d817      	bhi.n	8004040 <UART_SetConfig+0xbc>
 8004010:	a201      	add	r2, pc, #4	; (adr r2, 8004018 <UART_SetConfig+0x94>)
 8004012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004016:	bf00      	nop
 8004018:	08004029 	.word	0x08004029
 800401c:	08004035 	.word	0x08004035
 8004020:	0800403b 	.word	0x0800403b
 8004024:	0800402f 	.word	0x0800402f
 8004028:	2301      	movs	r3, #1
 800402a:	77fb      	strb	r3, [r7, #31]
 800402c:	e0b5      	b.n	800419a <UART_SetConfig+0x216>
 800402e:	2302      	movs	r3, #2
 8004030:	77fb      	strb	r3, [r7, #31]
 8004032:	e0b2      	b.n	800419a <UART_SetConfig+0x216>
 8004034:	2304      	movs	r3, #4
 8004036:	77fb      	strb	r3, [r7, #31]
 8004038:	e0af      	b.n	800419a <UART_SetConfig+0x216>
 800403a:	2308      	movs	r3, #8
 800403c:	77fb      	strb	r3, [r7, #31]
 800403e:	e0ac      	b.n	800419a <UART_SetConfig+0x216>
 8004040:	2310      	movs	r3, #16
 8004042:	77fb      	strb	r3, [r7, #31]
 8004044:	e0a9      	b.n	800419a <UART_SetConfig+0x216>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a9c      	ldr	r2, [pc, #624]	; (80042bc <UART_SetConfig+0x338>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d124      	bne.n	800409a <UART_SetConfig+0x116>
 8004050:	4b99      	ldr	r3, [pc, #612]	; (80042b8 <UART_SetConfig+0x334>)
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004058:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800405c:	d011      	beq.n	8004082 <UART_SetConfig+0xfe>
 800405e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004062:	d817      	bhi.n	8004094 <UART_SetConfig+0x110>
 8004064:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004068:	d011      	beq.n	800408e <UART_SetConfig+0x10a>
 800406a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800406e:	d811      	bhi.n	8004094 <UART_SetConfig+0x110>
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <UART_SetConfig+0xf8>
 8004074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004078:	d006      	beq.n	8004088 <UART_SetConfig+0x104>
 800407a:	e00b      	b.n	8004094 <UART_SetConfig+0x110>
 800407c:	2300      	movs	r3, #0
 800407e:	77fb      	strb	r3, [r7, #31]
 8004080:	e08b      	b.n	800419a <UART_SetConfig+0x216>
 8004082:	2302      	movs	r3, #2
 8004084:	77fb      	strb	r3, [r7, #31]
 8004086:	e088      	b.n	800419a <UART_SetConfig+0x216>
 8004088:	2304      	movs	r3, #4
 800408a:	77fb      	strb	r3, [r7, #31]
 800408c:	e085      	b.n	800419a <UART_SetConfig+0x216>
 800408e:	2308      	movs	r3, #8
 8004090:	77fb      	strb	r3, [r7, #31]
 8004092:	e082      	b.n	800419a <UART_SetConfig+0x216>
 8004094:	2310      	movs	r3, #16
 8004096:	77fb      	strb	r3, [r7, #31]
 8004098:	e07f      	b.n	800419a <UART_SetConfig+0x216>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a88      	ldr	r2, [pc, #544]	; (80042c0 <UART_SetConfig+0x33c>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d124      	bne.n	80040ee <UART_SetConfig+0x16a>
 80040a4:	4b84      	ldr	r3, [pc, #528]	; (80042b8 <UART_SetConfig+0x334>)
 80040a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80040ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80040b0:	d011      	beq.n	80040d6 <UART_SetConfig+0x152>
 80040b2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80040b6:	d817      	bhi.n	80040e8 <UART_SetConfig+0x164>
 80040b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80040bc:	d011      	beq.n	80040e2 <UART_SetConfig+0x15e>
 80040be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80040c2:	d811      	bhi.n	80040e8 <UART_SetConfig+0x164>
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <UART_SetConfig+0x14c>
 80040c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040cc:	d006      	beq.n	80040dc <UART_SetConfig+0x158>
 80040ce:	e00b      	b.n	80040e8 <UART_SetConfig+0x164>
 80040d0:	2300      	movs	r3, #0
 80040d2:	77fb      	strb	r3, [r7, #31]
 80040d4:	e061      	b.n	800419a <UART_SetConfig+0x216>
 80040d6:	2302      	movs	r3, #2
 80040d8:	77fb      	strb	r3, [r7, #31]
 80040da:	e05e      	b.n	800419a <UART_SetConfig+0x216>
 80040dc:	2304      	movs	r3, #4
 80040de:	77fb      	strb	r3, [r7, #31]
 80040e0:	e05b      	b.n	800419a <UART_SetConfig+0x216>
 80040e2:	2308      	movs	r3, #8
 80040e4:	77fb      	strb	r3, [r7, #31]
 80040e6:	e058      	b.n	800419a <UART_SetConfig+0x216>
 80040e8:	2310      	movs	r3, #16
 80040ea:	77fb      	strb	r3, [r7, #31]
 80040ec:	e055      	b.n	800419a <UART_SetConfig+0x216>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a74      	ldr	r2, [pc, #464]	; (80042c4 <UART_SetConfig+0x340>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d124      	bne.n	8004142 <UART_SetConfig+0x1be>
 80040f8:	4b6f      	ldr	r3, [pc, #444]	; (80042b8 <UART_SetConfig+0x334>)
 80040fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004100:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004104:	d011      	beq.n	800412a <UART_SetConfig+0x1a6>
 8004106:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800410a:	d817      	bhi.n	800413c <UART_SetConfig+0x1b8>
 800410c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004110:	d011      	beq.n	8004136 <UART_SetConfig+0x1b2>
 8004112:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004116:	d811      	bhi.n	800413c <UART_SetConfig+0x1b8>
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <UART_SetConfig+0x1a0>
 800411c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004120:	d006      	beq.n	8004130 <UART_SetConfig+0x1ac>
 8004122:	e00b      	b.n	800413c <UART_SetConfig+0x1b8>
 8004124:	2300      	movs	r3, #0
 8004126:	77fb      	strb	r3, [r7, #31]
 8004128:	e037      	b.n	800419a <UART_SetConfig+0x216>
 800412a:	2302      	movs	r3, #2
 800412c:	77fb      	strb	r3, [r7, #31]
 800412e:	e034      	b.n	800419a <UART_SetConfig+0x216>
 8004130:	2304      	movs	r3, #4
 8004132:	77fb      	strb	r3, [r7, #31]
 8004134:	e031      	b.n	800419a <UART_SetConfig+0x216>
 8004136:	2308      	movs	r3, #8
 8004138:	77fb      	strb	r3, [r7, #31]
 800413a:	e02e      	b.n	800419a <UART_SetConfig+0x216>
 800413c:	2310      	movs	r3, #16
 800413e:	77fb      	strb	r3, [r7, #31]
 8004140:	e02b      	b.n	800419a <UART_SetConfig+0x216>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a60      	ldr	r2, [pc, #384]	; (80042c8 <UART_SetConfig+0x344>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d124      	bne.n	8004196 <UART_SetConfig+0x212>
 800414c:	4b5a      	ldr	r3, [pc, #360]	; (80042b8 <UART_SetConfig+0x334>)
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004154:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004158:	d011      	beq.n	800417e <UART_SetConfig+0x1fa>
 800415a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800415e:	d817      	bhi.n	8004190 <UART_SetConfig+0x20c>
 8004160:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004164:	d011      	beq.n	800418a <UART_SetConfig+0x206>
 8004166:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800416a:	d811      	bhi.n	8004190 <UART_SetConfig+0x20c>
 800416c:	2b00      	cmp	r3, #0
 800416e:	d003      	beq.n	8004178 <UART_SetConfig+0x1f4>
 8004170:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004174:	d006      	beq.n	8004184 <UART_SetConfig+0x200>
 8004176:	e00b      	b.n	8004190 <UART_SetConfig+0x20c>
 8004178:	2300      	movs	r3, #0
 800417a:	77fb      	strb	r3, [r7, #31]
 800417c:	e00d      	b.n	800419a <UART_SetConfig+0x216>
 800417e:	2302      	movs	r3, #2
 8004180:	77fb      	strb	r3, [r7, #31]
 8004182:	e00a      	b.n	800419a <UART_SetConfig+0x216>
 8004184:	2304      	movs	r3, #4
 8004186:	77fb      	strb	r3, [r7, #31]
 8004188:	e007      	b.n	800419a <UART_SetConfig+0x216>
 800418a:	2308      	movs	r3, #8
 800418c:	77fb      	strb	r3, [r7, #31]
 800418e:	e004      	b.n	800419a <UART_SetConfig+0x216>
 8004190:	2310      	movs	r3, #16
 8004192:	77fb      	strb	r3, [r7, #31]
 8004194:	e001      	b.n	800419a <UART_SetConfig+0x216>
 8004196:	2310      	movs	r3, #16
 8004198:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a2:	d15b      	bne.n	800425c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80041a4:	7ffb      	ldrb	r3, [r7, #31]
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d827      	bhi.n	80041fa <UART_SetConfig+0x276>
 80041aa:	a201      	add	r2, pc, #4	; (adr r2, 80041b0 <UART_SetConfig+0x22c>)
 80041ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b0:	080041d5 	.word	0x080041d5
 80041b4:	080041dd 	.word	0x080041dd
 80041b8:	080041e5 	.word	0x080041e5
 80041bc:	080041fb 	.word	0x080041fb
 80041c0:	080041eb 	.word	0x080041eb
 80041c4:	080041fb 	.word	0x080041fb
 80041c8:	080041fb 	.word	0x080041fb
 80041cc:	080041fb 	.word	0x080041fb
 80041d0:	080041f3 	.word	0x080041f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041d4:	f7fe fc90 	bl	8002af8 <HAL_RCC_GetPCLK1Freq>
 80041d8:	61b8      	str	r0, [r7, #24]
        break;
 80041da:	e013      	b.n	8004204 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041dc:	f7fe fcae 	bl	8002b3c <HAL_RCC_GetPCLK2Freq>
 80041e0:	61b8      	str	r0, [r7, #24]
        break;
 80041e2:	e00f      	b.n	8004204 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041e4:	4b39      	ldr	r3, [pc, #228]	; (80042cc <UART_SetConfig+0x348>)
 80041e6:	61bb      	str	r3, [r7, #24]
        break;
 80041e8:	e00c      	b.n	8004204 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041ea:	f7fe fc0f 	bl	8002a0c <HAL_RCC_GetSysClockFreq>
 80041ee:	61b8      	str	r0, [r7, #24]
        break;
 80041f0:	e008      	b.n	8004204 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041f6:	61bb      	str	r3, [r7, #24]
        break;
 80041f8:	e004      	b.n	8004204 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	77bb      	strb	r3, [r7, #30]
        break;
 8004202:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 8083 	beq.w	8004312 <UART_SetConfig+0x38e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	005a      	lsls	r2, r3, #1
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	085b      	lsrs	r3, r3, #1
 8004216:	441a      	add	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004220:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	2b0f      	cmp	r3, #15
 8004226:	d916      	bls.n	8004256 <UART_SetConfig+0x2d2>
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800422e:	d212      	bcs.n	8004256 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	b29b      	uxth	r3, r3
 8004234:	f023 030f 	bic.w	r3, r3, #15
 8004238:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	085b      	lsrs	r3, r3, #1
 800423e:	b29b      	uxth	r3, r3
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	b29a      	uxth	r2, r3
 8004246:	89fb      	ldrh	r3, [r7, #14]
 8004248:	4313      	orrs	r3, r2
 800424a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	89fa      	ldrh	r2, [r7, #14]
 8004252:	60da      	str	r2, [r3, #12]
 8004254:	e05d      	b.n	8004312 <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	77bb      	strb	r3, [r7, #30]
 800425a:	e05a      	b.n	8004312 <UART_SetConfig+0x38e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800425c:	7ffb      	ldrb	r3, [r7, #31]
 800425e:	2b08      	cmp	r3, #8
 8004260:	d836      	bhi.n	80042d0 <UART_SetConfig+0x34c>
 8004262:	a201      	add	r2, pc, #4	; (adr r2, 8004268 <UART_SetConfig+0x2e4>)
 8004264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004268:	0800428d 	.word	0x0800428d
 800426c:	08004295 	.word	0x08004295
 8004270:	0800429d 	.word	0x0800429d
 8004274:	080042d1 	.word	0x080042d1
 8004278:	080042a3 	.word	0x080042a3
 800427c:	080042d1 	.word	0x080042d1
 8004280:	080042d1 	.word	0x080042d1
 8004284:	080042d1 	.word	0x080042d1
 8004288:	080042ab 	.word	0x080042ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800428c:	f7fe fc34 	bl	8002af8 <HAL_RCC_GetPCLK1Freq>
 8004290:	61b8      	str	r0, [r7, #24]
        break;
 8004292:	e022      	b.n	80042da <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004294:	f7fe fc52 	bl	8002b3c <HAL_RCC_GetPCLK2Freq>
 8004298:	61b8      	str	r0, [r7, #24]
        break;
 800429a:	e01e      	b.n	80042da <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800429c:	4b0b      	ldr	r3, [pc, #44]	; (80042cc <UART_SetConfig+0x348>)
 800429e:	61bb      	str	r3, [r7, #24]
        break;
 80042a0:	e01b      	b.n	80042da <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042a2:	f7fe fbb3 	bl	8002a0c <HAL_RCC_GetSysClockFreq>
 80042a6:	61b8      	str	r0, [r7, #24]
        break;
 80042a8:	e017      	b.n	80042da <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ae:	61bb      	str	r3, [r7, #24]
        break;
 80042b0:	e013      	b.n	80042da <UART_SetConfig+0x356>
 80042b2:	bf00      	nop
 80042b4:	40013800 	.word	0x40013800
 80042b8:	40021000 	.word	0x40021000
 80042bc:	40004400 	.word	0x40004400
 80042c0:	40004800 	.word	0x40004800
 80042c4:	40004c00 	.word	0x40004c00
 80042c8:	40005000 	.word	0x40005000
 80042cc:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	77bb      	strb	r3, [r7, #30]
        break;
 80042d8:	bf00      	nop
    }

    if (pclk != 0U)
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d018      	beq.n	8004312 <UART_SetConfig+0x38e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	085a      	lsrs	r2, r3, #1
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	441a      	add	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	2b0f      	cmp	r3, #15
 80042f8:	d909      	bls.n	800430e <UART_SetConfig+0x38a>
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004300:	d205      	bcs.n	800430e <UART_SetConfig+0x38a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	b29a      	uxth	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	60da      	str	r2, [r3, #12]
 800430c:	e001      	b.n	8004312 <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800431e:	7fbb      	ldrb	r3, [r7, #30]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3720      	adds	r7, #32
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00a      	beq.n	8004352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00a      	beq.n	8004374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00a      	beq.n	8004396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00a      	beq.n	80043b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	f003 0310 	and.w	r3, r3, #16
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00a      	beq.n	80043da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	f003 0320 	and.w	r3, r3, #32
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00a      	beq.n	80043fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004404:	2b00      	cmp	r3, #0
 8004406:	d01a      	beq.n	800443e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004426:	d10a      	bne.n	800443e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	605a      	str	r2, [r3, #4]
  }
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b098      	sub	sp, #96	; 0x60
 8004470:	af02      	add	r7, sp, #8
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800447c:	f7fc fe3c 	bl	80010f8 <HAL_GetTick>
 8004480:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0308 	and.w	r3, r3, #8
 800448c:	2b08      	cmp	r3, #8
 800448e:	d12e      	bne.n	80044ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004490:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004498:	2200      	movs	r2, #0
 800449a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f88c 	bl	80045bc <UART_WaitOnFlagUntilTimeout>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d021      	beq.n	80044ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b2:	e853 3f00 	ldrex	r3, [r3]
 80044b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044be:	653b      	str	r3, [r7, #80]	; 0x50
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	461a      	mov	r2, r3
 80044c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044c8:	647b      	str	r3, [r7, #68]	; 0x44
 80044ca:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044d0:	e841 2300 	strex	r3, r2, [r1]
 80044d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1e6      	bne.n	80044aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2220      	movs	r2, #32
 80044e0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e062      	b.n	80045b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	d149      	bne.n	8004590 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004504:	2200      	movs	r2, #0
 8004506:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f856 	bl	80045bc <UART_WaitOnFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d03c      	beq.n	8004590 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	e853 3f00 	ldrex	r3, [r3]
 8004522:	623b      	str	r3, [r7, #32]
   return(result);
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800452a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	461a      	mov	r2, r3
 8004532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004534:	633b      	str	r3, [r7, #48]	; 0x30
 8004536:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004538:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800453a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800453c:	e841 2300 	strex	r3, r2, [r1]
 8004540:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1e6      	bne.n	8004516 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3308      	adds	r3, #8
 800454e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	e853 3f00 	ldrex	r3, [r3]
 8004556:	60fb      	str	r3, [r7, #12]
   return(result);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0301 	bic.w	r3, r3, #1
 800455e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3308      	adds	r3, #8
 8004566:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004568:	61fa      	str	r2, [r7, #28]
 800456a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456c:	69b9      	ldr	r1, [r7, #24]
 800456e:	69fa      	ldr	r2, [r7, #28]
 8004570:	e841 2300 	strex	r3, r2, [r1]
 8004574:	617b      	str	r3, [r7, #20]
   return(result);
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1e5      	bne.n	8004548 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2220      	movs	r2, #32
 8004580:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e011      	b.n	80045b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2220      	movs	r2, #32
 8004594:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2220      	movs	r2, #32
 800459a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3758      	adds	r7, #88	; 0x58
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	603b      	str	r3, [r7, #0]
 80045c8:	4613      	mov	r3, r2
 80045ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045cc:	e049      	b.n	8004662 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d4:	d045      	beq.n	8004662 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045d6:	f7fc fd8f 	bl	80010f8 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d302      	bcc.n	80045ec <UART_WaitOnFlagUntilTimeout+0x30>
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e048      	b.n	8004682 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0304 	and.w	r3, r3, #4
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d031      	beq.n	8004662 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	f003 0308 	and.w	r3, r3, #8
 8004608:	2b08      	cmp	r3, #8
 800460a:	d110      	bne.n	800462e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2208      	movs	r2, #8
 8004612:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 f838 	bl	800468a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2208      	movs	r2, #8
 800461e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e029      	b.n	8004682 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004638:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800463c:	d111      	bne.n	8004662 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004646:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 f81e 	bl	800468a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2220      	movs	r2, #32
 8004652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e00f      	b.n	8004682 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69da      	ldr	r2, [r3, #28]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	4013      	ands	r3, r2
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	429a      	cmp	r2, r3
 8004670:	bf0c      	ite	eq
 8004672:	2301      	moveq	r3, #1
 8004674:	2300      	movne	r3, #0
 8004676:	b2db      	uxtb	r3, r3
 8004678:	461a      	mov	r2, r3
 800467a:	79fb      	ldrb	r3, [r7, #7]
 800467c:	429a      	cmp	r2, r3
 800467e:	d0a6      	beq.n	80045ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800468a:	b480      	push	{r7}
 800468c:	b095      	sub	sp, #84	; 0x54
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800469a:	e853 3f00 	ldrex	r3, [r3]
 800469e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	461a      	mov	r2, r3
 80046ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046b0:	643b      	str	r3, [r7, #64]	; 0x40
 80046b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046b8:	e841 2300 	strex	r3, r2, [r1]
 80046bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1e6      	bne.n	8004692 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3308      	adds	r3, #8
 80046ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	e853 3f00 	ldrex	r3, [r3]
 80046d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	f023 0301 	bic.w	r3, r3, #1
 80046da:	64bb      	str	r3, [r7, #72]	; 0x48
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	3308      	adds	r3, #8
 80046e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046ec:	e841 2300 	strex	r3, r2, [r1]
 80046f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1e5      	bne.n	80046c4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d118      	bne.n	8004732 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	e853 3f00 	ldrex	r3, [r3]
 800470c:	60bb      	str	r3, [r7, #8]
   return(result);
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	f023 0310 	bic.w	r3, r3, #16
 8004714:	647b      	str	r3, [r7, #68]	; 0x44
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800471e:	61bb      	str	r3, [r7, #24]
 8004720:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004722:	6979      	ldr	r1, [r7, #20]
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	e841 2300 	strex	r3, r2, [r1]
 800472a:	613b      	str	r3, [r7, #16]
   return(result);
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1e6      	bne.n	8004700 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2220      	movs	r2, #32
 8004736:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004746:	bf00      	nop
 8004748:	3754      	adds	r7, #84	; 0x54
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
	...

08004754 <__errno>:
 8004754:	4b01      	ldr	r3, [pc, #4]	; (800475c <__errno+0x8>)
 8004756:	6818      	ldr	r0, [r3, #0]
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	2000000c 	.word	0x2000000c

08004760 <__libc_init_array>:
 8004760:	b570      	push	{r4, r5, r6, lr}
 8004762:	4d0d      	ldr	r5, [pc, #52]	; (8004798 <__libc_init_array+0x38>)
 8004764:	4c0d      	ldr	r4, [pc, #52]	; (800479c <__libc_init_array+0x3c>)
 8004766:	1b64      	subs	r4, r4, r5
 8004768:	10a4      	asrs	r4, r4, #2
 800476a:	2600      	movs	r6, #0
 800476c:	42a6      	cmp	r6, r4
 800476e:	d109      	bne.n	8004784 <__libc_init_array+0x24>
 8004770:	4d0b      	ldr	r5, [pc, #44]	; (80047a0 <__libc_init_array+0x40>)
 8004772:	4c0c      	ldr	r4, [pc, #48]	; (80047a4 <__libc_init_array+0x44>)
 8004774:	f000 ffec 	bl	8005750 <_init>
 8004778:	1b64      	subs	r4, r4, r5
 800477a:	10a4      	asrs	r4, r4, #2
 800477c:	2600      	movs	r6, #0
 800477e:	42a6      	cmp	r6, r4
 8004780:	d105      	bne.n	800478e <__libc_init_array+0x2e>
 8004782:	bd70      	pop	{r4, r5, r6, pc}
 8004784:	f855 3b04 	ldr.w	r3, [r5], #4
 8004788:	4798      	blx	r3
 800478a:	3601      	adds	r6, #1
 800478c:	e7ee      	b.n	800476c <__libc_init_array+0xc>
 800478e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004792:	4798      	blx	r3
 8004794:	3601      	adds	r6, #1
 8004796:	e7f2      	b.n	800477e <__libc_init_array+0x1e>
 8004798:	080058fc 	.word	0x080058fc
 800479c:	080058fc 	.word	0x080058fc
 80047a0:	080058fc 	.word	0x080058fc
 80047a4:	08005900 	.word	0x08005900

080047a8 <memset>:
 80047a8:	4402      	add	r2, r0
 80047aa:	4603      	mov	r3, r0
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d100      	bne.n	80047b2 <memset+0xa>
 80047b0:	4770      	bx	lr
 80047b2:	f803 1b01 	strb.w	r1, [r3], #1
 80047b6:	e7f9      	b.n	80047ac <memset+0x4>

080047b8 <iprintf>:
 80047b8:	b40f      	push	{r0, r1, r2, r3}
 80047ba:	4b0a      	ldr	r3, [pc, #40]	; (80047e4 <iprintf+0x2c>)
 80047bc:	b513      	push	{r0, r1, r4, lr}
 80047be:	681c      	ldr	r4, [r3, #0]
 80047c0:	b124      	cbz	r4, 80047cc <iprintf+0x14>
 80047c2:	69a3      	ldr	r3, [r4, #24]
 80047c4:	b913      	cbnz	r3, 80047cc <iprintf+0x14>
 80047c6:	4620      	mov	r0, r4
 80047c8:	f000 fa5e 	bl	8004c88 <__sinit>
 80047cc:	ab05      	add	r3, sp, #20
 80047ce:	9a04      	ldr	r2, [sp, #16]
 80047d0:	68a1      	ldr	r1, [r4, #8]
 80047d2:	9301      	str	r3, [sp, #4]
 80047d4:	4620      	mov	r0, r4
 80047d6:	f000 fc2f 	bl	8005038 <_vfiprintf_r>
 80047da:	b002      	add	sp, #8
 80047dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047e0:	b004      	add	sp, #16
 80047e2:	4770      	bx	lr
 80047e4:	2000000c 	.word	0x2000000c

080047e8 <_puts_r>:
 80047e8:	b570      	push	{r4, r5, r6, lr}
 80047ea:	460e      	mov	r6, r1
 80047ec:	4605      	mov	r5, r0
 80047ee:	b118      	cbz	r0, 80047f8 <_puts_r+0x10>
 80047f0:	6983      	ldr	r3, [r0, #24]
 80047f2:	b90b      	cbnz	r3, 80047f8 <_puts_r+0x10>
 80047f4:	f000 fa48 	bl	8004c88 <__sinit>
 80047f8:	69ab      	ldr	r3, [r5, #24]
 80047fa:	68ac      	ldr	r4, [r5, #8]
 80047fc:	b913      	cbnz	r3, 8004804 <_puts_r+0x1c>
 80047fe:	4628      	mov	r0, r5
 8004800:	f000 fa42 	bl	8004c88 <__sinit>
 8004804:	4b2c      	ldr	r3, [pc, #176]	; (80048b8 <_puts_r+0xd0>)
 8004806:	429c      	cmp	r4, r3
 8004808:	d120      	bne.n	800484c <_puts_r+0x64>
 800480a:	686c      	ldr	r4, [r5, #4]
 800480c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800480e:	07db      	lsls	r3, r3, #31
 8004810:	d405      	bmi.n	800481e <_puts_r+0x36>
 8004812:	89a3      	ldrh	r3, [r4, #12]
 8004814:	0598      	lsls	r0, r3, #22
 8004816:	d402      	bmi.n	800481e <_puts_r+0x36>
 8004818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800481a:	f000 fad3 	bl	8004dc4 <__retarget_lock_acquire_recursive>
 800481e:	89a3      	ldrh	r3, [r4, #12]
 8004820:	0719      	lsls	r1, r3, #28
 8004822:	d51d      	bpl.n	8004860 <_puts_r+0x78>
 8004824:	6923      	ldr	r3, [r4, #16]
 8004826:	b1db      	cbz	r3, 8004860 <_puts_r+0x78>
 8004828:	3e01      	subs	r6, #1
 800482a:	68a3      	ldr	r3, [r4, #8]
 800482c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004830:	3b01      	subs	r3, #1
 8004832:	60a3      	str	r3, [r4, #8]
 8004834:	bb39      	cbnz	r1, 8004886 <_puts_r+0x9e>
 8004836:	2b00      	cmp	r3, #0
 8004838:	da38      	bge.n	80048ac <_puts_r+0xc4>
 800483a:	4622      	mov	r2, r4
 800483c:	210a      	movs	r1, #10
 800483e:	4628      	mov	r0, r5
 8004840:	f000 f848 	bl	80048d4 <__swbuf_r>
 8004844:	3001      	adds	r0, #1
 8004846:	d011      	beq.n	800486c <_puts_r+0x84>
 8004848:	250a      	movs	r5, #10
 800484a:	e011      	b.n	8004870 <_puts_r+0x88>
 800484c:	4b1b      	ldr	r3, [pc, #108]	; (80048bc <_puts_r+0xd4>)
 800484e:	429c      	cmp	r4, r3
 8004850:	d101      	bne.n	8004856 <_puts_r+0x6e>
 8004852:	68ac      	ldr	r4, [r5, #8]
 8004854:	e7da      	b.n	800480c <_puts_r+0x24>
 8004856:	4b1a      	ldr	r3, [pc, #104]	; (80048c0 <_puts_r+0xd8>)
 8004858:	429c      	cmp	r4, r3
 800485a:	bf08      	it	eq
 800485c:	68ec      	ldreq	r4, [r5, #12]
 800485e:	e7d5      	b.n	800480c <_puts_r+0x24>
 8004860:	4621      	mov	r1, r4
 8004862:	4628      	mov	r0, r5
 8004864:	f000 f888 	bl	8004978 <__swsetup_r>
 8004868:	2800      	cmp	r0, #0
 800486a:	d0dd      	beq.n	8004828 <_puts_r+0x40>
 800486c:	f04f 35ff 	mov.w	r5, #4294967295
 8004870:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004872:	07da      	lsls	r2, r3, #31
 8004874:	d405      	bmi.n	8004882 <_puts_r+0x9a>
 8004876:	89a3      	ldrh	r3, [r4, #12]
 8004878:	059b      	lsls	r3, r3, #22
 800487a:	d402      	bmi.n	8004882 <_puts_r+0x9a>
 800487c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800487e:	f000 faa2 	bl	8004dc6 <__retarget_lock_release_recursive>
 8004882:	4628      	mov	r0, r5
 8004884:	bd70      	pop	{r4, r5, r6, pc}
 8004886:	2b00      	cmp	r3, #0
 8004888:	da04      	bge.n	8004894 <_puts_r+0xac>
 800488a:	69a2      	ldr	r2, [r4, #24]
 800488c:	429a      	cmp	r2, r3
 800488e:	dc06      	bgt.n	800489e <_puts_r+0xb6>
 8004890:	290a      	cmp	r1, #10
 8004892:	d004      	beq.n	800489e <_puts_r+0xb6>
 8004894:	6823      	ldr	r3, [r4, #0]
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	6022      	str	r2, [r4, #0]
 800489a:	7019      	strb	r1, [r3, #0]
 800489c:	e7c5      	b.n	800482a <_puts_r+0x42>
 800489e:	4622      	mov	r2, r4
 80048a0:	4628      	mov	r0, r5
 80048a2:	f000 f817 	bl	80048d4 <__swbuf_r>
 80048a6:	3001      	adds	r0, #1
 80048a8:	d1bf      	bne.n	800482a <_puts_r+0x42>
 80048aa:	e7df      	b.n	800486c <_puts_r+0x84>
 80048ac:	6823      	ldr	r3, [r4, #0]
 80048ae:	250a      	movs	r5, #10
 80048b0:	1c5a      	adds	r2, r3, #1
 80048b2:	6022      	str	r2, [r4, #0]
 80048b4:	701d      	strb	r5, [r3, #0]
 80048b6:	e7db      	b.n	8004870 <_puts_r+0x88>
 80048b8:	08005888 	.word	0x08005888
 80048bc:	080058a8 	.word	0x080058a8
 80048c0:	08005868 	.word	0x08005868

080048c4 <puts>:
 80048c4:	4b02      	ldr	r3, [pc, #8]	; (80048d0 <puts+0xc>)
 80048c6:	4601      	mov	r1, r0
 80048c8:	6818      	ldr	r0, [r3, #0]
 80048ca:	f7ff bf8d 	b.w	80047e8 <_puts_r>
 80048ce:	bf00      	nop
 80048d0:	2000000c 	.word	0x2000000c

080048d4 <__swbuf_r>:
 80048d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d6:	460e      	mov	r6, r1
 80048d8:	4614      	mov	r4, r2
 80048da:	4605      	mov	r5, r0
 80048dc:	b118      	cbz	r0, 80048e6 <__swbuf_r+0x12>
 80048de:	6983      	ldr	r3, [r0, #24]
 80048e0:	b90b      	cbnz	r3, 80048e6 <__swbuf_r+0x12>
 80048e2:	f000 f9d1 	bl	8004c88 <__sinit>
 80048e6:	4b21      	ldr	r3, [pc, #132]	; (800496c <__swbuf_r+0x98>)
 80048e8:	429c      	cmp	r4, r3
 80048ea:	d12b      	bne.n	8004944 <__swbuf_r+0x70>
 80048ec:	686c      	ldr	r4, [r5, #4]
 80048ee:	69a3      	ldr	r3, [r4, #24]
 80048f0:	60a3      	str	r3, [r4, #8]
 80048f2:	89a3      	ldrh	r3, [r4, #12]
 80048f4:	071a      	lsls	r2, r3, #28
 80048f6:	d52f      	bpl.n	8004958 <__swbuf_r+0x84>
 80048f8:	6923      	ldr	r3, [r4, #16]
 80048fa:	b36b      	cbz	r3, 8004958 <__swbuf_r+0x84>
 80048fc:	6923      	ldr	r3, [r4, #16]
 80048fe:	6820      	ldr	r0, [r4, #0]
 8004900:	1ac0      	subs	r0, r0, r3
 8004902:	6963      	ldr	r3, [r4, #20]
 8004904:	b2f6      	uxtb	r6, r6
 8004906:	4283      	cmp	r3, r0
 8004908:	4637      	mov	r7, r6
 800490a:	dc04      	bgt.n	8004916 <__swbuf_r+0x42>
 800490c:	4621      	mov	r1, r4
 800490e:	4628      	mov	r0, r5
 8004910:	f000 f926 	bl	8004b60 <_fflush_r>
 8004914:	bb30      	cbnz	r0, 8004964 <__swbuf_r+0x90>
 8004916:	68a3      	ldr	r3, [r4, #8]
 8004918:	3b01      	subs	r3, #1
 800491a:	60a3      	str	r3, [r4, #8]
 800491c:	6823      	ldr	r3, [r4, #0]
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	6022      	str	r2, [r4, #0]
 8004922:	701e      	strb	r6, [r3, #0]
 8004924:	6963      	ldr	r3, [r4, #20]
 8004926:	3001      	adds	r0, #1
 8004928:	4283      	cmp	r3, r0
 800492a:	d004      	beq.n	8004936 <__swbuf_r+0x62>
 800492c:	89a3      	ldrh	r3, [r4, #12]
 800492e:	07db      	lsls	r3, r3, #31
 8004930:	d506      	bpl.n	8004940 <__swbuf_r+0x6c>
 8004932:	2e0a      	cmp	r6, #10
 8004934:	d104      	bne.n	8004940 <__swbuf_r+0x6c>
 8004936:	4621      	mov	r1, r4
 8004938:	4628      	mov	r0, r5
 800493a:	f000 f911 	bl	8004b60 <_fflush_r>
 800493e:	b988      	cbnz	r0, 8004964 <__swbuf_r+0x90>
 8004940:	4638      	mov	r0, r7
 8004942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004944:	4b0a      	ldr	r3, [pc, #40]	; (8004970 <__swbuf_r+0x9c>)
 8004946:	429c      	cmp	r4, r3
 8004948:	d101      	bne.n	800494e <__swbuf_r+0x7a>
 800494a:	68ac      	ldr	r4, [r5, #8]
 800494c:	e7cf      	b.n	80048ee <__swbuf_r+0x1a>
 800494e:	4b09      	ldr	r3, [pc, #36]	; (8004974 <__swbuf_r+0xa0>)
 8004950:	429c      	cmp	r4, r3
 8004952:	bf08      	it	eq
 8004954:	68ec      	ldreq	r4, [r5, #12]
 8004956:	e7ca      	b.n	80048ee <__swbuf_r+0x1a>
 8004958:	4621      	mov	r1, r4
 800495a:	4628      	mov	r0, r5
 800495c:	f000 f80c 	bl	8004978 <__swsetup_r>
 8004960:	2800      	cmp	r0, #0
 8004962:	d0cb      	beq.n	80048fc <__swbuf_r+0x28>
 8004964:	f04f 37ff 	mov.w	r7, #4294967295
 8004968:	e7ea      	b.n	8004940 <__swbuf_r+0x6c>
 800496a:	bf00      	nop
 800496c:	08005888 	.word	0x08005888
 8004970:	080058a8 	.word	0x080058a8
 8004974:	08005868 	.word	0x08005868

08004978 <__swsetup_r>:
 8004978:	4b32      	ldr	r3, [pc, #200]	; (8004a44 <__swsetup_r+0xcc>)
 800497a:	b570      	push	{r4, r5, r6, lr}
 800497c:	681d      	ldr	r5, [r3, #0]
 800497e:	4606      	mov	r6, r0
 8004980:	460c      	mov	r4, r1
 8004982:	b125      	cbz	r5, 800498e <__swsetup_r+0x16>
 8004984:	69ab      	ldr	r3, [r5, #24]
 8004986:	b913      	cbnz	r3, 800498e <__swsetup_r+0x16>
 8004988:	4628      	mov	r0, r5
 800498a:	f000 f97d 	bl	8004c88 <__sinit>
 800498e:	4b2e      	ldr	r3, [pc, #184]	; (8004a48 <__swsetup_r+0xd0>)
 8004990:	429c      	cmp	r4, r3
 8004992:	d10f      	bne.n	80049b4 <__swsetup_r+0x3c>
 8004994:	686c      	ldr	r4, [r5, #4]
 8004996:	89a3      	ldrh	r3, [r4, #12]
 8004998:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800499c:	0719      	lsls	r1, r3, #28
 800499e:	d42c      	bmi.n	80049fa <__swsetup_r+0x82>
 80049a0:	06dd      	lsls	r5, r3, #27
 80049a2:	d411      	bmi.n	80049c8 <__swsetup_r+0x50>
 80049a4:	2309      	movs	r3, #9
 80049a6:	6033      	str	r3, [r6, #0]
 80049a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80049ac:	81a3      	strh	r3, [r4, #12]
 80049ae:	f04f 30ff 	mov.w	r0, #4294967295
 80049b2:	e03e      	b.n	8004a32 <__swsetup_r+0xba>
 80049b4:	4b25      	ldr	r3, [pc, #148]	; (8004a4c <__swsetup_r+0xd4>)
 80049b6:	429c      	cmp	r4, r3
 80049b8:	d101      	bne.n	80049be <__swsetup_r+0x46>
 80049ba:	68ac      	ldr	r4, [r5, #8]
 80049bc:	e7eb      	b.n	8004996 <__swsetup_r+0x1e>
 80049be:	4b24      	ldr	r3, [pc, #144]	; (8004a50 <__swsetup_r+0xd8>)
 80049c0:	429c      	cmp	r4, r3
 80049c2:	bf08      	it	eq
 80049c4:	68ec      	ldreq	r4, [r5, #12]
 80049c6:	e7e6      	b.n	8004996 <__swsetup_r+0x1e>
 80049c8:	0758      	lsls	r0, r3, #29
 80049ca:	d512      	bpl.n	80049f2 <__swsetup_r+0x7a>
 80049cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049ce:	b141      	cbz	r1, 80049e2 <__swsetup_r+0x6a>
 80049d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049d4:	4299      	cmp	r1, r3
 80049d6:	d002      	beq.n	80049de <__swsetup_r+0x66>
 80049d8:	4630      	mov	r0, r6
 80049da:	f000 fa59 	bl	8004e90 <_free_r>
 80049de:	2300      	movs	r3, #0
 80049e0:	6363      	str	r3, [r4, #52]	; 0x34
 80049e2:	89a3      	ldrh	r3, [r4, #12]
 80049e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80049e8:	81a3      	strh	r3, [r4, #12]
 80049ea:	2300      	movs	r3, #0
 80049ec:	6063      	str	r3, [r4, #4]
 80049ee:	6923      	ldr	r3, [r4, #16]
 80049f0:	6023      	str	r3, [r4, #0]
 80049f2:	89a3      	ldrh	r3, [r4, #12]
 80049f4:	f043 0308 	orr.w	r3, r3, #8
 80049f8:	81a3      	strh	r3, [r4, #12]
 80049fa:	6923      	ldr	r3, [r4, #16]
 80049fc:	b94b      	cbnz	r3, 8004a12 <__swsetup_r+0x9a>
 80049fe:	89a3      	ldrh	r3, [r4, #12]
 8004a00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a08:	d003      	beq.n	8004a12 <__swsetup_r+0x9a>
 8004a0a:	4621      	mov	r1, r4
 8004a0c:	4630      	mov	r0, r6
 8004a0e:	f000 f9ff 	bl	8004e10 <__smakebuf_r>
 8004a12:	89a0      	ldrh	r0, [r4, #12]
 8004a14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a18:	f010 0301 	ands.w	r3, r0, #1
 8004a1c:	d00a      	beq.n	8004a34 <__swsetup_r+0xbc>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60a3      	str	r3, [r4, #8]
 8004a22:	6963      	ldr	r3, [r4, #20]
 8004a24:	425b      	negs	r3, r3
 8004a26:	61a3      	str	r3, [r4, #24]
 8004a28:	6923      	ldr	r3, [r4, #16]
 8004a2a:	b943      	cbnz	r3, 8004a3e <__swsetup_r+0xc6>
 8004a2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004a30:	d1ba      	bne.n	80049a8 <__swsetup_r+0x30>
 8004a32:	bd70      	pop	{r4, r5, r6, pc}
 8004a34:	0781      	lsls	r1, r0, #30
 8004a36:	bf58      	it	pl
 8004a38:	6963      	ldrpl	r3, [r4, #20]
 8004a3a:	60a3      	str	r3, [r4, #8]
 8004a3c:	e7f4      	b.n	8004a28 <__swsetup_r+0xb0>
 8004a3e:	2000      	movs	r0, #0
 8004a40:	e7f7      	b.n	8004a32 <__swsetup_r+0xba>
 8004a42:	bf00      	nop
 8004a44:	2000000c 	.word	0x2000000c
 8004a48:	08005888 	.word	0x08005888
 8004a4c:	080058a8 	.word	0x080058a8
 8004a50:	08005868 	.word	0x08005868

08004a54 <__sflush_r>:
 8004a54:	898a      	ldrh	r2, [r1, #12]
 8004a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a5a:	4605      	mov	r5, r0
 8004a5c:	0710      	lsls	r0, r2, #28
 8004a5e:	460c      	mov	r4, r1
 8004a60:	d458      	bmi.n	8004b14 <__sflush_r+0xc0>
 8004a62:	684b      	ldr	r3, [r1, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	dc05      	bgt.n	8004a74 <__sflush_r+0x20>
 8004a68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	dc02      	bgt.n	8004a74 <__sflush_r+0x20>
 8004a6e:	2000      	movs	r0, #0
 8004a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a76:	2e00      	cmp	r6, #0
 8004a78:	d0f9      	beq.n	8004a6e <__sflush_r+0x1a>
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a80:	682f      	ldr	r7, [r5, #0]
 8004a82:	602b      	str	r3, [r5, #0]
 8004a84:	d032      	beq.n	8004aec <__sflush_r+0x98>
 8004a86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a88:	89a3      	ldrh	r3, [r4, #12]
 8004a8a:	075a      	lsls	r2, r3, #29
 8004a8c:	d505      	bpl.n	8004a9a <__sflush_r+0x46>
 8004a8e:	6863      	ldr	r3, [r4, #4]
 8004a90:	1ac0      	subs	r0, r0, r3
 8004a92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a94:	b10b      	cbz	r3, 8004a9a <__sflush_r+0x46>
 8004a96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a98:	1ac0      	subs	r0, r0, r3
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004aa0:	6a21      	ldr	r1, [r4, #32]
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	47b0      	blx	r6
 8004aa6:	1c43      	adds	r3, r0, #1
 8004aa8:	89a3      	ldrh	r3, [r4, #12]
 8004aaa:	d106      	bne.n	8004aba <__sflush_r+0x66>
 8004aac:	6829      	ldr	r1, [r5, #0]
 8004aae:	291d      	cmp	r1, #29
 8004ab0:	d82c      	bhi.n	8004b0c <__sflush_r+0xb8>
 8004ab2:	4a2a      	ldr	r2, [pc, #168]	; (8004b5c <__sflush_r+0x108>)
 8004ab4:	40ca      	lsrs	r2, r1
 8004ab6:	07d6      	lsls	r6, r2, #31
 8004ab8:	d528      	bpl.n	8004b0c <__sflush_r+0xb8>
 8004aba:	2200      	movs	r2, #0
 8004abc:	6062      	str	r2, [r4, #4]
 8004abe:	04d9      	lsls	r1, r3, #19
 8004ac0:	6922      	ldr	r2, [r4, #16]
 8004ac2:	6022      	str	r2, [r4, #0]
 8004ac4:	d504      	bpl.n	8004ad0 <__sflush_r+0x7c>
 8004ac6:	1c42      	adds	r2, r0, #1
 8004ac8:	d101      	bne.n	8004ace <__sflush_r+0x7a>
 8004aca:	682b      	ldr	r3, [r5, #0]
 8004acc:	b903      	cbnz	r3, 8004ad0 <__sflush_r+0x7c>
 8004ace:	6560      	str	r0, [r4, #84]	; 0x54
 8004ad0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ad2:	602f      	str	r7, [r5, #0]
 8004ad4:	2900      	cmp	r1, #0
 8004ad6:	d0ca      	beq.n	8004a6e <__sflush_r+0x1a>
 8004ad8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004adc:	4299      	cmp	r1, r3
 8004ade:	d002      	beq.n	8004ae6 <__sflush_r+0x92>
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	f000 f9d5 	bl	8004e90 <_free_r>
 8004ae6:	2000      	movs	r0, #0
 8004ae8:	6360      	str	r0, [r4, #52]	; 0x34
 8004aea:	e7c1      	b.n	8004a70 <__sflush_r+0x1c>
 8004aec:	6a21      	ldr	r1, [r4, #32]
 8004aee:	2301      	movs	r3, #1
 8004af0:	4628      	mov	r0, r5
 8004af2:	47b0      	blx	r6
 8004af4:	1c41      	adds	r1, r0, #1
 8004af6:	d1c7      	bne.n	8004a88 <__sflush_r+0x34>
 8004af8:	682b      	ldr	r3, [r5, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d0c4      	beq.n	8004a88 <__sflush_r+0x34>
 8004afe:	2b1d      	cmp	r3, #29
 8004b00:	d001      	beq.n	8004b06 <__sflush_r+0xb2>
 8004b02:	2b16      	cmp	r3, #22
 8004b04:	d101      	bne.n	8004b0a <__sflush_r+0xb6>
 8004b06:	602f      	str	r7, [r5, #0]
 8004b08:	e7b1      	b.n	8004a6e <__sflush_r+0x1a>
 8004b0a:	89a3      	ldrh	r3, [r4, #12]
 8004b0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b10:	81a3      	strh	r3, [r4, #12]
 8004b12:	e7ad      	b.n	8004a70 <__sflush_r+0x1c>
 8004b14:	690f      	ldr	r7, [r1, #16]
 8004b16:	2f00      	cmp	r7, #0
 8004b18:	d0a9      	beq.n	8004a6e <__sflush_r+0x1a>
 8004b1a:	0793      	lsls	r3, r2, #30
 8004b1c:	680e      	ldr	r6, [r1, #0]
 8004b1e:	bf08      	it	eq
 8004b20:	694b      	ldreq	r3, [r1, #20]
 8004b22:	600f      	str	r7, [r1, #0]
 8004b24:	bf18      	it	ne
 8004b26:	2300      	movne	r3, #0
 8004b28:	eba6 0807 	sub.w	r8, r6, r7
 8004b2c:	608b      	str	r3, [r1, #8]
 8004b2e:	f1b8 0f00 	cmp.w	r8, #0
 8004b32:	dd9c      	ble.n	8004a6e <__sflush_r+0x1a>
 8004b34:	6a21      	ldr	r1, [r4, #32]
 8004b36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b38:	4643      	mov	r3, r8
 8004b3a:	463a      	mov	r2, r7
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	47b0      	blx	r6
 8004b40:	2800      	cmp	r0, #0
 8004b42:	dc06      	bgt.n	8004b52 <__sflush_r+0xfe>
 8004b44:	89a3      	ldrh	r3, [r4, #12]
 8004b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b4a:	81a3      	strh	r3, [r4, #12]
 8004b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b50:	e78e      	b.n	8004a70 <__sflush_r+0x1c>
 8004b52:	4407      	add	r7, r0
 8004b54:	eba8 0800 	sub.w	r8, r8, r0
 8004b58:	e7e9      	b.n	8004b2e <__sflush_r+0xda>
 8004b5a:	bf00      	nop
 8004b5c:	20400001 	.word	0x20400001

08004b60 <_fflush_r>:
 8004b60:	b538      	push	{r3, r4, r5, lr}
 8004b62:	690b      	ldr	r3, [r1, #16]
 8004b64:	4605      	mov	r5, r0
 8004b66:	460c      	mov	r4, r1
 8004b68:	b913      	cbnz	r3, 8004b70 <_fflush_r+0x10>
 8004b6a:	2500      	movs	r5, #0
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	bd38      	pop	{r3, r4, r5, pc}
 8004b70:	b118      	cbz	r0, 8004b7a <_fflush_r+0x1a>
 8004b72:	6983      	ldr	r3, [r0, #24]
 8004b74:	b90b      	cbnz	r3, 8004b7a <_fflush_r+0x1a>
 8004b76:	f000 f887 	bl	8004c88 <__sinit>
 8004b7a:	4b14      	ldr	r3, [pc, #80]	; (8004bcc <_fflush_r+0x6c>)
 8004b7c:	429c      	cmp	r4, r3
 8004b7e:	d11b      	bne.n	8004bb8 <_fflush_r+0x58>
 8004b80:	686c      	ldr	r4, [r5, #4]
 8004b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d0ef      	beq.n	8004b6a <_fflush_r+0xa>
 8004b8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b8c:	07d0      	lsls	r0, r2, #31
 8004b8e:	d404      	bmi.n	8004b9a <_fflush_r+0x3a>
 8004b90:	0599      	lsls	r1, r3, #22
 8004b92:	d402      	bmi.n	8004b9a <_fflush_r+0x3a>
 8004b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b96:	f000 f915 	bl	8004dc4 <__retarget_lock_acquire_recursive>
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	4621      	mov	r1, r4
 8004b9e:	f7ff ff59 	bl	8004a54 <__sflush_r>
 8004ba2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ba4:	07da      	lsls	r2, r3, #31
 8004ba6:	4605      	mov	r5, r0
 8004ba8:	d4e0      	bmi.n	8004b6c <_fflush_r+0xc>
 8004baa:	89a3      	ldrh	r3, [r4, #12]
 8004bac:	059b      	lsls	r3, r3, #22
 8004bae:	d4dd      	bmi.n	8004b6c <_fflush_r+0xc>
 8004bb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bb2:	f000 f908 	bl	8004dc6 <__retarget_lock_release_recursive>
 8004bb6:	e7d9      	b.n	8004b6c <_fflush_r+0xc>
 8004bb8:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <_fflush_r+0x70>)
 8004bba:	429c      	cmp	r4, r3
 8004bbc:	d101      	bne.n	8004bc2 <_fflush_r+0x62>
 8004bbe:	68ac      	ldr	r4, [r5, #8]
 8004bc0:	e7df      	b.n	8004b82 <_fflush_r+0x22>
 8004bc2:	4b04      	ldr	r3, [pc, #16]	; (8004bd4 <_fflush_r+0x74>)
 8004bc4:	429c      	cmp	r4, r3
 8004bc6:	bf08      	it	eq
 8004bc8:	68ec      	ldreq	r4, [r5, #12]
 8004bca:	e7da      	b.n	8004b82 <_fflush_r+0x22>
 8004bcc:	08005888 	.word	0x08005888
 8004bd0:	080058a8 	.word	0x080058a8
 8004bd4:	08005868 	.word	0x08005868

08004bd8 <std>:
 8004bd8:	2300      	movs	r3, #0
 8004bda:	b510      	push	{r4, lr}
 8004bdc:	4604      	mov	r4, r0
 8004bde:	e9c0 3300 	strd	r3, r3, [r0]
 8004be2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004be6:	6083      	str	r3, [r0, #8]
 8004be8:	8181      	strh	r1, [r0, #12]
 8004bea:	6643      	str	r3, [r0, #100]	; 0x64
 8004bec:	81c2      	strh	r2, [r0, #14]
 8004bee:	6183      	str	r3, [r0, #24]
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	2208      	movs	r2, #8
 8004bf4:	305c      	adds	r0, #92	; 0x5c
 8004bf6:	f7ff fdd7 	bl	80047a8 <memset>
 8004bfa:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <std+0x38>)
 8004bfc:	6263      	str	r3, [r4, #36]	; 0x24
 8004bfe:	4b05      	ldr	r3, [pc, #20]	; (8004c14 <std+0x3c>)
 8004c00:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c02:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <std+0x40>)
 8004c04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c06:	4b05      	ldr	r3, [pc, #20]	; (8004c1c <std+0x44>)
 8004c08:	6224      	str	r4, [r4, #32]
 8004c0a:	6323      	str	r3, [r4, #48]	; 0x30
 8004c0c:	bd10      	pop	{r4, pc}
 8004c0e:	bf00      	nop
 8004c10:	080055e1 	.word	0x080055e1
 8004c14:	08005603 	.word	0x08005603
 8004c18:	0800563b 	.word	0x0800563b
 8004c1c:	0800565f 	.word	0x0800565f

08004c20 <_cleanup_r>:
 8004c20:	4901      	ldr	r1, [pc, #4]	; (8004c28 <_cleanup_r+0x8>)
 8004c22:	f000 b8af 	b.w	8004d84 <_fwalk_reent>
 8004c26:	bf00      	nop
 8004c28:	08004b61 	.word	0x08004b61

08004c2c <__sfmoreglue>:
 8004c2c:	b570      	push	{r4, r5, r6, lr}
 8004c2e:	1e4a      	subs	r2, r1, #1
 8004c30:	2568      	movs	r5, #104	; 0x68
 8004c32:	4355      	muls	r5, r2
 8004c34:	460e      	mov	r6, r1
 8004c36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c3a:	f000 f979 	bl	8004f30 <_malloc_r>
 8004c3e:	4604      	mov	r4, r0
 8004c40:	b140      	cbz	r0, 8004c54 <__sfmoreglue+0x28>
 8004c42:	2100      	movs	r1, #0
 8004c44:	e9c0 1600 	strd	r1, r6, [r0]
 8004c48:	300c      	adds	r0, #12
 8004c4a:	60a0      	str	r0, [r4, #8]
 8004c4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c50:	f7ff fdaa 	bl	80047a8 <memset>
 8004c54:	4620      	mov	r0, r4
 8004c56:	bd70      	pop	{r4, r5, r6, pc}

08004c58 <__sfp_lock_acquire>:
 8004c58:	4801      	ldr	r0, [pc, #4]	; (8004c60 <__sfp_lock_acquire+0x8>)
 8004c5a:	f000 b8b3 	b.w	8004dc4 <__retarget_lock_acquire_recursive>
 8004c5e:	bf00      	nop
 8004c60:	20000314 	.word	0x20000314

08004c64 <__sfp_lock_release>:
 8004c64:	4801      	ldr	r0, [pc, #4]	; (8004c6c <__sfp_lock_release+0x8>)
 8004c66:	f000 b8ae 	b.w	8004dc6 <__retarget_lock_release_recursive>
 8004c6a:	bf00      	nop
 8004c6c:	20000314 	.word	0x20000314

08004c70 <__sinit_lock_acquire>:
 8004c70:	4801      	ldr	r0, [pc, #4]	; (8004c78 <__sinit_lock_acquire+0x8>)
 8004c72:	f000 b8a7 	b.w	8004dc4 <__retarget_lock_acquire_recursive>
 8004c76:	bf00      	nop
 8004c78:	2000030f 	.word	0x2000030f

08004c7c <__sinit_lock_release>:
 8004c7c:	4801      	ldr	r0, [pc, #4]	; (8004c84 <__sinit_lock_release+0x8>)
 8004c7e:	f000 b8a2 	b.w	8004dc6 <__retarget_lock_release_recursive>
 8004c82:	bf00      	nop
 8004c84:	2000030f 	.word	0x2000030f

08004c88 <__sinit>:
 8004c88:	b510      	push	{r4, lr}
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	f7ff fff0 	bl	8004c70 <__sinit_lock_acquire>
 8004c90:	69a3      	ldr	r3, [r4, #24]
 8004c92:	b11b      	cbz	r3, 8004c9c <__sinit+0x14>
 8004c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c98:	f7ff bff0 	b.w	8004c7c <__sinit_lock_release>
 8004c9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ca0:	6523      	str	r3, [r4, #80]	; 0x50
 8004ca2:	4b13      	ldr	r3, [pc, #76]	; (8004cf0 <__sinit+0x68>)
 8004ca4:	4a13      	ldr	r2, [pc, #76]	; (8004cf4 <__sinit+0x6c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	62a2      	str	r2, [r4, #40]	; 0x28
 8004caa:	42a3      	cmp	r3, r4
 8004cac:	bf04      	itt	eq
 8004cae:	2301      	moveq	r3, #1
 8004cb0:	61a3      	streq	r3, [r4, #24]
 8004cb2:	4620      	mov	r0, r4
 8004cb4:	f000 f820 	bl	8004cf8 <__sfp>
 8004cb8:	6060      	str	r0, [r4, #4]
 8004cba:	4620      	mov	r0, r4
 8004cbc:	f000 f81c 	bl	8004cf8 <__sfp>
 8004cc0:	60a0      	str	r0, [r4, #8]
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	f000 f818 	bl	8004cf8 <__sfp>
 8004cc8:	2200      	movs	r2, #0
 8004cca:	60e0      	str	r0, [r4, #12]
 8004ccc:	2104      	movs	r1, #4
 8004cce:	6860      	ldr	r0, [r4, #4]
 8004cd0:	f7ff ff82 	bl	8004bd8 <std>
 8004cd4:	68a0      	ldr	r0, [r4, #8]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	2109      	movs	r1, #9
 8004cda:	f7ff ff7d 	bl	8004bd8 <std>
 8004cde:	68e0      	ldr	r0, [r4, #12]
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	2112      	movs	r1, #18
 8004ce4:	f7ff ff78 	bl	8004bd8 <std>
 8004ce8:	2301      	movs	r3, #1
 8004cea:	61a3      	str	r3, [r4, #24]
 8004cec:	e7d2      	b.n	8004c94 <__sinit+0xc>
 8004cee:	bf00      	nop
 8004cf0:	08005864 	.word	0x08005864
 8004cf4:	08004c21 	.word	0x08004c21

08004cf8 <__sfp>:
 8004cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfa:	4607      	mov	r7, r0
 8004cfc:	f7ff ffac 	bl	8004c58 <__sfp_lock_acquire>
 8004d00:	4b1e      	ldr	r3, [pc, #120]	; (8004d7c <__sfp+0x84>)
 8004d02:	681e      	ldr	r6, [r3, #0]
 8004d04:	69b3      	ldr	r3, [r6, #24]
 8004d06:	b913      	cbnz	r3, 8004d0e <__sfp+0x16>
 8004d08:	4630      	mov	r0, r6
 8004d0a:	f7ff ffbd 	bl	8004c88 <__sinit>
 8004d0e:	3648      	adds	r6, #72	; 0x48
 8004d10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004d14:	3b01      	subs	r3, #1
 8004d16:	d503      	bpl.n	8004d20 <__sfp+0x28>
 8004d18:	6833      	ldr	r3, [r6, #0]
 8004d1a:	b30b      	cbz	r3, 8004d60 <__sfp+0x68>
 8004d1c:	6836      	ldr	r6, [r6, #0]
 8004d1e:	e7f7      	b.n	8004d10 <__sfp+0x18>
 8004d20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d24:	b9d5      	cbnz	r5, 8004d5c <__sfp+0x64>
 8004d26:	4b16      	ldr	r3, [pc, #88]	; (8004d80 <__sfp+0x88>)
 8004d28:	60e3      	str	r3, [r4, #12]
 8004d2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004d2e:	6665      	str	r5, [r4, #100]	; 0x64
 8004d30:	f000 f847 	bl	8004dc2 <__retarget_lock_init_recursive>
 8004d34:	f7ff ff96 	bl	8004c64 <__sfp_lock_release>
 8004d38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004d3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004d40:	6025      	str	r5, [r4, #0]
 8004d42:	61a5      	str	r5, [r4, #24]
 8004d44:	2208      	movs	r2, #8
 8004d46:	4629      	mov	r1, r5
 8004d48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d4c:	f7ff fd2c 	bl	80047a8 <memset>
 8004d50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d58:	4620      	mov	r0, r4
 8004d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d5c:	3468      	adds	r4, #104	; 0x68
 8004d5e:	e7d9      	b.n	8004d14 <__sfp+0x1c>
 8004d60:	2104      	movs	r1, #4
 8004d62:	4638      	mov	r0, r7
 8004d64:	f7ff ff62 	bl	8004c2c <__sfmoreglue>
 8004d68:	4604      	mov	r4, r0
 8004d6a:	6030      	str	r0, [r6, #0]
 8004d6c:	2800      	cmp	r0, #0
 8004d6e:	d1d5      	bne.n	8004d1c <__sfp+0x24>
 8004d70:	f7ff ff78 	bl	8004c64 <__sfp_lock_release>
 8004d74:	230c      	movs	r3, #12
 8004d76:	603b      	str	r3, [r7, #0]
 8004d78:	e7ee      	b.n	8004d58 <__sfp+0x60>
 8004d7a:	bf00      	nop
 8004d7c:	08005864 	.word	0x08005864
 8004d80:	ffff0001 	.word	0xffff0001

08004d84 <_fwalk_reent>:
 8004d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d88:	4606      	mov	r6, r0
 8004d8a:	4688      	mov	r8, r1
 8004d8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d90:	2700      	movs	r7, #0
 8004d92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d96:	f1b9 0901 	subs.w	r9, r9, #1
 8004d9a:	d505      	bpl.n	8004da8 <_fwalk_reent+0x24>
 8004d9c:	6824      	ldr	r4, [r4, #0]
 8004d9e:	2c00      	cmp	r4, #0
 8004da0:	d1f7      	bne.n	8004d92 <_fwalk_reent+0xe>
 8004da2:	4638      	mov	r0, r7
 8004da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004da8:	89ab      	ldrh	r3, [r5, #12]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d907      	bls.n	8004dbe <_fwalk_reent+0x3a>
 8004dae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004db2:	3301      	adds	r3, #1
 8004db4:	d003      	beq.n	8004dbe <_fwalk_reent+0x3a>
 8004db6:	4629      	mov	r1, r5
 8004db8:	4630      	mov	r0, r6
 8004dba:	47c0      	blx	r8
 8004dbc:	4307      	orrs	r7, r0
 8004dbe:	3568      	adds	r5, #104	; 0x68
 8004dc0:	e7e9      	b.n	8004d96 <_fwalk_reent+0x12>

08004dc2 <__retarget_lock_init_recursive>:
 8004dc2:	4770      	bx	lr

08004dc4 <__retarget_lock_acquire_recursive>:
 8004dc4:	4770      	bx	lr

08004dc6 <__retarget_lock_release_recursive>:
 8004dc6:	4770      	bx	lr

08004dc8 <__swhatbuf_r>:
 8004dc8:	b570      	push	{r4, r5, r6, lr}
 8004dca:	460e      	mov	r6, r1
 8004dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dd0:	2900      	cmp	r1, #0
 8004dd2:	b096      	sub	sp, #88	; 0x58
 8004dd4:	4614      	mov	r4, r2
 8004dd6:	461d      	mov	r5, r3
 8004dd8:	da07      	bge.n	8004dea <__swhatbuf_r+0x22>
 8004dda:	2300      	movs	r3, #0
 8004ddc:	602b      	str	r3, [r5, #0]
 8004dde:	89b3      	ldrh	r3, [r6, #12]
 8004de0:	061a      	lsls	r2, r3, #24
 8004de2:	d410      	bmi.n	8004e06 <__swhatbuf_r+0x3e>
 8004de4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004de8:	e00e      	b.n	8004e08 <__swhatbuf_r+0x40>
 8004dea:	466a      	mov	r2, sp
 8004dec:	f000 fc5e 	bl	80056ac <_fstat_r>
 8004df0:	2800      	cmp	r0, #0
 8004df2:	dbf2      	blt.n	8004dda <__swhatbuf_r+0x12>
 8004df4:	9a01      	ldr	r2, [sp, #4]
 8004df6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004dfa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004dfe:	425a      	negs	r2, r3
 8004e00:	415a      	adcs	r2, r3
 8004e02:	602a      	str	r2, [r5, #0]
 8004e04:	e7ee      	b.n	8004de4 <__swhatbuf_r+0x1c>
 8004e06:	2340      	movs	r3, #64	; 0x40
 8004e08:	2000      	movs	r0, #0
 8004e0a:	6023      	str	r3, [r4, #0]
 8004e0c:	b016      	add	sp, #88	; 0x58
 8004e0e:	bd70      	pop	{r4, r5, r6, pc}

08004e10 <__smakebuf_r>:
 8004e10:	898b      	ldrh	r3, [r1, #12]
 8004e12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e14:	079d      	lsls	r5, r3, #30
 8004e16:	4606      	mov	r6, r0
 8004e18:	460c      	mov	r4, r1
 8004e1a:	d507      	bpl.n	8004e2c <__smakebuf_r+0x1c>
 8004e1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e20:	6023      	str	r3, [r4, #0]
 8004e22:	6123      	str	r3, [r4, #16]
 8004e24:	2301      	movs	r3, #1
 8004e26:	6163      	str	r3, [r4, #20]
 8004e28:	b002      	add	sp, #8
 8004e2a:	bd70      	pop	{r4, r5, r6, pc}
 8004e2c:	ab01      	add	r3, sp, #4
 8004e2e:	466a      	mov	r2, sp
 8004e30:	f7ff ffca 	bl	8004dc8 <__swhatbuf_r>
 8004e34:	9900      	ldr	r1, [sp, #0]
 8004e36:	4605      	mov	r5, r0
 8004e38:	4630      	mov	r0, r6
 8004e3a:	f000 f879 	bl	8004f30 <_malloc_r>
 8004e3e:	b948      	cbnz	r0, 8004e54 <__smakebuf_r+0x44>
 8004e40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e44:	059a      	lsls	r2, r3, #22
 8004e46:	d4ef      	bmi.n	8004e28 <__smakebuf_r+0x18>
 8004e48:	f023 0303 	bic.w	r3, r3, #3
 8004e4c:	f043 0302 	orr.w	r3, r3, #2
 8004e50:	81a3      	strh	r3, [r4, #12]
 8004e52:	e7e3      	b.n	8004e1c <__smakebuf_r+0xc>
 8004e54:	4b0d      	ldr	r3, [pc, #52]	; (8004e8c <__smakebuf_r+0x7c>)
 8004e56:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e58:	89a3      	ldrh	r3, [r4, #12]
 8004e5a:	6020      	str	r0, [r4, #0]
 8004e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e60:	81a3      	strh	r3, [r4, #12]
 8004e62:	9b00      	ldr	r3, [sp, #0]
 8004e64:	6163      	str	r3, [r4, #20]
 8004e66:	9b01      	ldr	r3, [sp, #4]
 8004e68:	6120      	str	r0, [r4, #16]
 8004e6a:	b15b      	cbz	r3, 8004e84 <__smakebuf_r+0x74>
 8004e6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e70:	4630      	mov	r0, r6
 8004e72:	f000 fc2d 	bl	80056d0 <_isatty_r>
 8004e76:	b128      	cbz	r0, 8004e84 <__smakebuf_r+0x74>
 8004e78:	89a3      	ldrh	r3, [r4, #12]
 8004e7a:	f023 0303 	bic.w	r3, r3, #3
 8004e7e:	f043 0301 	orr.w	r3, r3, #1
 8004e82:	81a3      	strh	r3, [r4, #12]
 8004e84:	89a0      	ldrh	r0, [r4, #12]
 8004e86:	4305      	orrs	r5, r0
 8004e88:	81a5      	strh	r5, [r4, #12]
 8004e8a:	e7cd      	b.n	8004e28 <__smakebuf_r+0x18>
 8004e8c:	08004c21 	.word	0x08004c21

08004e90 <_free_r>:
 8004e90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e92:	2900      	cmp	r1, #0
 8004e94:	d048      	beq.n	8004f28 <_free_r+0x98>
 8004e96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e9a:	9001      	str	r0, [sp, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f1a1 0404 	sub.w	r4, r1, #4
 8004ea2:	bfb8      	it	lt
 8004ea4:	18e4      	addlt	r4, r4, r3
 8004ea6:	f000 fc35 	bl	8005714 <__malloc_lock>
 8004eaa:	4a20      	ldr	r2, [pc, #128]	; (8004f2c <_free_r+0x9c>)
 8004eac:	9801      	ldr	r0, [sp, #4]
 8004eae:	6813      	ldr	r3, [r2, #0]
 8004eb0:	4615      	mov	r5, r2
 8004eb2:	b933      	cbnz	r3, 8004ec2 <_free_r+0x32>
 8004eb4:	6063      	str	r3, [r4, #4]
 8004eb6:	6014      	str	r4, [r2, #0]
 8004eb8:	b003      	add	sp, #12
 8004eba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ebe:	f000 bc2f 	b.w	8005720 <__malloc_unlock>
 8004ec2:	42a3      	cmp	r3, r4
 8004ec4:	d90b      	bls.n	8004ede <_free_r+0x4e>
 8004ec6:	6821      	ldr	r1, [r4, #0]
 8004ec8:	1862      	adds	r2, r4, r1
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	bf04      	itt	eq
 8004ece:	681a      	ldreq	r2, [r3, #0]
 8004ed0:	685b      	ldreq	r3, [r3, #4]
 8004ed2:	6063      	str	r3, [r4, #4]
 8004ed4:	bf04      	itt	eq
 8004ed6:	1852      	addeq	r2, r2, r1
 8004ed8:	6022      	streq	r2, [r4, #0]
 8004eda:	602c      	str	r4, [r5, #0]
 8004edc:	e7ec      	b.n	8004eb8 <_free_r+0x28>
 8004ede:	461a      	mov	r2, r3
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	b10b      	cbz	r3, 8004ee8 <_free_r+0x58>
 8004ee4:	42a3      	cmp	r3, r4
 8004ee6:	d9fa      	bls.n	8004ede <_free_r+0x4e>
 8004ee8:	6811      	ldr	r1, [r2, #0]
 8004eea:	1855      	adds	r5, r2, r1
 8004eec:	42a5      	cmp	r5, r4
 8004eee:	d10b      	bne.n	8004f08 <_free_r+0x78>
 8004ef0:	6824      	ldr	r4, [r4, #0]
 8004ef2:	4421      	add	r1, r4
 8004ef4:	1854      	adds	r4, r2, r1
 8004ef6:	42a3      	cmp	r3, r4
 8004ef8:	6011      	str	r1, [r2, #0]
 8004efa:	d1dd      	bne.n	8004eb8 <_free_r+0x28>
 8004efc:	681c      	ldr	r4, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	6053      	str	r3, [r2, #4]
 8004f02:	4421      	add	r1, r4
 8004f04:	6011      	str	r1, [r2, #0]
 8004f06:	e7d7      	b.n	8004eb8 <_free_r+0x28>
 8004f08:	d902      	bls.n	8004f10 <_free_r+0x80>
 8004f0a:	230c      	movs	r3, #12
 8004f0c:	6003      	str	r3, [r0, #0]
 8004f0e:	e7d3      	b.n	8004eb8 <_free_r+0x28>
 8004f10:	6825      	ldr	r5, [r4, #0]
 8004f12:	1961      	adds	r1, r4, r5
 8004f14:	428b      	cmp	r3, r1
 8004f16:	bf04      	itt	eq
 8004f18:	6819      	ldreq	r1, [r3, #0]
 8004f1a:	685b      	ldreq	r3, [r3, #4]
 8004f1c:	6063      	str	r3, [r4, #4]
 8004f1e:	bf04      	itt	eq
 8004f20:	1949      	addeq	r1, r1, r5
 8004f22:	6021      	streq	r1, [r4, #0]
 8004f24:	6054      	str	r4, [r2, #4]
 8004f26:	e7c7      	b.n	8004eb8 <_free_r+0x28>
 8004f28:	b003      	add	sp, #12
 8004f2a:	bd30      	pop	{r4, r5, pc}
 8004f2c:	200000bc 	.word	0x200000bc

08004f30 <_malloc_r>:
 8004f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f32:	1ccd      	adds	r5, r1, #3
 8004f34:	f025 0503 	bic.w	r5, r5, #3
 8004f38:	3508      	adds	r5, #8
 8004f3a:	2d0c      	cmp	r5, #12
 8004f3c:	bf38      	it	cc
 8004f3e:	250c      	movcc	r5, #12
 8004f40:	2d00      	cmp	r5, #0
 8004f42:	4606      	mov	r6, r0
 8004f44:	db01      	blt.n	8004f4a <_malloc_r+0x1a>
 8004f46:	42a9      	cmp	r1, r5
 8004f48:	d903      	bls.n	8004f52 <_malloc_r+0x22>
 8004f4a:	230c      	movs	r3, #12
 8004f4c:	6033      	str	r3, [r6, #0]
 8004f4e:	2000      	movs	r0, #0
 8004f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f52:	f000 fbdf 	bl	8005714 <__malloc_lock>
 8004f56:	4921      	ldr	r1, [pc, #132]	; (8004fdc <_malloc_r+0xac>)
 8004f58:	680a      	ldr	r2, [r1, #0]
 8004f5a:	4614      	mov	r4, r2
 8004f5c:	b99c      	cbnz	r4, 8004f86 <_malloc_r+0x56>
 8004f5e:	4f20      	ldr	r7, [pc, #128]	; (8004fe0 <_malloc_r+0xb0>)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	b923      	cbnz	r3, 8004f6e <_malloc_r+0x3e>
 8004f64:	4621      	mov	r1, r4
 8004f66:	4630      	mov	r0, r6
 8004f68:	f000 fb2a 	bl	80055c0 <_sbrk_r>
 8004f6c:	6038      	str	r0, [r7, #0]
 8004f6e:	4629      	mov	r1, r5
 8004f70:	4630      	mov	r0, r6
 8004f72:	f000 fb25 	bl	80055c0 <_sbrk_r>
 8004f76:	1c43      	adds	r3, r0, #1
 8004f78:	d123      	bne.n	8004fc2 <_malloc_r+0x92>
 8004f7a:	230c      	movs	r3, #12
 8004f7c:	6033      	str	r3, [r6, #0]
 8004f7e:	4630      	mov	r0, r6
 8004f80:	f000 fbce 	bl	8005720 <__malloc_unlock>
 8004f84:	e7e3      	b.n	8004f4e <_malloc_r+0x1e>
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	1b5b      	subs	r3, r3, r5
 8004f8a:	d417      	bmi.n	8004fbc <_malloc_r+0x8c>
 8004f8c:	2b0b      	cmp	r3, #11
 8004f8e:	d903      	bls.n	8004f98 <_malloc_r+0x68>
 8004f90:	6023      	str	r3, [r4, #0]
 8004f92:	441c      	add	r4, r3
 8004f94:	6025      	str	r5, [r4, #0]
 8004f96:	e004      	b.n	8004fa2 <_malloc_r+0x72>
 8004f98:	6863      	ldr	r3, [r4, #4]
 8004f9a:	42a2      	cmp	r2, r4
 8004f9c:	bf0c      	ite	eq
 8004f9e:	600b      	streq	r3, [r1, #0]
 8004fa0:	6053      	strne	r3, [r2, #4]
 8004fa2:	4630      	mov	r0, r6
 8004fa4:	f000 fbbc 	bl	8005720 <__malloc_unlock>
 8004fa8:	f104 000b 	add.w	r0, r4, #11
 8004fac:	1d23      	adds	r3, r4, #4
 8004fae:	f020 0007 	bic.w	r0, r0, #7
 8004fb2:	1ac2      	subs	r2, r0, r3
 8004fb4:	d0cc      	beq.n	8004f50 <_malloc_r+0x20>
 8004fb6:	1a1b      	subs	r3, r3, r0
 8004fb8:	50a3      	str	r3, [r4, r2]
 8004fba:	e7c9      	b.n	8004f50 <_malloc_r+0x20>
 8004fbc:	4622      	mov	r2, r4
 8004fbe:	6864      	ldr	r4, [r4, #4]
 8004fc0:	e7cc      	b.n	8004f5c <_malloc_r+0x2c>
 8004fc2:	1cc4      	adds	r4, r0, #3
 8004fc4:	f024 0403 	bic.w	r4, r4, #3
 8004fc8:	42a0      	cmp	r0, r4
 8004fca:	d0e3      	beq.n	8004f94 <_malloc_r+0x64>
 8004fcc:	1a21      	subs	r1, r4, r0
 8004fce:	4630      	mov	r0, r6
 8004fd0:	f000 faf6 	bl	80055c0 <_sbrk_r>
 8004fd4:	3001      	adds	r0, #1
 8004fd6:	d1dd      	bne.n	8004f94 <_malloc_r+0x64>
 8004fd8:	e7cf      	b.n	8004f7a <_malloc_r+0x4a>
 8004fda:	bf00      	nop
 8004fdc:	200000bc 	.word	0x200000bc
 8004fe0:	200000c0 	.word	0x200000c0

08004fe4 <__sfputc_r>:
 8004fe4:	6893      	ldr	r3, [r2, #8]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	b410      	push	{r4}
 8004fec:	6093      	str	r3, [r2, #8]
 8004fee:	da08      	bge.n	8005002 <__sfputc_r+0x1e>
 8004ff0:	6994      	ldr	r4, [r2, #24]
 8004ff2:	42a3      	cmp	r3, r4
 8004ff4:	db01      	blt.n	8004ffa <__sfputc_r+0x16>
 8004ff6:	290a      	cmp	r1, #10
 8004ff8:	d103      	bne.n	8005002 <__sfputc_r+0x1e>
 8004ffa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ffe:	f7ff bc69 	b.w	80048d4 <__swbuf_r>
 8005002:	6813      	ldr	r3, [r2, #0]
 8005004:	1c58      	adds	r0, r3, #1
 8005006:	6010      	str	r0, [r2, #0]
 8005008:	7019      	strb	r1, [r3, #0]
 800500a:	4608      	mov	r0, r1
 800500c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005010:	4770      	bx	lr

08005012 <__sfputs_r>:
 8005012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005014:	4606      	mov	r6, r0
 8005016:	460f      	mov	r7, r1
 8005018:	4614      	mov	r4, r2
 800501a:	18d5      	adds	r5, r2, r3
 800501c:	42ac      	cmp	r4, r5
 800501e:	d101      	bne.n	8005024 <__sfputs_r+0x12>
 8005020:	2000      	movs	r0, #0
 8005022:	e007      	b.n	8005034 <__sfputs_r+0x22>
 8005024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005028:	463a      	mov	r2, r7
 800502a:	4630      	mov	r0, r6
 800502c:	f7ff ffda 	bl	8004fe4 <__sfputc_r>
 8005030:	1c43      	adds	r3, r0, #1
 8005032:	d1f3      	bne.n	800501c <__sfputs_r+0xa>
 8005034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005038 <_vfiprintf_r>:
 8005038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800503c:	460d      	mov	r5, r1
 800503e:	b09d      	sub	sp, #116	; 0x74
 8005040:	4614      	mov	r4, r2
 8005042:	4698      	mov	r8, r3
 8005044:	4606      	mov	r6, r0
 8005046:	b118      	cbz	r0, 8005050 <_vfiprintf_r+0x18>
 8005048:	6983      	ldr	r3, [r0, #24]
 800504a:	b90b      	cbnz	r3, 8005050 <_vfiprintf_r+0x18>
 800504c:	f7ff fe1c 	bl	8004c88 <__sinit>
 8005050:	4b89      	ldr	r3, [pc, #548]	; (8005278 <_vfiprintf_r+0x240>)
 8005052:	429d      	cmp	r5, r3
 8005054:	d11b      	bne.n	800508e <_vfiprintf_r+0x56>
 8005056:	6875      	ldr	r5, [r6, #4]
 8005058:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800505a:	07d9      	lsls	r1, r3, #31
 800505c:	d405      	bmi.n	800506a <_vfiprintf_r+0x32>
 800505e:	89ab      	ldrh	r3, [r5, #12]
 8005060:	059a      	lsls	r2, r3, #22
 8005062:	d402      	bmi.n	800506a <_vfiprintf_r+0x32>
 8005064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005066:	f7ff fead 	bl	8004dc4 <__retarget_lock_acquire_recursive>
 800506a:	89ab      	ldrh	r3, [r5, #12]
 800506c:	071b      	lsls	r3, r3, #28
 800506e:	d501      	bpl.n	8005074 <_vfiprintf_r+0x3c>
 8005070:	692b      	ldr	r3, [r5, #16]
 8005072:	b9eb      	cbnz	r3, 80050b0 <_vfiprintf_r+0x78>
 8005074:	4629      	mov	r1, r5
 8005076:	4630      	mov	r0, r6
 8005078:	f7ff fc7e 	bl	8004978 <__swsetup_r>
 800507c:	b1c0      	cbz	r0, 80050b0 <_vfiprintf_r+0x78>
 800507e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005080:	07dc      	lsls	r4, r3, #31
 8005082:	d50e      	bpl.n	80050a2 <_vfiprintf_r+0x6a>
 8005084:	f04f 30ff 	mov.w	r0, #4294967295
 8005088:	b01d      	add	sp, #116	; 0x74
 800508a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800508e:	4b7b      	ldr	r3, [pc, #492]	; (800527c <_vfiprintf_r+0x244>)
 8005090:	429d      	cmp	r5, r3
 8005092:	d101      	bne.n	8005098 <_vfiprintf_r+0x60>
 8005094:	68b5      	ldr	r5, [r6, #8]
 8005096:	e7df      	b.n	8005058 <_vfiprintf_r+0x20>
 8005098:	4b79      	ldr	r3, [pc, #484]	; (8005280 <_vfiprintf_r+0x248>)
 800509a:	429d      	cmp	r5, r3
 800509c:	bf08      	it	eq
 800509e:	68f5      	ldreq	r5, [r6, #12]
 80050a0:	e7da      	b.n	8005058 <_vfiprintf_r+0x20>
 80050a2:	89ab      	ldrh	r3, [r5, #12]
 80050a4:	0598      	lsls	r0, r3, #22
 80050a6:	d4ed      	bmi.n	8005084 <_vfiprintf_r+0x4c>
 80050a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050aa:	f7ff fe8c 	bl	8004dc6 <__retarget_lock_release_recursive>
 80050ae:	e7e9      	b.n	8005084 <_vfiprintf_r+0x4c>
 80050b0:	2300      	movs	r3, #0
 80050b2:	9309      	str	r3, [sp, #36]	; 0x24
 80050b4:	2320      	movs	r3, #32
 80050b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80050be:	2330      	movs	r3, #48	; 0x30
 80050c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005284 <_vfiprintf_r+0x24c>
 80050c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050c8:	f04f 0901 	mov.w	r9, #1
 80050cc:	4623      	mov	r3, r4
 80050ce:	469a      	mov	sl, r3
 80050d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050d4:	b10a      	cbz	r2, 80050da <_vfiprintf_r+0xa2>
 80050d6:	2a25      	cmp	r2, #37	; 0x25
 80050d8:	d1f9      	bne.n	80050ce <_vfiprintf_r+0x96>
 80050da:	ebba 0b04 	subs.w	fp, sl, r4
 80050de:	d00b      	beq.n	80050f8 <_vfiprintf_r+0xc0>
 80050e0:	465b      	mov	r3, fp
 80050e2:	4622      	mov	r2, r4
 80050e4:	4629      	mov	r1, r5
 80050e6:	4630      	mov	r0, r6
 80050e8:	f7ff ff93 	bl	8005012 <__sfputs_r>
 80050ec:	3001      	adds	r0, #1
 80050ee:	f000 80aa 	beq.w	8005246 <_vfiprintf_r+0x20e>
 80050f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050f4:	445a      	add	r2, fp
 80050f6:	9209      	str	r2, [sp, #36]	; 0x24
 80050f8:	f89a 3000 	ldrb.w	r3, [sl]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 80a2 	beq.w	8005246 <_vfiprintf_r+0x20e>
 8005102:	2300      	movs	r3, #0
 8005104:	f04f 32ff 	mov.w	r2, #4294967295
 8005108:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800510c:	f10a 0a01 	add.w	sl, sl, #1
 8005110:	9304      	str	r3, [sp, #16]
 8005112:	9307      	str	r3, [sp, #28]
 8005114:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005118:	931a      	str	r3, [sp, #104]	; 0x68
 800511a:	4654      	mov	r4, sl
 800511c:	2205      	movs	r2, #5
 800511e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005122:	4858      	ldr	r0, [pc, #352]	; (8005284 <_vfiprintf_r+0x24c>)
 8005124:	f7fb f854 	bl	80001d0 <memchr>
 8005128:	9a04      	ldr	r2, [sp, #16]
 800512a:	b9d8      	cbnz	r0, 8005164 <_vfiprintf_r+0x12c>
 800512c:	06d1      	lsls	r1, r2, #27
 800512e:	bf44      	itt	mi
 8005130:	2320      	movmi	r3, #32
 8005132:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005136:	0713      	lsls	r3, r2, #28
 8005138:	bf44      	itt	mi
 800513a:	232b      	movmi	r3, #43	; 0x2b
 800513c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005140:	f89a 3000 	ldrb.w	r3, [sl]
 8005144:	2b2a      	cmp	r3, #42	; 0x2a
 8005146:	d015      	beq.n	8005174 <_vfiprintf_r+0x13c>
 8005148:	9a07      	ldr	r2, [sp, #28]
 800514a:	4654      	mov	r4, sl
 800514c:	2000      	movs	r0, #0
 800514e:	f04f 0c0a 	mov.w	ip, #10
 8005152:	4621      	mov	r1, r4
 8005154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005158:	3b30      	subs	r3, #48	; 0x30
 800515a:	2b09      	cmp	r3, #9
 800515c:	d94e      	bls.n	80051fc <_vfiprintf_r+0x1c4>
 800515e:	b1b0      	cbz	r0, 800518e <_vfiprintf_r+0x156>
 8005160:	9207      	str	r2, [sp, #28]
 8005162:	e014      	b.n	800518e <_vfiprintf_r+0x156>
 8005164:	eba0 0308 	sub.w	r3, r0, r8
 8005168:	fa09 f303 	lsl.w	r3, r9, r3
 800516c:	4313      	orrs	r3, r2
 800516e:	9304      	str	r3, [sp, #16]
 8005170:	46a2      	mov	sl, r4
 8005172:	e7d2      	b.n	800511a <_vfiprintf_r+0xe2>
 8005174:	9b03      	ldr	r3, [sp, #12]
 8005176:	1d19      	adds	r1, r3, #4
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	9103      	str	r1, [sp, #12]
 800517c:	2b00      	cmp	r3, #0
 800517e:	bfbb      	ittet	lt
 8005180:	425b      	neglt	r3, r3
 8005182:	f042 0202 	orrlt.w	r2, r2, #2
 8005186:	9307      	strge	r3, [sp, #28]
 8005188:	9307      	strlt	r3, [sp, #28]
 800518a:	bfb8      	it	lt
 800518c:	9204      	strlt	r2, [sp, #16]
 800518e:	7823      	ldrb	r3, [r4, #0]
 8005190:	2b2e      	cmp	r3, #46	; 0x2e
 8005192:	d10c      	bne.n	80051ae <_vfiprintf_r+0x176>
 8005194:	7863      	ldrb	r3, [r4, #1]
 8005196:	2b2a      	cmp	r3, #42	; 0x2a
 8005198:	d135      	bne.n	8005206 <_vfiprintf_r+0x1ce>
 800519a:	9b03      	ldr	r3, [sp, #12]
 800519c:	1d1a      	adds	r2, r3, #4
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	9203      	str	r2, [sp, #12]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	bfb8      	it	lt
 80051a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80051aa:	3402      	adds	r4, #2
 80051ac:	9305      	str	r3, [sp, #20]
 80051ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005294 <_vfiprintf_r+0x25c>
 80051b2:	7821      	ldrb	r1, [r4, #0]
 80051b4:	2203      	movs	r2, #3
 80051b6:	4650      	mov	r0, sl
 80051b8:	f7fb f80a 	bl	80001d0 <memchr>
 80051bc:	b140      	cbz	r0, 80051d0 <_vfiprintf_r+0x198>
 80051be:	2340      	movs	r3, #64	; 0x40
 80051c0:	eba0 000a 	sub.w	r0, r0, sl
 80051c4:	fa03 f000 	lsl.w	r0, r3, r0
 80051c8:	9b04      	ldr	r3, [sp, #16]
 80051ca:	4303      	orrs	r3, r0
 80051cc:	3401      	adds	r4, #1
 80051ce:	9304      	str	r3, [sp, #16]
 80051d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051d4:	482c      	ldr	r0, [pc, #176]	; (8005288 <_vfiprintf_r+0x250>)
 80051d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051da:	2206      	movs	r2, #6
 80051dc:	f7fa fff8 	bl	80001d0 <memchr>
 80051e0:	2800      	cmp	r0, #0
 80051e2:	d03f      	beq.n	8005264 <_vfiprintf_r+0x22c>
 80051e4:	4b29      	ldr	r3, [pc, #164]	; (800528c <_vfiprintf_r+0x254>)
 80051e6:	bb1b      	cbnz	r3, 8005230 <_vfiprintf_r+0x1f8>
 80051e8:	9b03      	ldr	r3, [sp, #12]
 80051ea:	3307      	adds	r3, #7
 80051ec:	f023 0307 	bic.w	r3, r3, #7
 80051f0:	3308      	adds	r3, #8
 80051f2:	9303      	str	r3, [sp, #12]
 80051f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051f6:	443b      	add	r3, r7
 80051f8:	9309      	str	r3, [sp, #36]	; 0x24
 80051fa:	e767      	b.n	80050cc <_vfiprintf_r+0x94>
 80051fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005200:	460c      	mov	r4, r1
 8005202:	2001      	movs	r0, #1
 8005204:	e7a5      	b.n	8005152 <_vfiprintf_r+0x11a>
 8005206:	2300      	movs	r3, #0
 8005208:	3401      	adds	r4, #1
 800520a:	9305      	str	r3, [sp, #20]
 800520c:	4619      	mov	r1, r3
 800520e:	f04f 0c0a 	mov.w	ip, #10
 8005212:	4620      	mov	r0, r4
 8005214:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005218:	3a30      	subs	r2, #48	; 0x30
 800521a:	2a09      	cmp	r2, #9
 800521c:	d903      	bls.n	8005226 <_vfiprintf_r+0x1ee>
 800521e:	2b00      	cmp	r3, #0
 8005220:	d0c5      	beq.n	80051ae <_vfiprintf_r+0x176>
 8005222:	9105      	str	r1, [sp, #20]
 8005224:	e7c3      	b.n	80051ae <_vfiprintf_r+0x176>
 8005226:	fb0c 2101 	mla	r1, ip, r1, r2
 800522a:	4604      	mov	r4, r0
 800522c:	2301      	movs	r3, #1
 800522e:	e7f0      	b.n	8005212 <_vfiprintf_r+0x1da>
 8005230:	ab03      	add	r3, sp, #12
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	462a      	mov	r2, r5
 8005236:	4b16      	ldr	r3, [pc, #88]	; (8005290 <_vfiprintf_r+0x258>)
 8005238:	a904      	add	r1, sp, #16
 800523a:	4630      	mov	r0, r6
 800523c:	f3af 8000 	nop.w
 8005240:	4607      	mov	r7, r0
 8005242:	1c78      	adds	r0, r7, #1
 8005244:	d1d6      	bne.n	80051f4 <_vfiprintf_r+0x1bc>
 8005246:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005248:	07d9      	lsls	r1, r3, #31
 800524a:	d405      	bmi.n	8005258 <_vfiprintf_r+0x220>
 800524c:	89ab      	ldrh	r3, [r5, #12]
 800524e:	059a      	lsls	r2, r3, #22
 8005250:	d402      	bmi.n	8005258 <_vfiprintf_r+0x220>
 8005252:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005254:	f7ff fdb7 	bl	8004dc6 <__retarget_lock_release_recursive>
 8005258:	89ab      	ldrh	r3, [r5, #12]
 800525a:	065b      	lsls	r3, r3, #25
 800525c:	f53f af12 	bmi.w	8005084 <_vfiprintf_r+0x4c>
 8005260:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005262:	e711      	b.n	8005088 <_vfiprintf_r+0x50>
 8005264:	ab03      	add	r3, sp, #12
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	462a      	mov	r2, r5
 800526a:	4b09      	ldr	r3, [pc, #36]	; (8005290 <_vfiprintf_r+0x258>)
 800526c:	a904      	add	r1, sp, #16
 800526e:	4630      	mov	r0, r6
 8005270:	f000 f880 	bl	8005374 <_printf_i>
 8005274:	e7e4      	b.n	8005240 <_vfiprintf_r+0x208>
 8005276:	bf00      	nop
 8005278:	08005888 	.word	0x08005888
 800527c:	080058a8 	.word	0x080058a8
 8005280:	08005868 	.word	0x08005868
 8005284:	080058c8 	.word	0x080058c8
 8005288:	080058d2 	.word	0x080058d2
 800528c:	00000000 	.word	0x00000000
 8005290:	08005013 	.word	0x08005013
 8005294:	080058ce 	.word	0x080058ce

08005298 <_printf_common>:
 8005298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800529c:	4616      	mov	r6, r2
 800529e:	4699      	mov	r9, r3
 80052a0:	688a      	ldr	r2, [r1, #8]
 80052a2:	690b      	ldr	r3, [r1, #16]
 80052a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052a8:	4293      	cmp	r3, r2
 80052aa:	bfb8      	it	lt
 80052ac:	4613      	movlt	r3, r2
 80052ae:	6033      	str	r3, [r6, #0]
 80052b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052b4:	4607      	mov	r7, r0
 80052b6:	460c      	mov	r4, r1
 80052b8:	b10a      	cbz	r2, 80052be <_printf_common+0x26>
 80052ba:	3301      	adds	r3, #1
 80052bc:	6033      	str	r3, [r6, #0]
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	0699      	lsls	r1, r3, #26
 80052c2:	bf42      	ittt	mi
 80052c4:	6833      	ldrmi	r3, [r6, #0]
 80052c6:	3302      	addmi	r3, #2
 80052c8:	6033      	strmi	r3, [r6, #0]
 80052ca:	6825      	ldr	r5, [r4, #0]
 80052cc:	f015 0506 	ands.w	r5, r5, #6
 80052d0:	d106      	bne.n	80052e0 <_printf_common+0x48>
 80052d2:	f104 0a19 	add.w	sl, r4, #25
 80052d6:	68e3      	ldr	r3, [r4, #12]
 80052d8:	6832      	ldr	r2, [r6, #0]
 80052da:	1a9b      	subs	r3, r3, r2
 80052dc:	42ab      	cmp	r3, r5
 80052de:	dc26      	bgt.n	800532e <_printf_common+0x96>
 80052e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052e4:	1e13      	subs	r3, r2, #0
 80052e6:	6822      	ldr	r2, [r4, #0]
 80052e8:	bf18      	it	ne
 80052ea:	2301      	movne	r3, #1
 80052ec:	0692      	lsls	r2, r2, #26
 80052ee:	d42b      	bmi.n	8005348 <_printf_common+0xb0>
 80052f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052f4:	4649      	mov	r1, r9
 80052f6:	4638      	mov	r0, r7
 80052f8:	47c0      	blx	r8
 80052fa:	3001      	adds	r0, #1
 80052fc:	d01e      	beq.n	800533c <_printf_common+0xa4>
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	68e5      	ldr	r5, [r4, #12]
 8005302:	6832      	ldr	r2, [r6, #0]
 8005304:	f003 0306 	and.w	r3, r3, #6
 8005308:	2b04      	cmp	r3, #4
 800530a:	bf08      	it	eq
 800530c:	1aad      	subeq	r5, r5, r2
 800530e:	68a3      	ldr	r3, [r4, #8]
 8005310:	6922      	ldr	r2, [r4, #16]
 8005312:	bf0c      	ite	eq
 8005314:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005318:	2500      	movne	r5, #0
 800531a:	4293      	cmp	r3, r2
 800531c:	bfc4      	itt	gt
 800531e:	1a9b      	subgt	r3, r3, r2
 8005320:	18ed      	addgt	r5, r5, r3
 8005322:	2600      	movs	r6, #0
 8005324:	341a      	adds	r4, #26
 8005326:	42b5      	cmp	r5, r6
 8005328:	d11a      	bne.n	8005360 <_printf_common+0xc8>
 800532a:	2000      	movs	r0, #0
 800532c:	e008      	b.n	8005340 <_printf_common+0xa8>
 800532e:	2301      	movs	r3, #1
 8005330:	4652      	mov	r2, sl
 8005332:	4649      	mov	r1, r9
 8005334:	4638      	mov	r0, r7
 8005336:	47c0      	blx	r8
 8005338:	3001      	adds	r0, #1
 800533a:	d103      	bne.n	8005344 <_printf_common+0xac>
 800533c:	f04f 30ff 	mov.w	r0, #4294967295
 8005340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005344:	3501      	adds	r5, #1
 8005346:	e7c6      	b.n	80052d6 <_printf_common+0x3e>
 8005348:	18e1      	adds	r1, r4, r3
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	2030      	movs	r0, #48	; 0x30
 800534e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005352:	4422      	add	r2, r4
 8005354:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005358:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800535c:	3302      	adds	r3, #2
 800535e:	e7c7      	b.n	80052f0 <_printf_common+0x58>
 8005360:	2301      	movs	r3, #1
 8005362:	4622      	mov	r2, r4
 8005364:	4649      	mov	r1, r9
 8005366:	4638      	mov	r0, r7
 8005368:	47c0      	blx	r8
 800536a:	3001      	adds	r0, #1
 800536c:	d0e6      	beq.n	800533c <_printf_common+0xa4>
 800536e:	3601      	adds	r6, #1
 8005370:	e7d9      	b.n	8005326 <_printf_common+0x8e>
	...

08005374 <_printf_i>:
 8005374:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005378:	460c      	mov	r4, r1
 800537a:	4691      	mov	r9, r2
 800537c:	7e27      	ldrb	r7, [r4, #24]
 800537e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005380:	2f78      	cmp	r7, #120	; 0x78
 8005382:	4680      	mov	r8, r0
 8005384:	469a      	mov	sl, r3
 8005386:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800538a:	d807      	bhi.n	800539c <_printf_i+0x28>
 800538c:	2f62      	cmp	r7, #98	; 0x62
 800538e:	d80a      	bhi.n	80053a6 <_printf_i+0x32>
 8005390:	2f00      	cmp	r7, #0
 8005392:	f000 80d8 	beq.w	8005546 <_printf_i+0x1d2>
 8005396:	2f58      	cmp	r7, #88	; 0x58
 8005398:	f000 80a3 	beq.w	80054e2 <_printf_i+0x16e>
 800539c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80053a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053a4:	e03a      	b.n	800541c <_printf_i+0xa8>
 80053a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053aa:	2b15      	cmp	r3, #21
 80053ac:	d8f6      	bhi.n	800539c <_printf_i+0x28>
 80053ae:	a001      	add	r0, pc, #4	; (adr r0, 80053b4 <_printf_i+0x40>)
 80053b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80053b4:	0800540d 	.word	0x0800540d
 80053b8:	08005421 	.word	0x08005421
 80053bc:	0800539d 	.word	0x0800539d
 80053c0:	0800539d 	.word	0x0800539d
 80053c4:	0800539d 	.word	0x0800539d
 80053c8:	0800539d 	.word	0x0800539d
 80053cc:	08005421 	.word	0x08005421
 80053d0:	0800539d 	.word	0x0800539d
 80053d4:	0800539d 	.word	0x0800539d
 80053d8:	0800539d 	.word	0x0800539d
 80053dc:	0800539d 	.word	0x0800539d
 80053e0:	0800552d 	.word	0x0800552d
 80053e4:	08005451 	.word	0x08005451
 80053e8:	0800550f 	.word	0x0800550f
 80053ec:	0800539d 	.word	0x0800539d
 80053f0:	0800539d 	.word	0x0800539d
 80053f4:	0800554f 	.word	0x0800554f
 80053f8:	0800539d 	.word	0x0800539d
 80053fc:	08005451 	.word	0x08005451
 8005400:	0800539d 	.word	0x0800539d
 8005404:	0800539d 	.word	0x0800539d
 8005408:	08005517 	.word	0x08005517
 800540c:	680b      	ldr	r3, [r1, #0]
 800540e:	1d1a      	adds	r2, r3, #4
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	600a      	str	r2, [r1, #0]
 8005414:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005418:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800541c:	2301      	movs	r3, #1
 800541e:	e0a3      	b.n	8005568 <_printf_i+0x1f4>
 8005420:	6825      	ldr	r5, [r4, #0]
 8005422:	6808      	ldr	r0, [r1, #0]
 8005424:	062e      	lsls	r6, r5, #24
 8005426:	f100 0304 	add.w	r3, r0, #4
 800542a:	d50a      	bpl.n	8005442 <_printf_i+0xce>
 800542c:	6805      	ldr	r5, [r0, #0]
 800542e:	600b      	str	r3, [r1, #0]
 8005430:	2d00      	cmp	r5, #0
 8005432:	da03      	bge.n	800543c <_printf_i+0xc8>
 8005434:	232d      	movs	r3, #45	; 0x2d
 8005436:	426d      	negs	r5, r5
 8005438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800543c:	485e      	ldr	r0, [pc, #376]	; (80055b8 <_printf_i+0x244>)
 800543e:	230a      	movs	r3, #10
 8005440:	e019      	b.n	8005476 <_printf_i+0x102>
 8005442:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005446:	6805      	ldr	r5, [r0, #0]
 8005448:	600b      	str	r3, [r1, #0]
 800544a:	bf18      	it	ne
 800544c:	b22d      	sxthne	r5, r5
 800544e:	e7ef      	b.n	8005430 <_printf_i+0xbc>
 8005450:	680b      	ldr	r3, [r1, #0]
 8005452:	6825      	ldr	r5, [r4, #0]
 8005454:	1d18      	adds	r0, r3, #4
 8005456:	6008      	str	r0, [r1, #0]
 8005458:	0628      	lsls	r0, r5, #24
 800545a:	d501      	bpl.n	8005460 <_printf_i+0xec>
 800545c:	681d      	ldr	r5, [r3, #0]
 800545e:	e002      	b.n	8005466 <_printf_i+0xf2>
 8005460:	0669      	lsls	r1, r5, #25
 8005462:	d5fb      	bpl.n	800545c <_printf_i+0xe8>
 8005464:	881d      	ldrh	r5, [r3, #0]
 8005466:	4854      	ldr	r0, [pc, #336]	; (80055b8 <_printf_i+0x244>)
 8005468:	2f6f      	cmp	r7, #111	; 0x6f
 800546a:	bf0c      	ite	eq
 800546c:	2308      	moveq	r3, #8
 800546e:	230a      	movne	r3, #10
 8005470:	2100      	movs	r1, #0
 8005472:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005476:	6866      	ldr	r6, [r4, #4]
 8005478:	60a6      	str	r6, [r4, #8]
 800547a:	2e00      	cmp	r6, #0
 800547c:	bfa2      	ittt	ge
 800547e:	6821      	ldrge	r1, [r4, #0]
 8005480:	f021 0104 	bicge.w	r1, r1, #4
 8005484:	6021      	strge	r1, [r4, #0]
 8005486:	b90d      	cbnz	r5, 800548c <_printf_i+0x118>
 8005488:	2e00      	cmp	r6, #0
 800548a:	d04d      	beq.n	8005528 <_printf_i+0x1b4>
 800548c:	4616      	mov	r6, r2
 800548e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005492:	fb03 5711 	mls	r7, r3, r1, r5
 8005496:	5dc7      	ldrb	r7, [r0, r7]
 8005498:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800549c:	462f      	mov	r7, r5
 800549e:	42bb      	cmp	r3, r7
 80054a0:	460d      	mov	r5, r1
 80054a2:	d9f4      	bls.n	800548e <_printf_i+0x11a>
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	d10b      	bne.n	80054c0 <_printf_i+0x14c>
 80054a8:	6823      	ldr	r3, [r4, #0]
 80054aa:	07df      	lsls	r7, r3, #31
 80054ac:	d508      	bpl.n	80054c0 <_printf_i+0x14c>
 80054ae:	6923      	ldr	r3, [r4, #16]
 80054b0:	6861      	ldr	r1, [r4, #4]
 80054b2:	4299      	cmp	r1, r3
 80054b4:	bfde      	ittt	le
 80054b6:	2330      	movle	r3, #48	; 0x30
 80054b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80054c0:	1b92      	subs	r2, r2, r6
 80054c2:	6122      	str	r2, [r4, #16]
 80054c4:	f8cd a000 	str.w	sl, [sp]
 80054c8:	464b      	mov	r3, r9
 80054ca:	aa03      	add	r2, sp, #12
 80054cc:	4621      	mov	r1, r4
 80054ce:	4640      	mov	r0, r8
 80054d0:	f7ff fee2 	bl	8005298 <_printf_common>
 80054d4:	3001      	adds	r0, #1
 80054d6:	d14c      	bne.n	8005572 <_printf_i+0x1fe>
 80054d8:	f04f 30ff 	mov.w	r0, #4294967295
 80054dc:	b004      	add	sp, #16
 80054de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054e2:	4835      	ldr	r0, [pc, #212]	; (80055b8 <_printf_i+0x244>)
 80054e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054e8:	6823      	ldr	r3, [r4, #0]
 80054ea:	680e      	ldr	r6, [r1, #0]
 80054ec:	061f      	lsls	r7, r3, #24
 80054ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80054f2:	600e      	str	r6, [r1, #0]
 80054f4:	d514      	bpl.n	8005520 <_printf_i+0x1ac>
 80054f6:	07d9      	lsls	r1, r3, #31
 80054f8:	bf44      	itt	mi
 80054fa:	f043 0320 	orrmi.w	r3, r3, #32
 80054fe:	6023      	strmi	r3, [r4, #0]
 8005500:	b91d      	cbnz	r5, 800550a <_printf_i+0x196>
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	f023 0320 	bic.w	r3, r3, #32
 8005508:	6023      	str	r3, [r4, #0]
 800550a:	2310      	movs	r3, #16
 800550c:	e7b0      	b.n	8005470 <_printf_i+0xfc>
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	f043 0320 	orr.w	r3, r3, #32
 8005514:	6023      	str	r3, [r4, #0]
 8005516:	2378      	movs	r3, #120	; 0x78
 8005518:	4828      	ldr	r0, [pc, #160]	; (80055bc <_printf_i+0x248>)
 800551a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800551e:	e7e3      	b.n	80054e8 <_printf_i+0x174>
 8005520:	065e      	lsls	r6, r3, #25
 8005522:	bf48      	it	mi
 8005524:	b2ad      	uxthmi	r5, r5
 8005526:	e7e6      	b.n	80054f6 <_printf_i+0x182>
 8005528:	4616      	mov	r6, r2
 800552a:	e7bb      	b.n	80054a4 <_printf_i+0x130>
 800552c:	680b      	ldr	r3, [r1, #0]
 800552e:	6826      	ldr	r6, [r4, #0]
 8005530:	6960      	ldr	r0, [r4, #20]
 8005532:	1d1d      	adds	r5, r3, #4
 8005534:	600d      	str	r5, [r1, #0]
 8005536:	0635      	lsls	r5, r6, #24
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	d501      	bpl.n	8005540 <_printf_i+0x1cc>
 800553c:	6018      	str	r0, [r3, #0]
 800553e:	e002      	b.n	8005546 <_printf_i+0x1d2>
 8005540:	0671      	lsls	r1, r6, #25
 8005542:	d5fb      	bpl.n	800553c <_printf_i+0x1c8>
 8005544:	8018      	strh	r0, [r3, #0]
 8005546:	2300      	movs	r3, #0
 8005548:	6123      	str	r3, [r4, #16]
 800554a:	4616      	mov	r6, r2
 800554c:	e7ba      	b.n	80054c4 <_printf_i+0x150>
 800554e:	680b      	ldr	r3, [r1, #0]
 8005550:	1d1a      	adds	r2, r3, #4
 8005552:	600a      	str	r2, [r1, #0]
 8005554:	681e      	ldr	r6, [r3, #0]
 8005556:	6862      	ldr	r2, [r4, #4]
 8005558:	2100      	movs	r1, #0
 800555a:	4630      	mov	r0, r6
 800555c:	f7fa fe38 	bl	80001d0 <memchr>
 8005560:	b108      	cbz	r0, 8005566 <_printf_i+0x1f2>
 8005562:	1b80      	subs	r0, r0, r6
 8005564:	6060      	str	r0, [r4, #4]
 8005566:	6863      	ldr	r3, [r4, #4]
 8005568:	6123      	str	r3, [r4, #16]
 800556a:	2300      	movs	r3, #0
 800556c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005570:	e7a8      	b.n	80054c4 <_printf_i+0x150>
 8005572:	6923      	ldr	r3, [r4, #16]
 8005574:	4632      	mov	r2, r6
 8005576:	4649      	mov	r1, r9
 8005578:	4640      	mov	r0, r8
 800557a:	47d0      	blx	sl
 800557c:	3001      	adds	r0, #1
 800557e:	d0ab      	beq.n	80054d8 <_printf_i+0x164>
 8005580:	6823      	ldr	r3, [r4, #0]
 8005582:	079b      	lsls	r3, r3, #30
 8005584:	d413      	bmi.n	80055ae <_printf_i+0x23a>
 8005586:	68e0      	ldr	r0, [r4, #12]
 8005588:	9b03      	ldr	r3, [sp, #12]
 800558a:	4298      	cmp	r0, r3
 800558c:	bfb8      	it	lt
 800558e:	4618      	movlt	r0, r3
 8005590:	e7a4      	b.n	80054dc <_printf_i+0x168>
 8005592:	2301      	movs	r3, #1
 8005594:	4632      	mov	r2, r6
 8005596:	4649      	mov	r1, r9
 8005598:	4640      	mov	r0, r8
 800559a:	47d0      	blx	sl
 800559c:	3001      	adds	r0, #1
 800559e:	d09b      	beq.n	80054d8 <_printf_i+0x164>
 80055a0:	3501      	adds	r5, #1
 80055a2:	68e3      	ldr	r3, [r4, #12]
 80055a4:	9903      	ldr	r1, [sp, #12]
 80055a6:	1a5b      	subs	r3, r3, r1
 80055a8:	42ab      	cmp	r3, r5
 80055aa:	dcf2      	bgt.n	8005592 <_printf_i+0x21e>
 80055ac:	e7eb      	b.n	8005586 <_printf_i+0x212>
 80055ae:	2500      	movs	r5, #0
 80055b0:	f104 0619 	add.w	r6, r4, #25
 80055b4:	e7f5      	b.n	80055a2 <_printf_i+0x22e>
 80055b6:	bf00      	nop
 80055b8:	080058d9 	.word	0x080058d9
 80055bc:	080058ea 	.word	0x080058ea

080055c0 <_sbrk_r>:
 80055c0:	b538      	push	{r3, r4, r5, lr}
 80055c2:	4d06      	ldr	r5, [pc, #24]	; (80055dc <_sbrk_r+0x1c>)
 80055c4:	2300      	movs	r3, #0
 80055c6:	4604      	mov	r4, r0
 80055c8:	4608      	mov	r0, r1
 80055ca:	602b      	str	r3, [r5, #0]
 80055cc:	f7fb fcc8 	bl	8000f60 <_sbrk>
 80055d0:	1c43      	adds	r3, r0, #1
 80055d2:	d102      	bne.n	80055da <_sbrk_r+0x1a>
 80055d4:	682b      	ldr	r3, [r5, #0]
 80055d6:	b103      	cbz	r3, 80055da <_sbrk_r+0x1a>
 80055d8:	6023      	str	r3, [r4, #0]
 80055da:	bd38      	pop	{r3, r4, r5, pc}
 80055dc:	20000318 	.word	0x20000318

080055e0 <__sread>:
 80055e0:	b510      	push	{r4, lr}
 80055e2:	460c      	mov	r4, r1
 80055e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055e8:	f000 f8a0 	bl	800572c <_read_r>
 80055ec:	2800      	cmp	r0, #0
 80055ee:	bfab      	itete	ge
 80055f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80055f2:	89a3      	ldrhlt	r3, [r4, #12]
 80055f4:	181b      	addge	r3, r3, r0
 80055f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80055fa:	bfac      	ite	ge
 80055fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80055fe:	81a3      	strhlt	r3, [r4, #12]
 8005600:	bd10      	pop	{r4, pc}

08005602 <__swrite>:
 8005602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005606:	461f      	mov	r7, r3
 8005608:	898b      	ldrh	r3, [r1, #12]
 800560a:	05db      	lsls	r3, r3, #23
 800560c:	4605      	mov	r5, r0
 800560e:	460c      	mov	r4, r1
 8005610:	4616      	mov	r6, r2
 8005612:	d505      	bpl.n	8005620 <__swrite+0x1e>
 8005614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005618:	2302      	movs	r3, #2
 800561a:	2200      	movs	r2, #0
 800561c:	f000 f868 	bl	80056f0 <_lseek_r>
 8005620:	89a3      	ldrh	r3, [r4, #12]
 8005622:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005626:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800562a:	81a3      	strh	r3, [r4, #12]
 800562c:	4632      	mov	r2, r6
 800562e:	463b      	mov	r3, r7
 8005630:	4628      	mov	r0, r5
 8005632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005636:	f000 b817 	b.w	8005668 <_write_r>

0800563a <__sseek>:
 800563a:	b510      	push	{r4, lr}
 800563c:	460c      	mov	r4, r1
 800563e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005642:	f000 f855 	bl	80056f0 <_lseek_r>
 8005646:	1c43      	adds	r3, r0, #1
 8005648:	89a3      	ldrh	r3, [r4, #12]
 800564a:	bf15      	itete	ne
 800564c:	6560      	strne	r0, [r4, #84]	; 0x54
 800564e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005652:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005656:	81a3      	strheq	r3, [r4, #12]
 8005658:	bf18      	it	ne
 800565a:	81a3      	strhne	r3, [r4, #12]
 800565c:	bd10      	pop	{r4, pc}

0800565e <__sclose>:
 800565e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005662:	f000 b813 	b.w	800568c <_close_r>
	...

08005668 <_write_r>:
 8005668:	b538      	push	{r3, r4, r5, lr}
 800566a:	4d07      	ldr	r5, [pc, #28]	; (8005688 <_write_r+0x20>)
 800566c:	4604      	mov	r4, r0
 800566e:	4608      	mov	r0, r1
 8005670:	4611      	mov	r1, r2
 8005672:	2200      	movs	r2, #0
 8005674:	602a      	str	r2, [r5, #0]
 8005676:	461a      	mov	r2, r3
 8005678:	f7fb fc21 	bl	8000ebe <_write>
 800567c:	1c43      	adds	r3, r0, #1
 800567e:	d102      	bne.n	8005686 <_write_r+0x1e>
 8005680:	682b      	ldr	r3, [r5, #0]
 8005682:	b103      	cbz	r3, 8005686 <_write_r+0x1e>
 8005684:	6023      	str	r3, [r4, #0]
 8005686:	bd38      	pop	{r3, r4, r5, pc}
 8005688:	20000318 	.word	0x20000318

0800568c <_close_r>:
 800568c:	b538      	push	{r3, r4, r5, lr}
 800568e:	4d06      	ldr	r5, [pc, #24]	; (80056a8 <_close_r+0x1c>)
 8005690:	2300      	movs	r3, #0
 8005692:	4604      	mov	r4, r0
 8005694:	4608      	mov	r0, r1
 8005696:	602b      	str	r3, [r5, #0]
 8005698:	f7fb fc2d 	bl	8000ef6 <_close>
 800569c:	1c43      	adds	r3, r0, #1
 800569e:	d102      	bne.n	80056a6 <_close_r+0x1a>
 80056a0:	682b      	ldr	r3, [r5, #0]
 80056a2:	b103      	cbz	r3, 80056a6 <_close_r+0x1a>
 80056a4:	6023      	str	r3, [r4, #0]
 80056a6:	bd38      	pop	{r3, r4, r5, pc}
 80056a8:	20000318 	.word	0x20000318

080056ac <_fstat_r>:
 80056ac:	b538      	push	{r3, r4, r5, lr}
 80056ae:	4d07      	ldr	r5, [pc, #28]	; (80056cc <_fstat_r+0x20>)
 80056b0:	2300      	movs	r3, #0
 80056b2:	4604      	mov	r4, r0
 80056b4:	4608      	mov	r0, r1
 80056b6:	4611      	mov	r1, r2
 80056b8:	602b      	str	r3, [r5, #0]
 80056ba:	f7fb fc28 	bl	8000f0e <_fstat>
 80056be:	1c43      	adds	r3, r0, #1
 80056c0:	d102      	bne.n	80056c8 <_fstat_r+0x1c>
 80056c2:	682b      	ldr	r3, [r5, #0]
 80056c4:	b103      	cbz	r3, 80056c8 <_fstat_r+0x1c>
 80056c6:	6023      	str	r3, [r4, #0]
 80056c8:	bd38      	pop	{r3, r4, r5, pc}
 80056ca:	bf00      	nop
 80056cc:	20000318 	.word	0x20000318

080056d0 <_isatty_r>:
 80056d0:	b538      	push	{r3, r4, r5, lr}
 80056d2:	4d06      	ldr	r5, [pc, #24]	; (80056ec <_isatty_r+0x1c>)
 80056d4:	2300      	movs	r3, #0
 80056d6:	4604      	mov	r4, r0
 80056d8:	4608      	mov	r0, r1
 80056da:	602b      	str	r3, [r5, #0]
 80056dc:	f7fb fc27 	bl	8000f2e <_isatty>
 80056e0:	1c43      	adds	r3, r0, #1
 80056e2:	d102      	bne.n	80056ea <_isatty_r+0x1a>
 80056e4:	682b      	ldr	r3, [r5, #0]
 80056e6:	b103      	cbz	r3, 80056ea <_isatty_r+0x1a>
 80056e8:	6023      	str	r3, [r4, #0]
 80056ea:	bd38      	pop	{r3, r4, r5, pc}
 80056ec:	20000318 	.word	0x20000318

080056f0 <_lseek_r>:
 80056f0:	b538      	push	{r3, r4, r5, lr}
 80056f2:	4d07      	ldr	r5, [pc, #28]	; (8005710 <_lseek_r+0x20>)
 80056f4:	4604      	mov	r4, r0
 80056f6:	4608      	mov	r0, r1
 80056f8:	4611      	mov	r1, r2
 80056fa:	2200      	movs	r2, #0
 80056fc:	602a      	str	r2, [r5, #0]
 80056fe:	461a      	mov	r2, r3
 8005700:	f7fb fc20 	bl	8000f44 <_lseek>
 8005704:	1c43      	adds	r3, r0, #1
 8005706:	d102      	bne.n	800570e <_lseek_r+0x1e>
 8005708:	682b      	ldr	r3, [r5, #0]
 800570a:	b103      	cbz	r3, 800570e <_lseek_r+0x1e>
 800570c:	6023      	str	r3, [r4, #0]
 800570e:	bd38      	pop	{r3, r4, r5, pc}
 8005710:	20000318 	.word	0x20000318

08005714 <__malloc_lock>:
 8005714:	4801      	ldr	r0, [pc, #4]	; (800571c <__malloc_lock+0x8>)
 8005716:	f7ff bb55 	b.w	8004dc4 <__retarget_lock_acquire_recursive>
 800571a:	bf00      	nop
 800571c:	20000310 	.word	0x20000310

08005720 <__malloc_unlock>:
 8005720:	4801      	ldr	r0, [pc, #4]	; (8005728 <__malloc_unlock+0x8>)
 8005722:	f7ff bb50 	b.w	8004dc6 <__retarget_lock_release_recursive>
 8005726:	bf00      	nop
 8005728:	20000310 	.word	0x20000310

0800572c <_read_r>:
 800572c:	b538      	push	{r3, r4, r5, lr}
 800572e:	4d07      	ldr	r5, [pc, #28]	; (800574c <_read_r+0x20>)
 8005730:	4604      	mov	r4, r0
 8005732:	4608      	mov	r0, r1
 8005734:	4611      	mov	r1, r2
 8005736:	2200      	movs	r2, #0
 8005738:	602a      	str	r2, [r5, #0]
 800573a:	461a      	mov	r2, r3
 800573c:	f7fb fba2 	bl	8000e84 <_read>
 8005740:	1c43      	adds	r3, r0, #1
 8005742:	d102      	bne.n	800574a <_read_r+0x1e>
 8005744:	682b      	ldr	r3, [r5, #0]
 8005746:	b103      	cbz	r3, 800574a <_read_r+0x1e>
 8005748:	6023      	str	r3, [r4, #0]
 800574a:	bd38      	pop	{r3, r4, r5, pc}
 800574c:	20000318 	.word	0x20000318

08005750 <_init>:
 8005750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005752:	bf00      	nop
 8005754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005756:	bc08      	pop	{r3}
 8005758:	469e      	mov	lr, r3
 800575a:	4770      	bx	lr

0800575c <_fini>:
 800575c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575e:	bf00      	nop
 8005760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005762:	bc08      	pop	{r3}
 8005764:	469e      	mov	lr, r3
 8005766:	4770      	bx	lr
