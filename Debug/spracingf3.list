
spracingf3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f0c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08005094  08005094  00015094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051ec  080051ec  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080051ec  080051ec  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051ec  080051ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051ec  080051ec  000151ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051f0  080051f0  000151f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080051f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000070  08005264  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  08005264  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b06  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027fb  00000000  00000000  00034ba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  000373a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f70  00000000  00000000  00038410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f737  00000000  00000000  00039380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000149d4  00000000  00000000  00058ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9cf7  00000000  00000000  0006d48b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00127182  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bbc  00000000  00000000  001271d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800507c 	.word	0x0800507c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	0800507c 	.word	0x0800507c

080001c8 <EXTI0_IRQHandler>:
	int val = gpio_read(pin.argi);
	printf("pin interrupt %ld %ld\n",pin.argi,val);
}

void EXTI0_IRQHandler(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80001cc:	2001      	movs	r0, #1
 80001ce:	f001 f9f7 	bl	80015c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80001d2:	bf00      	nop
 80001d4:	bd80      	pop	{r7, pc}

080001d6 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80001d6:	b580      	push	{r7, lr}
 80001d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80001da:	2002      	movs	r0, #2
 80001dc:	f001 f9f0 	bl	80015c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80001e0:	bf00      	nop
 80001e2:	bd80      	pop	{r7, pc}

080001e4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b084      	sub	sp, #16
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	80fb      	strh	r3, [r7, #6]
	int i;
//	task gpio_task = { .arg.argi = GPIO_Pin,
//					   .func = test_gpio_task};
//	sched_add_task(&gpio_task);
	for(i=0;i<NUM_PINS;i++)
 80001ee:	2300      	movs	r3, #0
 80001f0:	60fb      	str	r3, [r7, #12]
 80001f2:	e009      	b.n	8000208 <HAL_GPIO_EXTI_Callback+0x24>
	{
		if(gpio2hal_map[i] == GPIO_Pin)
 80001f4:	4a0f      	ldr	r2, [pc, #60]	; (8000234 <HAL_GPIO_EXTI_Callback+0x50>)
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001fc:	88fb      	ldrh	r3, [r7, #6]
 80001fe:	429a      	cmp	r2, r3
 8000200:	d006      	beq.n	8000210 <HAL_GPIO_EXTI_Callback+0x2c>
	for(i=0;i<NUM_PINS;i++)
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	3301      	adds	r3, #1
 8000206:	60fb      	str	r3, [r7, #12]
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	2b0a      	cmp	r3, #10
 800020c:	d9f2      	bls.n	80001f4 <HAL_GPIO_EXTI_Callback+0x10>
 800020e:	e000      	b.n	8000212 <HAL_GPIO_EXTI_Callback+0x2e>
		{
			break;
 8000210:	bf00      	nop
		}
	}
	if(pin_handlers[i] != 0)
 8000212:	4a09      	ldr	r2, [pc, #36]	; (8000238 <HAL_GPIO_EXTI_Callback+0x54>)
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800021a:	2b00      	cmp	r3, #0
 800021c:	d005      	beq.n	800022a <HAL_GPIO_EXTI_Callback+0x46>
	{
		pin_handlers[i](i);
 800021e:	4a06      	ldr	r2, [pc, #24]	; (8000238 <HAL_GPIO_EXTI_Callback+0x54>)
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000226:	68f8      	ldr	r0, [r7, #12]
 8000228:	4798      	blx	r3
	}
}
 800022a:	bf00      	nop
 800022c:	3710      	adds	r7, #16
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	080050f8 	.word	0x080050f8
 8000238:	2000008c 	.word	0x2000008c

0800023c <gpio_init>:

void gpio_init()
{
 800023c:	b480      	push	{r7}
 800023e:	b085      	sub	sp, #20
 8000240:	af00      	add	r7, sp, #0
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000242:	4b15      	ldr	r3, [pc, #84]	; (8000298 <gpio_init+0x5c>)
 8000244:	695b      	ldr	r3, [r3, #20]
 8000246:	4a14      	ldr	r2, [pc, #80]	; (8000298 <gpio_init+0x5c>)
 8000248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800024c:	6153      	str	r3, [r2, #20]
 800024e:	4b12      	ldr	r3, [pc, #72]	; (8000298 <gpio_init+0x5c>)
 8000250:	695b      	ldr	r3, [r3, #20]
 8000252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000256:	60fb      	str	r3, [r7, #12]
 8000258:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800025a:	4b0f      	ldr	r3, [pc, #60]	; (8000298 <gpio_init+0x5c>)
 800025c:	695b      	ldr	r3, [r3, #20]
 800025e:	4a0e      	ldr	r2, [pc, #56]	; (8000298 <gpio_init+0x5c>)
 8000260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000264:	6153      	str	r3, [r2, #20]
 8000266:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <gpio_init+0x5c>)
 8000268:	695b      	ldr	r3, [r3, #20]
 800026a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800026e:	60bb      	str	r3, [r7, #8]
 8000270:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000272:	4b09      	ldr	r3, [pc, #36]	; (8000298 <gpio_init+0x5c>)
 8000274:	695b      	ldr	r3, [r3, #20]
 8000276:	4a08      	ldr	r2, [pc, #32]	; (8000298 <gpio_init+0x5c>)
 8000278:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800027c:	6153      	str	r3, [r2, #20]
 800027e:	4b06      	ldr	r3, [pc, #24]	; (8000298 <gpio_init+0x5c>)
 8000280:	695b      	ldr	r3, [r3, #20]
 8000282:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000286:	607b      	str	r3, [r7, #4]
 8000288:	687b      	ldr	r3, [r7, #4]
}
 800028a:	bf00      	nop
 800028c:	3714      	adds	r7, #20
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	40021000 	.word	0x40021000

0800029c <gpio_read>:
{
	return NUM_PINS;
}

int gpio_read(int pin)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(wrappers[pin].port, wrappers[pin].pin);
 80002a4:	4a08      	ldr	r2, [pc, #32]	; (80002c8 <gpio_read+0x2c>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80002ac:	4906      	ldr	r1, [pc, #24]	; (80002c8 <gpio_read+0x2c>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	00db      	lsls	r3, r3, #3
 80002b2:	440b      	add	r3, r1
 80002b4:	889b      	ldrh	r3, [r3, #4]
 80002b6:	4619      	mov	r1, r3
 80002b8:	4610      	mov	r0, r2
 80002ba:	f001 f951 	bl	8001560 <HAL_GPIO_ReadPin>
 80002be:	4603      	mov	r3, r0
}
 80002c0:	4618      	mov	r0, r3
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	080050a0 	.word	0x080050a0

080002cc <gpio_write>:

void gpio_write(int pin, int value)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
 80002d4:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(wrappers[pin].port, wrappers[pin].pin,!!value);
 80002d6:	4a0b      	ldr	r2, [pc, #44]	; (8000304 <gpio_write+0x38>)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80002de:	4a09      	ldr	r2, [pc, #36]	; (8000304 <gpio_write+0x38>)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	00db      	lsls	r3, r3, #3
 80002e4:	4413      	add	r3, r2
 80002e6:	8899      	ldrh	r1, [r3, #4]
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	bf14      	ite	ne
 80002ee:	2301      	movne	r3, #1
 80002f0:	2300      	moveq	r3, #0
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	461a      	mov	r2, r3
 80002f6:	f001 f94b 	bl	8001590 <HAL_GPIO_WritePin>
}
 80002fa:	bf00      	nop
 80002fc:	3708      	adds	r7, #8
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	080050a0 	.word	0x080050a0

08000308 <gpio_dir>:

void gpio_dir(int pin, int value) //0 is in 1 is out
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b088      	sub	sp, #32
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	6039      	str	r1, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000312:	f107 030c 	add.w	r3, r7, #12
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	605a      	str	r2, [r3, #4]
 800031c:	609a      	str	r2, [r3, #8]
 800031e:	60da      	str	r2, [r3, #12]
 8000320:	611a      	str	r2, [r3, #16]
	//HAL_GPIO_DeInit(wrappers[pin].port, wrappers[pin].pin);
	GPIO_InitStruct.Pin = wrappers[pin].pin;
 8000322:	4a11      	ldr	r2, [pc, #68]	; (8000368 <gpio_dir+0x60>)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	00db      	lsls	r3, r3, #3
 8000328:	4413      	add	r3, r2
 800032a:	889b      	ldrh	r3, [r3, #4]
 800032c:	60fb      	str	r3, [r7, #12]

	if(value == 0)
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d104      	bne.n	800033e <gpio_dir+0x36>
	{
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000334:	2300      	movs	r3, #0
 8000336:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000338:	2300      	movs	r3, #0
 800033a:	617b      	str	r3, [r7, #20]
 800033c:	e005      	b.n	800034a <gpio_dir+0x42>
	}
	else
	{
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033e:	2301      	movs	r3, #1
 8000340:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000342:	2300      	movs	r3, #0
 8000344:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000346:	2303      	movs	r3, #3
 8000348:	61bb      	str	r3, [r7, #24]
	}
	HAL_GPIO_Init(wrappers[pin].port, &GPIO_InitStruct);
 800034a:	4a07      	ldr	r2, [pc, #28]	; (8000368 <gpio_dir+0x60>)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000352:	f107 020c 	add.w	r2, r7, #12
 8000356:	4611      	mov	r1, r2
 8000358:	4618      	mov	r0, r3
 800035a:	f000 ff87 	bl	800126c <HAL_GPIO_Init>
}
 800035e:	bf00      	nop
 8000360:	3720      	adds	r7, #32
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	080050a0 	.word	0x080050a0

0800036c <gpio_interrupt>:
}



void gpio_interrupt(int pin,void (*handler)(int))
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b088      	sub	sp, #32
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	6039      	str	r1, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000376:	f107 030c 	add.w	r3, r7, #12
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]
 8000384:	611a      	str	r2, [r3, #16]

	//HAL_GPIO_DeInit(wrappers[pin].port, wrappers[pin].pin);

	pin_handlers[pin] = handler;
 8000386:	491b      	ldr	r1, [pc, #108]	; (80003f4 <gpio_interrupt+0x88>)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	683a      	ldr	r2, [r7, #0]
 800038c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	GPIO_InitStruct.Pin = wrappers[pin].pin;
 8000390:	4a19      	ldr	r2, [pc, #100]	; (80003f8 <gpio_interrupt+0x8c>)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	00db      	lsls	r3, r3, #3
 8000396:	4413      	add	r3, r2
 8000398:	889b      	ldrh	r3, [r3, #4]
 800039a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800039c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80003a0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(wrappers[pin].port, &GPIO_InitStruct);
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <gpio_interrupt+0x8c>)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80003ae:	f107 020c 	add.w	r2, r7, #12
 80003b2:	4611      	mov	r1, r2
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 ff59 	bl	800126c <HAL_GPIO_Init>

	if(irq_nums[pin] > 0)
 80003ba:	4a10      	ldr	r2, [pc, #64]	; (80003fc <gpio_interrupt+0x90>)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	dd11      	ble.n	80003ea <gpio_interrupt+0x7e>
	{
		HAL_NVIC_SetPriority(irq_nums[pin], 0, 0);
 80003c6:	4a0d      	ldr	r2, [pc, #52]	; (80003fc <gpio_interrupt+0x90>)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ce:	b25b      	sxtb	r3, r3
 80003d0:	2200      	movs	r2, #0
 80003d2:	2100      	movs	r1, #0
 80003d4:	4618      	mov	r0, r3
 80003d6:	f000 ff12 	bl	80011fe <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(irq_nums[pin]);
 80003da:	4a08      	ldr	r2, [pc, #32]	; (80003fc <gpio_interrupt+0x90>)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003e2:	b25b      	sxtb	r3, r3
 80003e4:	4618      	mov	r0, r3
 80003e6:	f000 ff26 	bl	8001236 <HAL_NVIC_EnableIRQ>
	}
}
 80003ea:	bf00      	nop
 80003ec:	3720      	adds	r7, #32
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	2000008c 	.word	0x2000008c
 80003f8:	080050a0 	.word	0x080050a0
 80003fc:	08005124 	.word	0x08005124

08000400 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000408:	1d39      	adds	r1, r7, #4
 800040a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800040e:	2201      	movs	r2, #1
 8000410:	4803      	ldr	r0, [pc, #12]	; (8000420 <__io_putchar+0x20>)
 8000412:	f003 fcc9 	bl	8003da8 <HAL_UART_Transmit>

  return ch;
 8000416:	687b      	ldr	r3, [r7, #4]
}
 8000418:	4618      	mov	r0, r3
 800041a:	3708      	adds	r7, #8
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	200001b0 	.word	0x200001b0

08000424 <steering_cb>:

void steering_cb(int pin)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
	//printf("pin %d\n",pin);
}
 800042c:	bf00      	nop
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr

08000438 <hello_cb>:

void hello_cb(task_arg arg)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
	(void)arg.argi;
	printf("hello world\n");
 8000440:	4803      	ldr	r0, [pc, #12]	; (8000450 <hello_cb+0x18>)
 8000442:	f004 f9c3 	bl	80047cc <puts>
}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	08005094 	.word	0x08005094

08000454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800045a:	f000 fd8f 	bl	8000f7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045e:	f000 f857 	bl	8000510 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  sched_init();
 8000462:	f000 fa99 	bl	8000998 <sched_init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000466:	f000 fa6d 	bl	8000944 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800046a:	f000 fa3b 	bl	80008e4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800046e:	f000 f8a7 	bl	80005c0 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000472:	f000 f933 	bl	80006dc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000476:	f000 f9b3 	bl	80007e0 <MX_TIM4_Init>
  MX_TIM2_Init();
 800047a:	f000 f8e1 	bl	8000640 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  task next_task;
  volatile int delay;
  gpio_init();
 800047e:	f7ff fedd 	bl	800023c <gpio_init>
  gpio_dir(LED_PIN,1);
 8000482:	2101      	movs	r1, #1
 8000484:	2000      	movs	r0, #0
 8000486:	f7ff ff3f 	bl	8000308 <gpio_dir>

  gpio_dir(MOTOR_1,1);
 800048a:	2101      	movs	r1, #1
 800048c:	2005      	movs	r0, #5
 800048e:	f7ff ff3b 	bl	8000308 <gpio_dir>
  gpio_interrupt(THROTTLE,steering_cb);
 8000492:	491a      	ldr	r1, [pc, #104]	; (80004fc <main+0xa8>)
 8000494:	2003      	movs	r0, #3
 8000496:	f7ff ff69 	bl	800036c <gpio_interrupt>
  gpio_interrupt(STEERING,steering_cb);
 800049a:	4918      	ldr	r1, [pc, #96]	; (80004fc <main+0xa8>)
 800049c:	2002      	movs	r0, #2
 800049e:	f7ff ff65 	bl	800036c <gpio_interrupt>
  HAL_TIM_Base_Start(&htim2);
 80004a2:	4817      	ldr	r0, [pc, #92]	; (8000500 <main+0xac>)
 80004a4:	f002 fd10 	bl	8002ec8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 80004a8:	4816      	ldr	r0, [pc, #88]	; (8000504 <main+0xb0>)
 80004aa:	f002 fd0d 	bl	8002ec8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 80004ae:	4816      	ldr	r0, [pc, #88]	; (8000508 <main+0xb4>)
 80004b0:	f002 fd0a 	bl	8002ec8 <HAL_TIM_Base_Start>
  next_task.func = hello_cb;
 80004b4:	4b15      	ldr	r3, [pc, #84]	; (800050c <main+0xb8>)
 80004b6:	60fb      	str	r3, [r7, #12]
  sched_add_task(&next_task);
 80004b8:	f107 0308 	add.w	r3, r7, #8
 80004bc:	4618      	mov	r0, r3
 80004be:	f000 fa7b 	bl	80009b8 <sched_add_task>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	if(sched_get_task(&next_task))
 80004c2:	f107 0308 	add.w	r3, r7, #8
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 faa6 	bl	8000a18 <sched_get_task>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d003      	beq.n	80004da <main+0x86>
	{
		next_task.func(next_task.arg);
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	68b8      	ldr	r0, [r7, #8]
 80004d6:	4798      	blx	r3
 80004d8:	e7f3      	b.n	80004c2 <main+0x6e>
	}
	else
	{
		gpio_write(MOTOR_1,gpio_read(STEERING));
 80004da:	2002      	movs	r0, #2
 80004dc:	f7ff fede 	bl	800029c <gpio_read>
 80004e0:	4603      	mov	r3, r0
 80004e2:	4619      	mov	r1, r3
 80004e4:	2005      	movs	r0, #5
 80004e6:	f7ff fef1 	bl	80002cc <gpio_write>
		gpio_write(LED_PIN,gpio_read(STEERING));
 80004ea:	2002      	movs	r0, #2
 80004ec:	f7ff fed6 	bl	800029c <gpio_read>
 80004f0:	4603      	mov	r3, r0
 80004f2:	4619      	mov	r1, r3
 80004f4:	2000      	movs	r0, #0
 80004f6:	f7ff fee9 	bl	80002cc <gpio_write>
	if(sched_get_task(&next_task))
 80004fa:	e7e2      	b.n	80004c2 <main+0x6e>
 80004fc:	08000425 	.word	0x08000425
 8000500:	20000238 	.word	0x20000238
 8000504:	20000164 	.word	0x20000164
 8000508:	200000c4 	.word	0x200000c4
 800050c:	08000439 	.word	0x08000439

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b09e      	sub	sp, #120	; 0x78
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800051a:	2228      	movs	r2, #40	; 0x28
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f004 f8de 	bl	80046e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000534:	463b      	mov	r3, r7
 8000536:	223c      	movs	r2, #60	; 0x3c
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f004 f8d0 	bl	80046e0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000540:	2302      	movs	r3, #2
 8000542:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000544:	2301      	movs	r3, #1
 8000546:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000548:	2310      	movs	r3, #16
 800054a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054c:	2302      	movs	r3, #2
 800054e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000550:	2300      	movs	r3, #0
 8000552:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000554:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000558:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800055e:	4618      	mov	r0, r3
 8000560:	f001 f96c 	bl	800183c <HAL_RCC_OscConfig>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800056a:	f000 fa0f 	bl	800098c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056e:	230f      	movs	r3, #15
 8000570:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000572:	2302      	movs	r3, #2
 8000574:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800057a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800057e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000584:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000588:	2102      	movs	r1, #2
 800058a:	4618      	mov	r0, r3
 800058c:	f002 f85e 	bl	800264c <HAL_RCC_ClockConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000596:	f000 f9f9 	bl	800098c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800059a:	2321      	movs	r3, #33	; 0x21
 800059c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005a6:	463b      	mov	r3, r7
 80005a8:	4618      	mov	r0, r3
 80005aa:	f002 fa85 	bl	8002ab8 <HAL_RCCEx_PeriphCLKConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80005b4:	f000 f9ea 	bl	800098c <Error_Handler>
  }
}
 80005b8:	bf00      	nop
 80005ba:	3778      	adds	r7, #120	; 0x78
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c4:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <MX_I2C1_Init+0x74>)
 80005c6:	4a1c      	ldr	r2, [pc, #112]	; (8000638 <MX_I2C1_Init+0x78>)
 80005c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80005ca:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <MX_I2C1_Init+0x74>)
 80005cc:	4a1b      	ldr	r2, [pc, #108]	; (800063c <MX_I2C1_Init+0x7c>)
 80005ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <MX_I2C1_Init+0x74>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005d6:	4b17      	ldr	r3, [pc, #92]	; (8000634 <MX_I2C1_Init+0x74>)
 80005d8:	2201      	movs	r2, #1
 80005da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005dc:	4b15      	ldr	r3, [pc, #84]	; (8000634 <MX_I2C1_Init+0x74>)
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <MX_I2C1_Init+0x74>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <MX_I2C1_Init+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_I2C1_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <MX_I2C1_Init+0x74>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005fa:	480e      	ldr	r0, [pc, #56]	; (8000634 <MX_I2C1_Init+0x74>)
 80005fc:	f000 fff8 	bl	80015f0 <HAL_I2C_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000606:	f000 f9c1 	bl	800098c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800060a:	2100      	movs	r1, #0
 800060c:	4809      	ldr	r0, [pc, #36]	; (8000634 <MX_I2C1_Init+0x74>)
 800060e:	f001 f87e 	bl	800170e <HAL_I2CEx_ConfigAnalogFilter>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000618:	f000 f9b8 	bl	800098c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800061c:	2100      	movs	r1, #0
 800061e:	4805      	ldr	r0, [pc, #20]	; (8000634 <MX_I2C1_Init+0x74>)
 8000620:	f001 f8c0 	bl	80017a4 <HAL_I2CEx_ConfigDigitalFilter>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800062a:	f000 f9af 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000110 	.word	0x20000110
 8000638:	40005400 	.word	0x40005400
 800063c:	2000090e 	.word	0x2000090e

08000640 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000646:	f107 0310 	add.w	r3, r7, #16
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800065e:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <MX_TIM2_Init+0x98>)
 8000660:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000664:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 8000666:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <MX_TIM2_Init+0x98>)
 8000668:	2264      	movs	r2, #100	; 0x64
 800066a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800066c:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <MX_TIM2_Init+0x98>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000672:	4b19      	ldr	r3, [pc, #100]	; (80006d8 <MX_TIM2_Init+0x98>)
 8000674:	f04f 32ff 	mov.w	r2, #4294967295
 8000678:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <MX_TIM2_Init+0x98>)
 800067c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000680:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_TIM2_Init+0x98>)
 8000684:	2280      	movs	r2, #128	; 0x80
 8000686:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000688:	4813      	ldr	r0, [pc, #76]	; (80006d8 <MX_TIM2_Init+0x98>)
 800068a:	f002 fbc5 	bl	8002e18 <HAL_TIM_Base_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000694:	f000 f97a 	bl	800098c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800069e:	f107 0310 	add.w	r3, r7, #16
 80006a2:	4619      	mov	r1, r3
 80006a4:	480c      	ldr	r0, [pc, #48]	; (80006d8 <MX_TIM2_Init+0x98>)
 80006a6:	f002 fde7 	bl	8003278 <HAL_TIM_ConfigClockSource>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80006b0:	f000 f96c 	bl	800098c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	4619      	mov	r1, r3
 80006c0:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_TIM2_Init+0x98>)
 80006c2:	f003 faa3 	bl	8003c0c <HAL_TIMEx_MasterConfigSynchronization>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80006cc:	f000 f95e 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	3720      	adds	r7, #32
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000238 	.word	0x20000238

080006dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08e      	sub	sp, #56	; 0x38
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006fc:	463b      	mov	r3, r7
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]
 800070a:	615a      	str	r2, [r3, #20]
 800070c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800070e:	4b32      	ldr	r3, [pc, #200]	; (80007d8 <MX_TIM3_Init+0xfc>)
 8000710:	4a32      	ldr	r2, [pc, #200]	; (80007dc <MX_TIM3_Init+0x100>)
 8000712:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 8000714:	4b30      	ldr	r3, [pc, #192]	; (80007d8 <MX_TIM3_Init+0xfc>)
 8000716:	2240      	movs	r2, #64	; 0x40
 8000718:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071a:	4b2f      	ldr	r3, [pc, #188]	; (80007d8 <MX_TIM3_Init+0xfc>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000720:	4b2d      	ldr	r3, [pc, #180]	; (80007d8 <MX_TIM3_Init+0xfc>)
 8000722:	f242 7210 	movw	r2, #10000	; 0x2710
 8000726:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000728:	4b2b      	ldr	r3, [pc, #172]	; (80007d8 <MX_TIM3_Init+0xfc>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800072e:	4b2a      	ldr	r3, [pc, #168]	; (80007d8 <MX_TIM3_Init+0xfc>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000734:	4828      	ldr	r0, [pc, #160]	; (80007d8 <MX_TIM3_Init+0xfc>)
 8000736:	f002 fb6f 	bl	8002e18 <HAL_TIM_Base_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000740:	f000 f924 	bl	800098c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800074a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800074e:	4619      	mov	r1, r3
 8000750:	4821      	ldr	r0, [pc, #132]	; (80007d8 <MX_TIM3_Init+0xfc>)
 8000752:	f002 fd91 	bl	8003278 <HAL_TIM_ConfigClockSource>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800075c:	f000 f916 	bl	800098c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000760:	481d      	ldr	r0, [pc, #116]	; (80007d8 <MX_TIM3_Init+0xfc>)
 8000762:	f002 fc13 	bl	8002f8c <HAL_TIM_PWM_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800076c:	f000 f90e 	bl	800098c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000774:	2300      	movs	r3, #0
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000778:	f107 031c 	add.w	r3, r7, #28
 800077c:	4619      	mov	r1, r3
 800077e:	4816      	ldr	r0, [pc, #88]	; (80007d8 <MX_TIM3_Init+0xfc>)
 8000780:	f003 fa44 	bl	8003c0c <HAL_TIMEx_MasterConfigSynchronization>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800078a:	f000 f8ff 	bl	800098c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800078e:	2360      	movs	r3, #96	; 0x60
 8000790:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800079e:	463b      	mov	r3, r7
 80007a0:	2200      	movs	r2, #0
 80007a2:	4619      	mov	r1, r3
 80007a4:	480c      	ldr	r0, [pc, #48]	; (80007d8 <MX_TIM3_Init+0xfc>)
 80007a6:	f002 fc53 	bl	8003050 <HAL_TIM_PWM_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80007b0:	f000 f8ec 	bl	800098c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007b4:	463b      	mov	r3, r7
 80007b6:	2204      	movs	r2, #4
 80007b8:	4619      	mov	r1, r3
 80007ba:	4807      	ldr	r0, [pc, #28]	; (80007d8 <MX_TIM3_Init+0xfc>)
 80007bc:	f002 fc48 	bl	8003050 <HAL_TIM_PWM_ConfigChannel>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80007c6:	f000 f8e1 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007ca:	4803      	ldr	r0, [pc, #12]	; (80007d8 <MX_TIM3_Init+0xfc>)
 80007cc:	f000 fa2c 	bl	8000c28 <HAL_TIM_MspPostInit>

}
 80007d0:	bf00      	nop
 80007d2:	3738      	adds	r7, #56	; 0x38
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000164 	.word	0x20000164
 80007dc:	40000400 	.word	0x40000400

080007e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08e      	sub	sp, #56	; 0x38
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000800:	463b      	mov	r3, r7
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]
 800080e:	615a      	str	r2, [r3, #20]
 8000810:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000812:	4b32      	ldr	r3, [pc, #200]	; (80008dc <MX_TIM4_Init+0xfc>)
 8000814:	4a32      	ldr	r2, [pc, #200]	; (80008e0 <MX_TIM4_Init+0x100>)
 8000816:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5000;
 8000818:	4b30      	ldr	r3, [pc, #192]	; (80008dc <MX_TIM4_Init+0xfc>)
 800081a:	f241 3288 	movw	r2, #5000	; 0x1388
 800081e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000820:	4b2e      	ldr	r3, [pc, #184]	; (80008dc <MX_TIM4_Init+0xfc>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 8000826:	4b2d      	ldr	r3, [pc, #180]	; (80008dc <MX_TIM4_Init+0xfc>)
 8000828:	22ff      	movs	r2, #255	; 0xff
 800082a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800082c:	4b2b      	ldr	r3, [pc, #172]	; (80008dc <MX_TIM4_Init+0xfc>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000832:	4b2a      	ldr	r3, [pc, #168]	; (80008dc <MX_TIM4_Init+0xfc>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000838:	4828      	ldr	r0, [pc, #160]	; (80008dc <MX_TIM4_Init+0xfc>)
 800083a:	f002 faed 	bl	8002e18 <HAL_TIM_Base_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000844:	f000 f8a2 	bl	800098c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800084e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000852:	4619      	mov	r1, r3
 8000854:	4821      	ldr	r0, [pc, #132]	; (80008dc <MX_TIM4_Init+0xfc>)
 8000856:	f002 fd0f 	bl	8003278 <HAL_TIM_ConfigClockSource>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000860:	f000 f894 	bl	800098c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000864:	481d      	ldr	r0, [pc, #116]	; (80008dc <MX_TIM4_Init+0xfc>)
 8000866:	f002 fb91 	bl	8002f8c <HAL_TIM_PWM_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000870:	f000 f88c 	bl	800098c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000874:	2300      	movs	r3, #0
 8000876:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	4816      	ldr	r0, [pc, #88]	; (80008dc <MX_TIM4_Init+0xfc>)
 8000884:	f003 f9c2 	bl	8003c0c <HAL_TIMEx_MasterConfigSynchronization>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800088e:	f000 f87d 	bl	800098c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000892:	2360      	movs	r3, #96	; 0x60
 8000894:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008a2:	463b      	mov	r3, r7
 80008a4:	2200      	movs	r2, #0
 80008a6:	4619      	mov	r1, r3
 80008a8:	480c      	ldr	r0, [pc, #48]	; (80008dc <MX_TIM4_Init+0xfc>)
 80008aa:	f002 fbd1 	bl	8003050 <HAL_TIM_PWM_ConfigChannel>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80008b4:	f000 f86a 	bl	800098c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008b8:	463b      	mov	r3, r7
 80008ba:	2204      	movs	r2, #4
 80008bc:	4619      	mov	r1, r3
 80008be:	4807      	ldr	r0, [pc, #28]	; (80008dc <MX_TIM4_Init+0xfc>)
 80008c0:	f002 fbc6 	bl	8003050 <HAL_TIM_PWM_ConfigChannel>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80008ca:	f000 f85f 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80008ce:	4803      	ldr	r0, [pc, #12]	; (80008dc <MX_TIM4_Init+0xfc>)
 80008d0:	f000 f9aa 	bl	8000c28 <HAL_TIM_MspPostInit>

}
 80008d4:	bf00      	nop
 80008d6:	3738      	adds	r7, #56	; 0x38
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	200000c4 	.word	0x200000c4
 80008e0:	40000800 	.word	0x40000800

080008e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_USART1_UART_Init+0x58>)
 80008ea:	4a15      	ldr	r2, [pc, #84]	; (8000940 <MX_USART1_UART_Init+0x5c>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008ee:	4b13      	ldr	r3, [pc, #76]	; (800093c <MX_USART1_UART_Init+0x58>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_USART1_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_USART1_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_USART1_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_USART1_UART_Init+0x58>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_USART1_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_USART1_UART_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_USART1_UART_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_USART1_UART_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_USART1_UART_Init+0x58>)
 8000928:	f003 f9f0 	bl	8003d0c <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000932:	f000 f82b 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200001b0 	.word	0x200001b0
 8000940:	40013800 	.word	0x40013800

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_GPIO_Init+0x44>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	4a0e      	ldr	r2, [pc, #56]	; (8000988 <MX_GPIO_Init+0x44>)
 8000950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000954:	6153      	str	r3, [r2, #20]
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_GPIO_Init+0x44>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_GPIO_Init+0x44>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	4a08      	ldr	r2, [pc, #32]	; (8000988 <MX_GPIO_Init+0x44>)
 8000968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800096c:	6153      	str	r3, [r2, #20]
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_GPIO_Init+0x44>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]

}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	40021000 	.word	0x40021000

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	e7fe      	b.n	8000994 <Error_Handler+0x8>
	...

08000998 <sched_init>:
};

struct sched_t sched;

void sched_init()
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
	sched.start = 0;
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <sched_init+0x1c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	801a      	strh	r2, [r3, #0]
	sched.end = 1;
 80009a2:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <sched_init+0x1c>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	805a      	strh	r2, [r3, #2]
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	20000284 	.word	0x20000284

080009b8 <sched_add_task>:

int sched_add_task(task *t)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	if(sched.end == sched.start)
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <sched_add_task+0x5c>)
 80009c2:	885a      	ldrh	r2, [r3, #2]
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <sched_add_task+0x5c>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d101      	bne.n	80009d0 <sched_add_task+0x18>
	{
		return 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	e01a      	b.n	8000a06 <sched_add_task+0x4e>
	}
	sched.tasks[sched.end].arg = t->arg;
 80009d0:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <sched_add_task+0x5c>)
 80009d2:	885b      	ldrh	r3, [r3, #2]
 80009d4:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <sched_add_task+0x5c>)
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	4413      	add	r3, r2
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	6812      	ldr	r2, [r2, #0]
 80009de:	605a      	str	r2, [r3, #4]
	sched.tasks[sched.end].func = t->func;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <sched_add_task+0x5c>)
 80009e2:	885b      	ldrh	r3, [r3, #2]
 80009e4:	4618      	mov	r0, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	685a      	ldr	r2, [r3, #4]
 80009ea:	490a      	ldr	r1, [pc, #40]	; (8000a14 <sched_add_task+0x5c>)
 80009ec:	00c3      	lsls	r3, r0, #3
 80009ee:	440b      	add	r3, r1
 80009f0:	609a      	str	r2, [r3, #8]
	sched.end = (sched.end + 1) & (QUEUE_SIZE-1);
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <sched_add_task+0x5c>)
 80009f4:	885b      	ldrh	r3, [r3, #2]
 80009f6:	3301      	adds	r3, #1
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	f003 030f 	and.w	r3, r3, #15
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <sched_add_task+0x5c>)
 8000a02:	805a      	strh	r2, [r3, #2]
	return 1;
 8000a04:	2301      	movs	r3, #1
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	20000284 	.word	0x20000284

08000a18 <sched_get_task>:

int sched_get_task(task *t)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b087      	sub	sp, #28
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	uint32_t primask;
	if(sched.start+1 == sched.end)
 8000a20:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <sched_get_task+0x74>)
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	3301      	adds	r3, #1
 8000a26:	4a19      	ldr	r2, [pc, #100]	; (8000a8c <sched_get_task+0x74>)
 8000a28:	8852      	ldrh	r2, [r2, #2]
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d101      	bne.n	8000a32 <sched_get_task+0x1a>
	{
		return 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e026      	b.n	8000a80 <sched_get_task+0x68>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000a32:	f3ef 8310 	mrs	r3, PRIMASK
 8000a36:	60fb      	str	r3, [r7, #12]
  return(result);
 8000a38:	68fb      	ldr	r3, [r7, #12]
	}
	primask = __get_PRIMASK();
 8000a3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
}
 8000a3e:	bf00      	nop
	__disable_irq();

	sched.start = (sched.start+1) & (QUEUE_SIZE - 1);
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <sched_get_task+0x74>)
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	3301      	adds	r3, #1
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	f003 030f 	and.w	r3, r3, #15
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <sched_get_task+0x74>)
 8000a50:	801a      	strh	r2, [r3, #0]
	t->arg = sched.tasks[sched.start].arg;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <sched_get_task+0x74>)
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	490c      	ldr	r1, [pc, #48]	; (8000a8c <sched_get_task+0x74>)
 8000a5a:	00db      	lsls	r3, r3, #3
 8000a5c:	440b      	add	r3, r1
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	6013      	str	r3, [r2, #0]
	t->func = sched.tasks[sched.start].func;
 8000a62:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <sched_get_task+0x74>)
 8000a64:	881b      	ldrh	r3, [r3, #0]
 8000a66:	4a09      	ldr	r2, [pc, #36]	; (8000a8c <sched_get_task+0x74>)
 8000a68:	00db      	lsls	r3, r3, #3
 8000a6a:	4413      	add	r3, r2
 8000a6c:	689a      	ldr	r2, [r3, #8]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	f383 8810 	msr	PRIMASK, r3
}
 8000a7c:	bf00      	nop

	__set_PRIMASK(primask);
	return 1;
 8000a7e:	2301      	movs	r3, #1
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	371c      	adds	r7, #28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	20000284 	.word	0x20000284

08000a90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <HAL_MspInit+0x44>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	4a0e      	ldr	r2, [pc, #56]	; (8000ad4 <HAL_MspInit+0x44>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6193      	str	r3, [r2, #24]
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <HAL_MspInit+0x44>)
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <HAL_MspInit+0x44>)
 8000ab0:	69db      	ldr	r3, [r3, #28]
 8000ab2:	4a08      	ldr	r2, [pc, #32]	; (8000ad4 <HAL_MspInit+0x44>)
 8000ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab8:	61d3      	str	r3, [r2, #28]
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_MspInit+0x44>)
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40021000 	.word	0x40021000

08000ad8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a26      	ldr	r2, [pc, #152]	; (8000b90 <HAL_I2C_MspInit+0xb8>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d145      	bne.n	8000b86 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <HAL_I2C_MspInit+0xbc>)
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	4a25      	ldr	r2, [pc, #148]	; (8000b94 <HAL_I2C_MspInit+0xbc>)
 8000b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b04:	6153      	str	r3, [r2, #20]
 8000b06:	4b23      	ldr	r3, [pc, #140]	; (8000b94 <HAL_I2C_MspInit+0xbc>)
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <HAL_I2C_MspInit+0xbc>)
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	4a1f      	ldr	r2, [pc, #124]	; (8000b94 <HAL_I2C_MspInit+0xbc>)
 8000b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b1c:	6153      	str	r3, [r2, #20]
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <HAL_I2C_MspInit+0xbc>)
 8000b20:	695b      	ldr	r3, [r3, #20]
 8000b22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b30:	2312      	movs	r3, #18
 8000b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4a:	f000 fb8f 	bl	800126c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b4e:	2380      	movs	r3, #128	; 0x80
 8000b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b52:	2312      	movs	r3, #18
 8000b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b56:	2301      	movs	r3, #1
 8000b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b5e:	2304      	movs	r3, #4
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	480b      	ldr	r0, [pc, #44]	; (8000b98 <HAL_I2C_MspInit+0xc0>)
 8000b6a:	f000 fb7f 	bl	800126c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <HAL_I2C_MspInit+0xbc>)
 8000b70:	69db      	ldr	r3, [r3, #28]
 8000b72:	4a08      	ldr	r2, [pc, #32]	; (8000b94 <HAL_I2C_MspInit+0xbc>)
 8000b74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b78:	61d3      	str	r3, [r2, #28]
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_I2C_MspInit+0xbc>)
 8000b7c:	69db      	ldr	r3, [r3, #28]
 8000b7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b86:	bf00      	nop
 8000b88:	3728      	adds	r7, #40	; 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40005400 	.word	0x40005400
 8000b94:	40021000 	.word	0x40021000
 8000b98:	48000400 	.word	0x48000400

08000b9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b087      	sub	sp, #28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bac:	d10c      	bne.n	8000bc8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bae:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <HAL_TIM_Base_MspInit+0x80>)
 8000bb0:	69db      	ldr	r3, [r3, #28]
 8000bb2:	4a1a      	ldr	r2, [pc, #104]	; (8000c1c <HAL_TIM_Base_MspInit+0x80>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	61d3      	str	r3, [r2, #28]
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <HAL_TIM_Base_MspInit+0x80>)
 8000bbc:	69db      	ldr	r3, [r3, #28]
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000bc6:	e022      	b.n	8000c0e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a14      	ldr	r2, [pc, #80]	; (8000c20 <HAL_TIM_Base_MspInit+0x84>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d10c      	bne.n	8000bec <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bd2:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <HAL_TIM_Base_MspInit+0x80>)
 8000bd4:	69db      	ldr	r3, [r3, #28]
 8000bd6:	4a11      	ldr	r2, [pc, #68]	; (8000c1c <HAL_TIM_Base_MspInit+0x80>)
 8000bd8:	f043 0302 	orr.w	r3, r3, #2
 8000bdc:	61d3      	str	r3, [r2, #28]
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <HAL_TIM_Base_MspInit+0x80>)
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]
}
 8000bea:	e010      	b.n	8000c0e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0c      	ldr	r2, [pc, #48]	; (8000c24 <HAL_TIM_Base_MspInit+0x88>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d10b      	bne.n	8000c0e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <HAL_TIM_Base_MspInit+0x80>)
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	4a08      	ldr	r2, [pc, #32]	; (8000c1c <HAL_TIM_Base_MspInit+0x80>)
 8000bfc:	f043 0304 	orr.w	r3, r3, #4
 8000c00:	61d3      	str	r3, [r2, #28]
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_TIM_Base_MspInit+0x80>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
}
 8000c0e:	bf00      	nop
 8000c10:	371c      	adds	r7, #28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	40000400 	.word	0x40000400
 8000c24:	40000800 	.word	0x40000800

08000c28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	; 0x28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a23      	ldr	r2, [pc, #140]	; (8000cd4 <HAL_TIM_MspPostInit+0xac>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d11d      	bne.n	8000c86 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	4b23      	ldr	r3, [pc, #140]	; (8000cd8 <HAL_TIM_MspPostInit+0xb0>)
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	4a22      	ldr	r2, [pc, #136]	; (8000cd8 <HAL_TIM_MspPostInit+0xb0>)
 8000c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c54:	6153      	str	r3, [r2, #20]
 8000c56:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <HAL_TIM_MspPostInit+0xb0>)
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c62:	23c0      	movs	r3, #192	; 0xc0
 8000c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c72:	2302      	movs	r3, #2
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c80:	f000 faf4 	bl	800126c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000c84:	e022      	b.n	8000ccc <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM4)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a14      	ldr	r2, [pc, #80]	; (8000cdc <HAL_TIM_MspPostInit+0xb4>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d11d      	bne.n	8000ccc <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <HAL_TIM_MspPostInit+0xb0>)
 8000c92:	695b      	ldr	r3, [r3, #20]
 8000c94:	4a10      	ldr	r2, [pc, #64]	; (8000cd8 <HAL_TIM_MspPostInit+0xb0>)
 8000c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9a:	6153      	str	r3, [r2, #20]
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <HAL_TIM_MspPostInit+0xb0>)
 8000c9e:	695b      	ldr	r3, [r3, #20]
 8000ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ca8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8000cba:	230a      	movs	r3, #10
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc8:	f000 fad0 	bl	800126c <HAL_GPIO_Init>
}
 8000ccc:	bf00      	nop
 8000cce:	3728      	adds	r7, #40	; 0x28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40000400 	.word	0x40000400
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40000800 	.word	0x40000800

08000ce0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a18      	ldr	r2, [pc, #96]	; (8000d60 <HAL_UART_MspInit+0x80>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d129      	bne.n	8000d56 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d02:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <HAL_UART_MspInit+0x84>)
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	4a17      	ldr	r2, [pc, #92]	; (8000d64 <HAL_UART_MspInit+0x84>)
 8000d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d0c:	6193      	str	r3, [r2, #24]
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <HAL_UART_MspInit+0x84>)
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_UART_MspInit+0x84>)
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	4a11      	ldr	r2, [pc, #68]	; (8000d64 <HAL_UART_MspInit+0x84>)
 8000d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d24:	6153      	str	r3, [r2, #20]
 8000d26:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <HAL_UART_MspInit+0x84>)
 8000d28:	695b      	ldr	r3, [r3, #20]
 8000d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d32:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d44:	2307      	movs	r3, #7
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d52:	f000 fa8b 	bl	800126c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d56:	bf00      	nop
 8000d58:	3728      	adds	r7, #40	; 0x28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40013800 	.word	0x40013800
 8000d64:	40021000 	.word	0x40021000

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <NMI_Handler+0x4>

08000d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db4:	f000 f928 	bl	8001008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	e00a      	b.n	8000de4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dce:	f3af 8000 	nop.w
 8000dd2:	4601      	mov	r1, r0
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	1c5a      	adds	r2, r3, #1
 8000dd8:	60ba      	str	r2, [r7, #8]
 8000dda:	b2ca      	uxtb	r2, r1
 8000ddc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	3301      	adds	r3, #1
 8000de2:	617b      	str	r3, [r7, #20]
 8000de4:	697a      	ldr	r2, [r7, #20]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	dbf0      	blt.n	8000dce <_read+0x12>
	}

return len;
 8000dec:	687b      	ldr	r3, [r7, #4]
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b086      	sub	sp, #24
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	60f8      	str	r0, [r7, #12]
 8000dfe:	60b9      	str	r1, [r7, #8]
 8000e00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
 8000e06:	e009      	b.n	8000e1c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	1c5a      	adds	r2, r3, #1
 8000e0c:	60ba      	str	r2, [r7, #8]
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff faf5 	bl	8000400 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	697a      	ldr	r2, [r7, #20]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	dbf1      	blt.n	8000e08 <_write+0x12>
	}
	return len;
 8000e24:	687b      	ldr	r3, [r7, #4]
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <_close>:

int _close(int file)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
	return -1;
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
 8000e4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e56:	605a      	str	r2, [r3, #4]
	return 0;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <_isatty>:

int _isatty(int file)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
	return 1;
 8000e6e:	2301      	movs	r3, #1
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
	return 0;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
	...

08000e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea0:	4a14      	ldr	r2, [pc, #80]	; (8000ef4 <_sbrk+0x5c>)
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <_sbrk+0x60>)
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eac:	4b13      	ldr	r3, [pc, #76]	; (8000efc <_sbrk+0x64>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d102      	bne.n	8000eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <_sbrk+0x64>)
 8000eb6:	4a12      	ldr	r2, [pc, #72]	; (8000f00 <_sbrk+0x68>)
 8000eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <_sbrk+0x64>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d207      	bcs.n	8000ed8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec8:	f003 fbe0 	bl	800468c <__errno>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	220c      	movs	r2, #12
 8000ed0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed6:	e009      	b.n	8000eec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <_sbrk+0x64>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ede:	4b07      	ldr	r3, [pc, #28]	; (8000efc <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	4a05      	ldr	r2, [pc, #20]	; (8000efc <_sbrk+0x64>)
 8000ee8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eea:	68fb      	ldr	r3, [r7, #12]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20008000 	.word	0x20008000
 8000ef8:	00000400 	.word	0x00000400
 8000efc:	200000b8 	.word	0x200000b8
 8000f00:	20000320 	.word	0x20000320

08000f04 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <SystemInit+0x20>)
 8000f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f0e:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <SystemInit+0x20>)
 8000f10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f60 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f2c:	f7ff ffea 	bl	8000f04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f30:	480c      	ldr	r0, [pc, #48]	; (8000f64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f32:	490d      	ldr	r1, [pc, #52]	; (8000f68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f34:	4a0d      	ldr	r2, [pc, #52]	; (8000f6c <LoopForever+0xe>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f38:	e002      	b.n	8000f40 <LoopCopyDataInit>

08000f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3e:	3304      	adds	r3, #4

08000f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f44:	d3f9      	bcc.n	8000f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f46:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f48:	4c0a      	ldr	r4, [pc, #40]	; (8000f74 <LoopForever+0x16>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f4c:	e001      	b.n	8000f52 <LoopFillZerobss>

08000f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f50:	3204      	adds	r2, #4

08000f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f54:	d3fb      	bcc.n	8000f4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f56:	f003 fb9f 	bl	8004698 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f5a:	f7ff fa7b 	bl	8000454 <main>

08000f5e <LoopForever>:

LoopForever:
    b LoopForever
 8000f5e:	e7fe      	b.n	8000f5e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f60:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f68:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f6c:	080051f4 	.word	0x080051f4
  ldr r2, =_sbss
 8000f70:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f74:	2000031c 	.word	0x2000031c

08000f78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f78:	e7fe      	b.n	8000f78 <ADC1_2_IRQHandler>
	...

08000f7c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <HAL_Init+0x28>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <HAL_Init+0x28>)
 8000f86:	f043 0310 	orr.w	r3, r3, #16
 8000f8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f8c:	2003      	movs	r0, #3
 8000f8e:	f000 f92b 	bl	80011e8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f92:	2000      	movs	r0, #0
 8000f94:	f000 f808 	bl	8000fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f98:	f7ff fd7a 	bl	8000a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40022000 	.word	0x40022000

08000fa8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <HAL_InitTick+0x54>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b12      	ldr	r3, [pc, #72]	; (8001000 <HAL_InitTick+0x58>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 f943 	bl	8001252 <HAL_SYSTICK_Config>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00e      	b.n	8000ff4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b0f      	cmp	r3, #15
 8000fda:	d80a      	bhi.n	8000ff2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe4:	f000 f90b 	bl	80011fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe8:	4a06      	ldr	r2, [pc, #24]	; (8001004 <HAL_InitTick+0x5c>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e000      	b.n	8000ff4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000000 	.word	0x20000000
 8001000:	20000008 	.word	0x20000008
 8001004:	20000004 	.word	0x20000004

08001008 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_IncTick+0x20>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_IncTick+0x24>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4413      	add	r3, r2
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <HAL_IncTick+0x24>)
 800101a:	6013      	str	r3, [r2, #0]
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000008 	.word	0x20000008
 800102c:	20000308 	.word	0x20000308

08001030 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return uwTick;  
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <HAL_GetTick+0x14>)
 8001036:	681b      	ldr	r3, [r3, #0]
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000308 	.word	0x20000308

08001048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001064:	4013      	ands	r3, r2
 8001066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107a:	4a04      	ldr	r2, [pc, #16]	; (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	60d3      	str	r3, [r2, #12]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	f003 0307 	and.w	r3, r3, #7
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	db0b      	blt.n	80010d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f003 021f 	and.w	r2, r3, #31
 80010c4:	4907      	ldr	r1, [pc, #28]	; (80010e4 <__NVIC_EnableIRQ+0x38>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	095b      	lsrs	r3, r3, #5
 80010cc:	2001      	movs	r0, #1
 80010ce:	fa00 f202 	lsl.w	r2, r0, r2
 80010d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000e100 	.word	0xe000e100

080010e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	db0a      	blt.n	8001112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	490c      	ldr	r1, [pc, #48]	; (8001134 <__NVIC_SetPriority+0x4c>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	0112      	lsls	r2, r2, #4
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	440b      	add	r3, r1
 800110c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001110:	e00a      	b.n	8001128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4908      	ldr	r1, [pc, #32]	; (8001138 <__NVIC_SetPriority+0x50>)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	3b04      	subs	r3, #4
 8001120:	0112      	lsls	r2, r2, #4
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	440b      	add	r3, r1
 8001126:	761a      	strb	r2, [r3, #24]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000e100 	.word	0xe000e100
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f1c3 0307 	rsb	r3, r3, #7
 8001156:	2b04      	cmp	r3, #4
 8001158:	bf28      	it	cs
 800115a:	2304      	movcs	r3, #4
 800115c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3304      	adds	r3, #4
 8001162:	2b06      	cmp	r3, #6
 8001164:	d902      	bls.n	800116c <NVIC_EncodePriority+0x30>
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3b03      	subs	r3, #3
 800116a:	e000      	b.n	800116e <NVIC_EncodePriority+0x32>
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	f04f 32ff 	mov.w	r2, #4294967295
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43da      	mvns	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	401a      	ands	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001184:	f04f 31ff 	mov.w	r1, #4294967295
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	43d9      	mvns	r1, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	4313      	orrs	r3, r2
         );
}
 8001196:	4618      	mov	r0, r3
 8001198:	3724      	adds	r7, #36	; 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b4:	d301      	bcc.n	80011ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00f      	b.n	80011da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ba:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <SysTick_Config+0x40>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c2:	210f      	movs	r1, #15
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295
 80011c8:	f7ff ff8e 	bl	80010e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <SysTick_Config+0x40>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d2:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <SysTick_Config+0x40>)
 80011d4:	2207      	movs	r2, #7
 80011d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	e000e010 	.word	0xe000e010

080011e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ff29 	bl	8001048 <__NVIC_SetPriorityGrouping>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
 800120a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001210:	f7ff ff3e 	bl	8001090 <__NVIC_GetPriorityGrouping>
 8001214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	68b9      	ldr	r1, [r7, #8]
 800121a:	6978      	ldr	r0, [r7, #20]
 800121c:	f7ff ff8e 	bl	800113c <NVIC_EncodePriority>
 8001220:	4602      	mov	r2, r0
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff5d 	bl	80010e8 <__NVIC_SetPriority>
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff31 	bl	80010ac <__NVIC_EnableIRQ>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff ffa2 	bl	80011a4 <SysTick_Config>
 8001260:	4603      	mov	r3, r0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800126c:	b480      	push	{r7}
 800126e:	b087      	sub	sp, #28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800127a:	e154      	b.n	8001526 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	2101      	movs	r1, #1
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	fa01 f303 	lsl.w	r3, r1, r3
 8001288:	4013      	ands	r3, r2
 800128a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 8146 	beq.w	8001520 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0303 	and.w	r3, r3, #3
 800129c:	2b01      	cmp	r3, #1
 800129e:	d005      	beq.n	80012ac <HAL_GPIO_Init+0x40>
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d130      	bne.n	800130e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2203      	movs	r2, #3
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	68da      	ldr	r2, [r3, #12]
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012e2:	2201      	movs	r2, #1
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4013      	ands	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	091b      	lsrs	r3, r3, #4
 80012f8:	f003 0201 	and.w	r2, r3, #1
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	2b03      	cmp	r3, #3
 8001318:	d017      	beq.n	800134a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	2203      	movs	r2, #3
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	689a      	ldr	r2, [r3, #8]
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	4313      	orrs	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f003 0303 	and.w	r3, r3, #3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d123      	bne.n	800139e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	08da      	lsrs	r2, r3, #3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3208      	adds	r2, #8
 800135e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001362:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	220f      	movs	r2, #15
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	691a      	ldr	r2, [r3, #16]
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	f003 0307 	and.w	r3, r3, #7
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	08da      	lsrs	r2, r3, #3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3208      	adds	r2, #8
 8001398:	6939      	ldr	r1, [r7, #16]
 800139a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	2203      	movs	r2, #3
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f003 0203 	and.w	r2, r3, #3
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 80a0 	beq.w	8001520 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e0:	4b58      	ldr	r3, [pc, #352]	; (8001544 <HAL_GPIO_Init+0x2d8>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	4a57      	ldr	r2, [pc, #348]	; (8001544 <HAL_GPIO_Init+0x2d8>)
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	6193      	str	r3, [r2, #24]
 80013ec:	4b55      	ldr	r3, [pc, #340]	; (8001544 <HAL_GPIO_Init+0x2d8>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013f8:	4a53      	ldr	r2, [pc, #332]	; (8001548 <HAL_GPIO_Init+0x2dc>)
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	089b      	lsrs	r3, r3, #2
 80013fe:	3302      	adds	r3, #2
 8001400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001404:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	f003 0303 	and.w	r3, r3, #3
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	220f      	movs	r2, #15
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001422:	d019      	beq.n	8001458 <HAL_GPIO_Init+0x1ec>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a49      	ldr	r2, [pc, #292]	; (800154c <HAL_GPIO_Init+0x2e0>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d013      	beq.n	8001454 <HAL_GPIO_Init+0x1e8>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a48      	ldr	r2, [pc, #288]	; (8001550 <HAL_GPIO_Init+0x2e4>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d00d      	beq.n	8001450 <HAL_GPIO_Init+0x1e4>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a47      	ldr	r2, [pc, #284]	; (8001554 <HAL_GPIO_Init+0x2e8>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d007      	beq.n	800144c <HAL_GPIO_Init+0x1e0>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a46      	ldr	r2, [pc, #280]	; (8001558 <HAL_GPIO_Init+0x2ec>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d101      	bne.n	8001448 <HAL_GPIO_Init+0x1dc>
 8001444:	2304      	movs	r3, #4
 8001446:	e008      	b.n	800145a <HAL_GPIO_Init+0x1ee>
 8001448:	2305      	movs	r3, #5
 800144a:	e006      	b.n	800145a <HAL_GPIO_Init+0x1ee>
 800144c:	2303      	movs	r3, #3
 800144e:	e004      	b.n	800145a <HAL_GPIO_Init+0x1ee>
 8001450:	2302      	movs	r3, #2
 8001452:	e002      	b.n	800145a <HAL_GPIO_Init+0x1ee>
 8001454:	2301      	movs	r3, #1
 8001456:	e000      	b.n	800145a <HAL_GPIO_Init+0x1ee>
 8001458:	2300      	movs	r3, #0
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	f002 0203 	and.w	r2, r2, #3
 8001460:	0092      	lsls	r2, r2, #2
 8001462:	4093      	lsls	r3, r2
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4313      	orrs	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800146a:	4937      	ldr	r1, [pc, #220]	; (8001548 <HAL_GPIO_Init+0x2dc>)
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	089b      	lsrs	r3, r3, #2
 8001470:	3302      	adds	r3, #2
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001478:	4b38      	ldr	r3, [pc, #224]	; (800155c <HAL_GPIO_Init+0x2f0>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	43db      	mvns	r3, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800149c:	4a2f      	ldr	r2, [pc, #188]	; (800155c <HAL_GPIO_Init+0x2f0>)
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014a2:	4b2e      	ldr	r3, [pc, #184]	; (800155c <HAL_GPIO_Init+0x2f0>)
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	43db      	mvns	r3, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014c6:	4a25      	ldr	r2, [pc, #148]	; (800155c <HAL_GPIO_Init+0x2f0>)
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014cc:	4b23      	ldr	r3, [pc, #140]	; (800155c <HAL_GPIO_Init+0x2f0>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	43db      	mvns	r3, r3
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4013      	ands	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d003      	beq.n	80014f0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014f0:	4a1a      	ldr	r2, [pc, #104]	; (800155c <HAL_GPIO_Init+0x2f0>)
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014f6:	4b19      	ldr	r3, [pc, #100]	; (800155c <HAL_GPIO_Init+0x2f0>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	43db      	mvns	r3, r3
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	4013      	ands	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4313      	orrs	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800151a:	4a10      	ldr	r2, [pc, #64]	; (800155c <HAL_GPIO_Init+0x2f0>)
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	3301      	adds	r3, #1
 8001524:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	fa22 f303 	lsr.w	r3, r2, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	f47f aea3 	bne.w	800127c <HAL_GPIO_Init+0x10>
  }
}
 8001536:	bf00      	nop
 8001538:	bf00      	nop
 800153a:	371c      	adds	r7, #28
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	40021000 	.word	0x40021000
 8001548:	40010000 	.word	0x40010000
 800154c:	48000400 	.word	0x48000400
 8001550:	48000800 	.word	0x48000800
 8001554:	48000c00 	.word	0x48000c00
 8001558:	48001000 	.word	0x48001000
 800155c:	40010400 	.word	0x40010400

08001560 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	691a      	ldr	r2, [r3, #16]
 8001570:	887b      	ldrh	r3, [r7, #2]
 8001572:	4013      	ands	r3, r2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d002      	beq.n	800157e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001578:	2301      	movs	r3, #1
 800157a:	73fb      	strb	r3, [r7, #15]
 800157c:	e001      	b.n	8001582 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001582:	7bfb      	ldrb	r3, [r7, #15]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	807b      	strh	r3, [r7, #2]
 800159c:	4613      	mov	r3, r2
 800159e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015a0:	787b      	ldrb	r3, [r7, #1]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015a6:	887a      	ldrh	r2, [r7, #2]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015ac:	e002      	b.n	80015b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015ae:	887a      	ldrh	r2, [r7, #2]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015ca:	4b08      	ldr	r3, [pc, #32]	; (80015ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015cc:	695a      	ldr	r2, [r3, #20]
 80015ce:	88fb      	ldrh	r3, [r7, #6]
 80015d0:	4013      	ands	r3, r2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d006      	beq.n	80015e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015d6:	4a05      	ldr	r2, [pc, #20]	; (80015ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015d8:	88fb      	ldrh	r3, [r7, #6]
 80015da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015dc:	88fb      	ldrh	r3, [r7, #6]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe fe00 	bl	80001e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40010400 	.word	0x40010400

080015f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e081      	b.n	8001706 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d106      	bne.n	800161c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff fa5e 	bl	8000ad8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2224      	movs	r2, #36	; 0x24
 8001620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0201 	bic.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001640:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001650:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d107      	bne.n	800166a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	e006      	b.n	8001678 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001676:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	2b02      	cmp	r3, #2
 800167e:	d104      	bne.n	800168a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001688:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001698:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800169c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68da      	ldr	r2, [r3, #12]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691a      	ldr	r2, [r3, #16]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69d9      	ldr	r1, [r3, #28]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a1a      	ldr	r2, [r3, #32]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f042 0201 	orr.w	r2, r2, #1
 80016e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2220      	movs	r2, #32
 80016f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b20      	cmp	r3, #32
 8001722:	d138      	bne.n	8001796 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800172a:	2b01      	cmp	r3, #1
 800172c:	d101      	bne.n	8001732 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800172e:	2302      	movs	r3, #2
 8001730:	e032      	b.n	8001798 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2224      	movs	r2, #36	; 0x24
 800173e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0201 	bic.w	r2, r2, #1
 8001750:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001760:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6819      	ldr	r1, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f042 0201 	orr.w	r2, r2, #1
 8001780:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2220      	movs	r2, #32
 8001786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	e000      	b.n	8001798 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001796:	2302      	movs	r3, #2
  }
}
 8001798:	4618      	mov	r0, r3
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b20      	cmp	r3, #32
 80017b8:	d139      	bne.n	800182e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d101      	bne.n	80017c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80017c4:	2302      	movs	r3, #2
 80017c6:	e033      	b.n	8001830 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2224      	movs	r2, #36	; 0x24
 80017d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 0201 	bic.w	r2, r2, #1
 80017e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	021b      	lsls	r3, r3, #8
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	4313      	orrs	r3, r2
 8001800:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f042 0201 	orr.w	r2, r2, #1
 8001818:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2220      	movs	r2, #32
 800181e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	e000      	b.n	8001830 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800182e:	2302      	movs	r3, #2
  }
}
 8001830:	4618      	mov	r0, r3
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001842:	af00      	add	r7, sp, #0
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d102      	bne.n	8001856 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	f000 bef4 	b.w	800263e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 816a 	beq.w	8001b3a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001866:	4bb3      	ldr	r3, [pc, #716]	; (8001b34 <HAL_RCC_OscConfig+0x2f8>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	2b04      	cmp	r3, #4
 8001870:	d00c      	beq.n	800188c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001872:	4bb0      	ldr	r3, [pc, #704]	; (8001b34 <HAL_RCC_OscConfig+0x2f8>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 030c 	and.w	r3, r3, #12
 800187a:	2b08      	cmp	r3, #8
 800187c:	d159      	bne.n	8001932 <HAL_RCC_OscConfig+0xf6>
 800187e:	4bad      	ldr	r3, [pc, #692]	; (8001b34 <HAL_RCC_OscConfig+0x2f8>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800188a:	d152      	bne.n	8001932 <HAL_RCC_OscConfig+0xf6>
 800188c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001890:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001894:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001898:	fa93 f3a3 	rbit	r3, r3
 800189c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018a0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a4:	fab3 f383 	clz	r3, r3
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	095b      	lsrs	r3, r3, #5
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d102      	bne.n	80018be <HAL_RCC_OscConfig+0x82>
 80018b8:	4b9e      	ldr	r3, [pc, #632]	; (8001b34 <HAL_RCC_OscConfig+0x2f8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	e015      	b.n	80018ea <HAL_RCC_OscConfig+0xae>
 80018be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018c2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80018ca:	fa93 f3a3 	rbit	r3, r3
 80018ce:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80018d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018d6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80018da:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80018de:	fa93 f3a3 	rbit	r3, r3
 80018e2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80018e6:	4b93      	ldr	r3, [pc, #588]	; (8001b34 <HAL_RCC_OscConfig+0x2f8>)
 80018e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018ee:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80018f2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80018f6:	fa92 f2a2 	rbit	r2, r2
 80018fa:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80018fe:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001902:	fab2 f282 	clz	r2, r2
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	f042 0220 	orr.w	r2, r2, #32
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	f002 021f 	and.w	r2, r2, #31
 8001912:	2101      	movs	r1, #1
 8001914:	fa01 f202 	lsl.w	r2, r1, r2
 8001918:	4013      	ands	r3, r2
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 810c 	beq.w	8001b38 <HAL_RCC_OscConfig+0x2fc>
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f040 8106 	bne.w	8001b38 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	f000 be86 	b.w	800263e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800193c:	d106      	bne.n	800194c <HAL_RCC_OscConfig+0x110>
 800193e:	4b7d      	ldr	r3, [pc, #500]	; (8001b34 <HAL_RCC_OscConfig+0x2f8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a7c      	ldr	r2, [pc, #496]	; (8001b34 <HAL_RCC_OscConfig+0x2f8>)
 8001944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	e030      	b.n	80019ae <HAL_RCC_OscConfig+0x172>
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10c      	bne.n	8001970 <HAL_RCC_OscConfig+0x134>
 8001956:	4b77      	ldr	r3, [pc, #476]	; (8001b34 <HAL_RCC_OscConfig+0x2f8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a76      	ldr	r2, [pc, #472]	; (8001b34 <HAL_RCC_OscConfig+0x2f8>)
 800195c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	4b74      	ldr	r3, [pc, #464]	; (8001b34 <HAL_RCC_OscConfig+0x2f8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a73      	ldr	r2, [pc, #460]	; (8001b34 <HAL_RCC_OscConfig+0x2f8>)
 8001968:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	e01e      	b.n	80019ae <HAL_RCC_OscConfig+0x172>
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800197a:	d10c      	bne.n	8001996 <HAL_RCC_OscConfig+0x15a>
 800197c:	4b6d      	ldr	r3, [pc, #436]	; (8001b34 <HAL_RCC_OscConfig+0x2f8>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a6c      	ldr	r2, [pc, #432]	; (8001b34 <HAL_RCC_OscConfig+0x2f8>)
 8001982:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	4b6a      	ldr	r3, [pc, #424]	; (8001b34 <HAL_RCC_OscConfig+0x2f8>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a69      	ldr	r2, [pc, #420]	; (8001b34 <HAL_RCC_OscConfig+0x2f8>)
 800198e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	e00b      	b.n	80019ae <HAL_RCC_OscConfig+0x172>
 8001996:	4b67      	ldr	r3, [pc, #412]	; (8001b34 <HAL_RCC_OscConfig+0x2f8>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a66      	ldr	r2, [pc, #408]	; (8001b34 <HAL_RCC_OscConfig+0x2f8>)
 800199c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	4b64      	ldr	r3, [pc, #400]	; (8001b34 <HAL_RCC_OscConfig+0x2f8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a63      	ldr	r2, [pc, #396]	; (8001b34 <HAL_RCC_OscConfig+0x2f8>)
 80019a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ac:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019ae:	4b61      	ldr	r3, [pc, #388]	; (8001b34 <HAL_RCC_OscConfig+0x2f8>)
 80019b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b2:	f023 020f 	bic.w	r2, r3, #15
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	495d      	ldr	r1, [pc, #372]	; (8001b34 <HAL_RCC_OscConfig+0x2f8>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d059      	beq.n	8001a80 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7ff fb30 	bl	8001030 <HAL_GetTick>
 80019d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d4:	e00a      	b.n	80019ec <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019d6:	f7ff fb2b 	bl	8001030 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b64      	cmp	r3, #100	; 0x64
 80019e4:	d902      	bls.n	80019ec <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	f000 be29 	b.w	800263e <HAL_RCC_OscConfig+0xe02>
 80019ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019f0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80019f8:	fa93 f3a3 	rbit	r3, r3
 80019fc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001a00:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a04:	fab3 f383 	clz	r3, r3
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d102      	bne.n	8001a1e <HAL_RCC_OscConfig+0x1e2>
 8001a18:	4b46      	ldr	r3, [pc, #280]	; (8001b34 <HAL_RCC_OscConfig+0x2f8>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	e015      	b.n	8001a4a <HAL_RCC_OscConfig+0x20e>
 8001a1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a22:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a26:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001a2a:	fa93 f3a3 	rbit	r3, r3
 8001a2e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001a32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a36:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001a3a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001a3e:	fa93 f3a3 	rbit	r3, r3
 8001a42:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001a46:	4b3b      	ldr	r3, [pc, #236]	; (8001b34 <HAL_RCC_OscConfig+0x2f8>)
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a4e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001a52:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001a56:	fa92 f2a2 	rbit	r2, r2
 8001a5a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001a5e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001a62:	fab2 f282 	clz	r2, r2
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	f042 0220 	orr.w	r2, r2, #32
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	f002 021f 	and.w	r2, r2, #31
 8001a72:	2101      	movs	r1, #1
 8001a74:	fa01 f202 	lsl.w	r2, r1, r2
 8001a78:	4013      	ands	r3, r2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0ab      	beq.n	80019d6 <HAL_RCC_OscConfig+0x19a>
 8001a7e:	e05c      	b.n	8001b3a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a80:	f7ff fad6 	bl	8001030 <HAL_GetTick>
 8001a84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a88:	e00a      	b.n	8001aa0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a8a:	f7ff fad1 	bl	8001030 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b64      	cmp	r3, #100	; 0x64
 8001a98:	d902      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	f000 bdcf 	b.w	800263e <HAL_RCC_OscConfig+0xe02>
 8001aa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aa4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001aac:	fa93 f3a3 	rbit	r3, r3
 8001ab0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001ab4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab8:	fab3 f383 	clz	r3, r3
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	095b      	lsrs	r3, r3, #5
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d102      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x296>
 8001acc:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <HAL_RCC_OscConfig+0x2f8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	e015      	b.n	8001afe <HAL_RCC_OscConfig+0x2c2>
 8001ad2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ad6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ada:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001ade:	fa93 f3a3 	rbit	r3, r3
 8001ae2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001ae6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aea:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001aee:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001af2:	fa93 f3a3 	rbit	r3, r3
 8001af6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <HAL_RCC_OscConfig+0x2f8>)
 8001afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b02:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001b06:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001b0a:	fa92 f2a2 	rbit	r2, r2
 8001b0e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001b12:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001b16:	fab2 f282 	clz	r2, r2
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	f042 0220 	orr.w	r2, r2, #32
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	f002 021f 	and.w	r2, r2, #31
 8001b26:	2101      	movs	r1, #1
 8001b28:	fa01 f202 	lsl.w	r2, r1, r2
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1ab      	bne.n	8001a8a <HAL_RCC_OscConfig+0x24e>
 8001b32:	e002      	b.n	8001b3a <HAL_RCC_OscConfig+0x2fe>
 8001b34:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 816f 	beq.w	8001e28 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b4a:	4bd0      	ldr	r3, [pc, #832]	; (8001e8c <HAL_RCC_OscConfig+0x650>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00b      	beq.n	8001b6e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b56:	4bcd      	ldr	r3, [pc, #820]	; (8001e8c <HAL_RCC_OscConfig+0x650>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d16c      	bne.n	8001c3c <HAL_RCC_OscConfig+0x400>
 8001b62:	4bca      	ldr	r3, [pc, #808]	; (8001e8c <HAL_RCC_OscConfig+0x650>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d166      	bne.n	8001c3c <HAL_RCC_OscConfig+0x400>
 8001b6e:	2302      	movs	r3, #2
 8001b70:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b74:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001b78:	fa93 f3a3 	rbit	r3, r3
 8001b7c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001b80:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b84:	fab3 f383 	clz	r3, r3
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	095b      	lsrs	r3, r3, #5
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d102      	bne.n	8001b9e <HAL_RCC_OscConfig+0x362>
 8001b98:	4bbc      	ldr	r3, [pc, #752]	; (8001e8c <HAL_RCC_OscConfig+0x650>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	e013      	b.n	8001bc6 <HAL_RCC_OscConfig+0x38a>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001ba8:	fa93 f3a3 	rbit	r3, r3
 8001bac:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001bb6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001bba:	fa93 f3a3 	rbit	r3, r3
 8001bbe:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001bc2:	4bb2      	ldr	r3, [pc, #712]	; (8001e8c <HAL_RCC_OscConfig+0x650>)
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001bcc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001bd0:	fa92 f2a2 	rbit	r2, r2
 8001bd4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001bd8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001bdc:	fab2 f282 	clz	r2, r2
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	f042 0220 	orr.w	r2, r2, #32
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	f002 021f 	and.w	r2, r2, #31
 8001bec:	2101      	movs	r1, #1
 8001bee:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d007      	beq.n	8001c08 <HAL_RCC_OscConfig+0x3cc>
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d002      	beq.n	8001c08 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	f000 bd1b 	b.w	800263e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c08:	4ba0      	ldr	r3, [pc, #640]	; (8001e8c <HAL_RCC_OscConfig+0x650>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	21f8      	movs	r1, #248	; 0xf8
 8001c18:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001c20:	fa91 f1a1 	rbit	r1, r1
 8001c24:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001c28:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001c2c:	fab1 f181 	clz	r1, r1
 8001c30:	b2c9      	uxtb	r1, r1
 8001c32:	408b      	lsls	r3, r1
 8001c34:	4995      	ldr	r1, [pc, #596]	; (8001e8c <HAL_RCC_OscConfig+0x650>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3a:	e0f5      	b.n	8001e28 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 8085 	beq.w	8001d52 <HAL_RCC_OscConfig+0x516>
 8001c48:	2301      	movs	r3, #1
 8001c4a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001c52:	fa93 f3a3 	rbit	r3, r3
 8001c56:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001c5a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c5e:	fab3 f383 	clz	r3, r3
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	461a      	mov	r2, r3
 8001c70:	2301      	movs	r3, #1
 8001c72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c74:	f7ff f9dc 	bl	8001030 <HAL_GetTick>
 8001c78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7c:	e00a      	b.n	8001c94 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c7e:	f7ff f9d7 	bl	8001030 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d902      	bls.n	8001c94 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	f000 bcd5 	b.w	800263e <HAL_RCC_OscConfig+0xe02>
 8001c94:	2302      	movs	r3, #2
 8001c96:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001c9e:	fa93 f3a3 	rbit	r3, r3
 8001ca2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001ca6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001caa:	fab3 f383 	clz	r3, r3
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	095b      	lsrs	r3, r3, #5
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d102      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x488>
 8001cbe:	4b73      	ldr	r3, [pc, #460]	; (8001e8c <HAL_RCC_OscConfig+0x650>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	e013      	b.n	8001cec <HAL_RCC_OscConfig+0x4b0>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cca:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001cce:	fa93 f3a3 	rbit	r3, r3
 8001cd2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001cdc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001ce0:	fa93 f3a3 	rbit	r3, r3
 8001ce4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001ce8:	4b68      	ldr	r3, [pc, #416]	; (8001e8c <HAL_RCC_OscConfig+0x650>)
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	2202      	movs	r2, #2
 8001cee:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001cf2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001cf6:	fa92 f2a2 	rbit	r2, r2
 8001cfa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001cfe:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001d02:	fab2 f282 	clz	r2, r2
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	f042 0220 	orr.w	r2, r2, #32
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	f002 021f 	and.w	r2, r2, #31
 8001d12:	2101      	movs	r1, #1
 8001d14:	fa01 f202 	lsl.w	r2, r1, r2
 8001d18:	4013      	ands	r3, r2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0af      	beq.n	8001c7e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1e:	4b5b      	ldr	r3, [pc, #364]	; (8001e8c <HAL_RCC_OscConfig+0x650>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d26:	1d3b      	adds	r3, r7, #4
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	21f8      	movs	r1, #248	; 0xf8
 8001d2e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001d36:	fa91 f1a1 	rbit	r1, r1
 8001d3a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001d3e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001d42:	fab1 f181 	clz	r1, r1
 8001d46:	b2c9      	uxtb	r1, r1
 8001d48:	408b      	lsls	r3, r1
 8001d4a:	4950      	ldr	r1, [pc, #320]	; (8001e8c <HAL_RCC_OscConfig+0x650>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	600b      	str	r3, [r1, #0]
 8001d50:	e06a      	b.n	8001e28 <HAL_RCC_OscConfig+0x5ec>
 8001d52:	2301      	movs	r3, #1
 8001d54:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d58:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001d5c:	fa93 f3a3 	rbit	r3, r3
 8001d60:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001d64:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d68:	fab3 f383 	clz	r3, r3
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d72:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	461a      	mov	r2, r3
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7e:	f7ff f957 	bl	8001030 <HAL_GetTick>
 8001d82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d86:	e00a      	b.n	8001d9e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d88:	f7ff f952 	bl	8001030 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d902      	bls.n	8001d9e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	f000 bc50 	b.w	800263e <HAL_RCC_OscConfig+0xe02>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001da8:	fa93 f3a3 	rbit	r3, r3
 8001dac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001db0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db4:	fab3 f383 	clz	r3, r3
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	095b      	lsrs	r3, r3, #5
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d102      	bne.n	8001dce <HAL_RCC_OscConfig+0x592>
 8001dc8:	4b30      	ldr	r3, [pc, #192]	; (8001e8c <HAL_RCC_OscConfig+0x650>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	e013      	b.n	8001df6 <HAL_RCC_OscConfig+0x5ba>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001dd8:	fa93 f3a3 	rbit	r3, r3
 8001ddc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001de0:	2302      	movs	r3, #2
 8001de2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001de6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001dea:	fa93 f3a3 	rbit	r3, r3
 8001dee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001df2:	4b26      	ldr	r3, [pc, #152]	; (8001e8c <HAL_RCC_OscConfig+0x650>)
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	2202      	movs	r2, #2
 8001df8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001dfc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001e00:	fa92 f2a2 	rbit	r2, r2
 8001e04:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001e08:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001e0c:	fab2 f282 	clz	r2, r2
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	f042 0220 	orr.w	r2, r2, #32
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	f002 021f 	and.w	r2, r2, #31
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e22:	4013      	ands	r3, r2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1af      	bne.n	8001d88 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e28:	1d3b      	adds	r3, r7, #4
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 80da 	beq.w	8001fec <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e38:	1d3b      	adds	r3, r7, #4
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d069      	beq.n	8001f16 <HAL_RCC_OscConfig+0x6da>
 8001e42:	2301      	movs	r3, #1
 8001e44:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e48:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001e4c:	fa93 f3a3 	rbit	r3, r3
 8001e50:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e58:	fab3 f383 	clz	r3, r3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	461a      	mov	r2, r3
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <HAL_RCC_OscConfig+0x654>)
 8001e62:	4413      	add	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	461a      	mov	r2, r3
 8001e68:	2301      	movs	r3, #1
 8001e6a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6c:	f7ff f8e0 	bl	8001030 <HAL_GetTick>
 8001e70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e74:	e00e      	b.n	8001e94 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e76:	f7ff f8db 	bl	8001030 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d906      	bls.n	8001e94 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e3d9      	b.n	800263e <HAL_RCC_OscConfig+0xe02>
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	10908120 	.word	0x10908120
 8001e94:	2302      	movs	r3, #2
 8001e96:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001e9e:	fa93 f3a3 	rbit	r3, r3
 8001ea2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001ea6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001eaa:	2202      	movs	r2, #2
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	fa93 f2a3 	rbit	r2, r3
 8001eb8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	fa93 f2a3 	rbit	r2, r3
 8001ed0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001ed4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed6:	4ba5      	ldr	r3, [pc, #660]	; (800216c <HAL_RCC_OscConfig+0x930>)
 8001ed8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eda:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001ede:	2102      	movs	r1, #2
 8001ee0:	6019      	str	r1, [r3, #0]
 8001ee2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	fa93 f1a3 	rbit	r1, r3
 8001eec:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001ef0:	6019      	str	r1, [r3, #0]
  return result;
 8001ef2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	fab3 f383 	clz	r3, r3
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	f003 031f 	and.w	r3, r3, #31
 8001f08:	2101      	movs	r1, #1
 8001f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0b0      	beq.n	8001e76 <HAL_RCC_OscConfig+0x63a>
 8001f14:	e06a      	b.n	8001fec <HAL_RCC_OscConfig+0x7b0>
 8001f16:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	fa93 f2a3 	rbit	r2, r3
 8001f28:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f2c:	601a      	str	r2, [r3, #0]
  return result;
 8001f2e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f32:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f34:	fab3 f383 	clz	r3, r3
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	4b8c      	ldr	r3, [pc, #560]	; (8002170 <HAL_RCC_OscConfig+0x934>)
 8001f3e:	4413      	add	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	461a      	mov	r2, r3
 8001f44:	2300      	movs	r3, #0
 8001f46:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f48:	f7ff f872 	bl	8001030 <HAL_GetTick>
 8001f4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f50:	e009      	b.n	8001f66 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f52:	f7ff f86d 	bl	8001030 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e36b      	b.n	800263e <HAL_RCC_OscConfig+0xe02>
 8001f66:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	fa93 f2a3 	rbit	r2, r3
 8001f78:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001f82:	2202      	movs	r2, #2
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	fa93 f2a3 	rbit	r2, r3
 8001f90:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	fa93 f2a3 	rbit	r2, r3
 8001fa8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001fac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fae:	4b6f      	ldr	r3, [pc, #444]	; (800216c <HAL_RCC_OscConfig+0x930>)
 8001fb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fb2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001fb6:	2102      	movs	r1, #2
 8001fb8:	6019      	str	r1, [r3, #0]
 8001fba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	fa93 f1a3 	rbit	r1, r3
 8001fc4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001fc8:	6019      	str	r1, [r3, #0]
  return result;
 8001fca:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	fab3 f383 	clz	r3, r3
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1b2      	bne.n	8001f52 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fec:	1d3b      	adds	r3, r7, #4
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 8158 	beq.w	80022ac <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002002:	4b5a      	ldr	r3, [pc, #360]	; (800216c <HAL_RCC_OscConfig+0x930>)
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d112      	bne.n	8002034 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800200e:	4b57      	ldr	r3, [pc, #348]	; (800216c <HAL_RCC_OscConfig+0x930>)
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	4a56      	ldr	r2, [pc, #344]	; (800216c <HAL_RCC_OscConfig+0x930>)
 8002014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002018:	61d3      	str	r3, [r2, #28]
 800201a:	4b54      	ldr	r3, [pc, #336]	; (800216c <HAL_RCC_OscConfig+0x930>)
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002022:	f107 0308 	add.w	r3, r7, #8
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	f107 0308 	add.w	r3, r7, #8
 800202c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800202e:	2301      	movs	r3, #1
 8002030:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002034:	4b4f      	ldr	r3, [pc, #316]	; (8002174 <HAL_RCC_OscConfig+0x938>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203c:	2b00      	cmp	r3, #0
 800203e:	d11a      	bne.n	8002076 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002040:	4b4c      	ldr	r3, [pc, #304]	; (8002174 <HAL_RCC_OscConfig+0x938>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a4b      	ldr	r2, [pc, #300]	; (8002174 <HAL_RCC_OscConfig+0x938>)
 8002046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800204a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800204c:	f7fe fff0 	bl	8001030 <HAL_GetTick>
 8002050:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002054:	e009      	b.n	800206a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002056:	f7fe ffeb 	bl	8001030 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b64      	cmp	r3, #100	; 0x64
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e2e9      	b.n	800263e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206a:	4b42      	ldr	r3, [pc, #264]	; (8002174 <HAL_RCC_OscConfig+0x938>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0ef      	beq.n	8002056 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002076:	1d3b      	adds	r3, r7, #4
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d106      	bne.n	800208e <HAL_RCC_OscConfig+0x852>
 8002080:	4b3a      	ldr	r3, [pc, #232]	; (800216c <HAL_RCC_OscConfig+0x930>)
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	4a39      	ldr	r2, [pc, #228]	; (800216c <HAL_RCC_OscConfig+0x930>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	6213      	str	r3, [r2, #32]
 800208c:	e02f      	b.n	80020ee <HAL_RCC_OscConfig+0x8b2>
 800208e:	1d3b      	adds	r3, r7, #4
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10c      	bne.n	80020b2 <HAL_RCC_OscConfig+0x876>
 8002098:	4b34      	ldr	r3, [pc, #208]	; (800216c <HAL_RCC_OscConfig+0x930>)
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	4a33      	ldr	r2, [pc, #204]	; (800216c <HAL_RCC_OscConfig+0x930>)
 800209e:	f023 0301 	bic.w	r3, r3, #1
 80020a2:	6213      	str	r3, [r2, #32]
 80020a4:	4b31      	ldr	r3, [pc, #196]	; (800216c <HAL_RCC_OscConfig+0x930>)
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	4a30      	ldr	r2, [pc, #192]	; (800216c <HAL_RCC_OscConfig+0x930>)
 80020aa:	f023 0304 	bic.w	r3, r3, #4
 80020ae:	6213      	str	r3, [r2, #32]
 80020b0:	e01d      	b.n	80020ee <HAL_RCC_OscConfig+0x8b2>
 80020b2:	1d3b      	adds	r3, r7, #4
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	2b05      	cmp	r3, #5
 80020ba:	d10c      	bne.n	80020d6 <HAL_RCC_OscConfig+0x89a>
 80020bc:	4b2b      	ldr	r3, [pc, #172]	; (800216c <HAL_RCC_OscConfig+0x930>)
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	4a2a      	ldr	r2, [pc, #168]	; (800216c <HAL_RCC_OscConfig+0x930>)
 80020c2:	f043 0304 	orr.w	r3, r3, #4
 80020c6:	6213      	str	r3, [r2, #32]
 80020c8:	4b28      	ldr	r3, [pc, #160]	; (800216c <HAL_RCC_OscConfig+0x930>)
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	4a27      	ldr	r2, [pc, #156]	; (800216c <HAL_RCC_OscConfig+0x930>)
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	6213      	str	r3, [r2, #32]
 80020d4:	e00b      	b.n	80020ee <HAL_RCC_OscConfig+0x8b2>
 80020d6:	4b25      	ldr	r3, [pc, #148]	; (800216c <HAL_RCC_OscConfig+0x930>)
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	4a24      	ldr	r2, [pc, #144]	; (800216c <HAL_RCC_OscConfig+0x930>)
 80020dc:	f023 0301 	bic.w	r3, r3, #1
 80020e0:	6213      	str	r3, [r2, #32]
 80020e2:	4b22      	ldr	r3, [pc, #136]	; (800216c <HAL_RCC_OscConfig+0x930>)
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	4a21      	ldr	r2, [pc, #132]	; (800216c <HAL_RCC_OscConfig+0x930>)
 80020e8:	f023 0304 	bic.w	r3, r3, #4
 80020ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d06b      	beq.n	80021d0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f8:	f7fe ff9a 	bl	8001030 <HAL_GetTick>
 80020fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002100:	e00b      	b.n	800211a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002102:	f7fe ff95 	bl	8001030 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002112:	4293      	cmp	r3, r2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e291      	b.n	800263e <HAL_RCC_OscConfig+0xe02>
 800211a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800211e:	2202      	movs	r2, #2
 8002120:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	fa93 f2a3 	rbit	r2, r3
 800212c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002136:	2202      	movs	r2, #2
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	fa93 f2a3 	rbit	r2, r3
 8002144:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002148:	601a      	str	r2, [r3, #0]
  return result;
 800214a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800214e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002150:	fab3 f383 	clz	r3, r3
 8002154:	b2db      	uxtb	r3, r3
 8002156:	095b      	lsrs	r3, r3, #5
 8002158:	b2db      	uxtb	r3, r3
 800215a:	f043 0302 	orr.w	r3, r3, #2
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d109      	bne.n	8002178 <HAL_RCC_OscConfig+0x93c>
 8002164:	4b01      	ldr	r3, [pc, #4]	; (800216c <HAL_RCC_OscConfig+0x930>)
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	e014      	b.n	8002194 <HAL_RCC_OscConfig+0x958>
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000
 8002170:	10908120 	.word	0x10908120
 8002174:	40007000 	.word	0x40007000
 8002178:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800217c:	2202      	movs	r2, #2
 800217e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002180:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	fa93 f2a3 	rbit	r2, r3
 800218a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	4bbb      	ldr	r3, [pc, #748]	; (8002480 <HAL_RCC_OscConfig+0xc44>)
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002198:	2102      	movs	r1, #2
 800219a:	6011      	str	r1, [r2, #0]
 800219c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80021a0:	6812      	ldr	r2, [r2, #0]
 80021a2:	fa92 f1a2 	rbit	r1, r2
 80021a6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80021aa:	6011      	str	r1, [r2, #0]
  return result;
 80021ac:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	fab2 f282 	clz	r2, r2
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	f002 021f 	and.w	r2, r2, #31
 80021c2:	2101      	movs	r1, #1
 80021c4:	fa01 f202 	lsl.w	r2, r1, r2
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d099      	beq.n	8002102 <HAL_RCC_OscConfig+0x8c6>
 80021ce:	e063      	b.n	8002298 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d0:	f7fe ff2e 	bl	8001030 <HAL_GetTick>
 80021d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d8:	e00b      	b.n	80021f2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021da:	f7fe ff29 	bl	8001030 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e225      	b.n	800263e <HAL_RCC_OscConfig+0xe02>
 80021f2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80021f6:	2202      	movs	r2, #2
 80021f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	fa93 f2a3 	rbit	r2, r3
 8002204:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800220e:	2202      	movs	r2, #2
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	fa93 f2a3 	rbit	r2, r3
 800221c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002220:	601a      	str	r2, [r3, #0]
  return result;
 8002222:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002226:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002228:	fab3 f383 	clz	r3, r3
 800222c:	b2db      	uxtb	r3, r3
 800222e:	095b      	lsrs	r3, r3, #5
 8002230:	b2db      	uxtb	r3, r3
 8002232:	f043 0302 	orr.w	r3, r3, #2
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d102      	bne.n	8002242 <HAL_RCC_OscConfig+0xa06>
 800223c:	4b90      	ldr	r3, [pc, #576]	; (8002480 <HAL_RCC_OscConfig+0xc44>)
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	e00d      	b.n	800225e <HAL_RCC_OscConfig+0xa22>
 8002242:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002246:	2202      	movs	r2, #2
 8002248:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	fa93 f2a3 	rbit	r2, r3
 8002254:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	4b89      	ldr	r3, [pc, #548]	; (8002480 <HAL_RCC_OscConfig+0xc44>)
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002262:	2102      	movs	r1, #2
 8002264:	6011      	str	r1, [r2, #0]
 8002266:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	fa92 f1a2 	rbit	r1, r2
 8002270:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002274:	6011      	str	r1, [r2, #0]
  return result;
 8002276:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800227a:	6812      	ldr	r2, [r2, #0]
 800227c:	fab2 f282 	clz	r2, r2
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	f002 021f 	and.w	r2, r2, #31
 800228c:	2101      	movs	r1, #1
 800228e:	fa01 f202 	lsl.w	r2, r1, r2
 8002292:	4013      	ands	r3, r2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1a0      	bne.n	80021da <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002298:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800229c:	2b01      	cmp	r3, #1
 800229e:	d105      	bne.n	80022ac <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a0:	4b77      	ldr	r3, [pc, #476]	; (8002480 <HAL_RCC_OscConfig+0xc44>)
 80022a2:	69db      	ldr	r3, [r3, #28]
 80022a4:	4a76      	ldr	r2, [pc, #472]	; (8002480 <HAL_RCC_OscConfig+0xc44>)
 80022a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022aa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ac:	1d3b      	adds	r3, r7, #4
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 81c2 	beq.w	800263c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022b8:	4b71      	ldr	r3, [pc, #452]	; (8002480 <HAL_RCC_OscConfig+0xc44>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 030c 	and.w	r3, r3, #12
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	f000 819c 	beq.w	80025fe <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022c6:	1d3b      	adds	r3, r7, #4
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	f040 8114 	bne.w	80024fa <HAL_RCC_OscConfig+0xcbe>
 80022d2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80022d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	fa93 f2a3 	rbit	r2, r3
 80022e6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80022ea:	601a      	str	r2, [r3, #0]
  return result;
 80022ec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80022f0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f2:	fab3 f383 	clz	r3, r3
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	461a      	mov	r2, r3
 8002304:	2300      	movs	r3, #0
 8002306:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7fe fe92 	bl	8001030 <HAL_GetTick>
 800230c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002310:	e009      	b.n	8002326 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002312:	f7fe fe8d 	bl	8001030 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e18b      	b.n	800263e <HAL_RCC_OscConfig+0xe02>
 8002326:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800232a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800232e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002330:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	fa93 f2a3 	rbit	r2, r3
 800233a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800233e:	601a      	str	r2, [r3, #0]
  return result;
 8002340:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002344:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002346:	fab3 f383 	clz	r3, r3
 800234a:	b2db      	uxtb	r3, r3
 800234c:	095b      	lsrs	r3, r3, #5
 800234e:	b2db      	uxtb	r3, r3
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b01      	cmp	r3, #1
 8002358:	d102      	bne.n	8002360 <HAL_RCC_OscConfig+0xb24>
 800235a:	4b49      	ldr	r3, [pc, #292]	; (8002480 <HAL_RCC_OscConfig+0xc44>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	e01b      	b.n	8002398 <HAL_RCC_OscConfig+0xb5c>
 8002360:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002364:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002368:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	fa93 f2a3 	rbit	r2, r3
 8002374:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800237e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	fa93 f2a3 	rbit	r2, r3
 800238e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	4b3a      	ldr	r3, [pc, #232]	; (8002480 <HAL_RCC_OscConfig+0xc44>)
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800239c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023a0:	6011      	str	r1, [r2, #0]
 80023a2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	fa92 f1a2 	rbit	r1, r2
 80023ac:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80023b0:	6011      	str	r1, [r2, #0]
  return result;
 80023b2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	fab2 f282 	clz	r2, r2
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	f042 0220 	orr.w	r2, r2, #32
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	f002 021f 	and.w	r2, r2, #31
 80023c8:	2101      	movs	r1, #1
 80023ca:	fa01 f202 	lsl.w	r2, r1, r2
 80023ce:	4013      	ands	r3, r2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d19e      	bne.n	8002312 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023d4:	4b2a      	ldr	r3, [pc, #168]	; (8002480 <HAL_RCC_OscConfig+0xc44>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023dc:	1d3b      	adds	r3, r7, #4
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80023e2:	1d3b      	adds	r3, r7, #4
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	430b      	orrs	r3, r1
 80023ea:	4925      	ldr	r1, [pc, #148]	; (8002480 <HAL_RCC_OscConfig+0xc44>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	604b      	str	r3, [r1, #4]
 80023f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	fa93 f2a3 	rbit	r2, r3
 8002404:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002408:	601a      	str	r2, [r3, #0]
  return result;
 800240a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800240e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002410:	fab3 f383 	clz	r3, r3
 8002414:	b2db      	uxtb	r3, r3
 8002416:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800241a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	461a      	mov	r2, r3
 8002422:	2301      	movs	r3, #1
 8002424:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002426:	f7fe fe03 	bl	8001030 <HAL_GetTick>
 800242a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800242e:	e009      	b.n	8002444 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002430:	f7fe fdfe 	bl	8001030 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e0fc      	b.n	800263e <HAL_RCC_OscConfig+0xe02>
 8002444:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002448:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800244c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	fa93 f2a3 	rbit	r2, r3
 8002458:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800245c:	601a      	str	r2, [r3, #0]
  return result;
 800245e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002462:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002464:	fab3 f383 	clz	r3, r3
 8002468:	b2db      	uxtb	r3, r3
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	b2db      	uxtb	r3, r3
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b01      	cmp	r3, #1
 8002476:	d105      	bne.n	8002484 <HAL_RCC_OscConfig+0xc48>
 8002478:	4b01      	ldr	r3, [pc, #4]	; (8002480 <HAL_RCC_OscConfig+0xc44>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	e01e      	b.n	80024bc <HAL_RCC_OscConfig+0xc80>
 800247e:	bf00      	nop
 8002480:	40021000 	.word	0x40021000
 8002484:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002488:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800248c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	fa93 f2a3 	rbit	r2, r3
 8002498:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	fa93 f2a3 	rbit	r2, r3
 80024b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	4b63      	ldr	r3, [pc, #396]	; (8002648 <HAL_RCC_OscConfig+0xe0c>)
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024c4:	6011      	str	r1, [r2, #0]
 80024c6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	fa92 f1a2 	rbit	r1, r2
 80024d0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80024d4:	6011      	str	r1, [r2, #0]
  return result;
 80024d6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	fab2 f282 	clz	r2, r2
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	f042 0220 	orr.w	r2, r2, #32
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	f002 021f 	and.w	r2, r2, #31
 80024ec:	2101      	movs	r1, #1
 80024ee:	fa01 f202 	lsl.w	r2, r1, r2
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d09b      	beq.n	8002430 <HAL_RCC_OscConfig+0xbf4>
 80024f8:	e0a0      	b.n	800263c <HAL_RCC_OscConfig+0xe00>
 80024fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002502:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002504:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	fa93 f2a3 	rbit	r2, r3
 800250e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002512:	601a      	str	r2, [r3, #0]
  return result;
 8002514:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002518:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002524:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	461a      	mov	r2, r3
 800252c:	2300      	movs	r3, #0
 800252e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002530:	f7fe fd7e 	bl	8001030 <HAL_GetTick>
 8002534:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002538:	e009      	b.n	800254e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800253a:	f7fe fd79 	bl	8001030 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e077      	b.n	800263e <HAL_RCC_OscConfig+0xe02>
 800254e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002552:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002556:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	fa93 f2a3 	rbit	r2, r3
 8002562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002566:	601a      	str	r2, [r3, #0]
  return result;
 8002568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800256c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800256e:	fab3 f383 	clz	r3, r3
 8002572:	b2db      	uxtb	r3, r3
 8002574:	095b      	lsrs	r3, r3, #5
 8002576:	b2db      	uxtb	r3, r3
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b01      	cmp	r3, #1
 8002580:	d102      	bne.n	8002588 <HAL_RCC_OscConfig+0xd4c>
 8002582:	4b31      	ldr	r3, [pc, #196]	; (8002648 <HAL_RCC_OscConfig+0xe0c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	e01b      	b.n	80025c0 <HAL_RCC_OscConfig+0xd84>
 8002588:	f107 0320 	add.w	r3, r7, #32
 800258c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002590:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	f107 0320 	add.w	r3, r7, #32
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	fa93 f2a3 	rbit	r2, r3
 800259c:	f107 031c 	add.w	r3, r7, #28
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	f107 0318 	add.w	r3, r7, #24
 80025a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	f107 0318 	add.w	r3, r7, #24
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	fa93 f2a3 	rbit	r2, r3
 80025b6:	f107 0314 	add.w	r3, r7, #20
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	4b22      	ldr	r3, [pc, #136]	; (8002648 <HAL_RCC_OscConfig+0xe0c>)
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	f107 0210 	add.w	r2, r7, #16
 80025c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025c8:	6011      	str	r1, [r2, #0]
 80025ca:	f107 0210 	add.w	r2, r7, #16
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	fa92 f1a2 	rbit	r1, r2
 80025d4:	f107 020c 	add.w	r2, r7, #12
 80025d8:	6011      	str	r1, [r2, #0]
  return result;
 80025da:	f107 020c 	add.w	r2, r7, #12
 80025de:	6812      	ldr	r2, [r2, #0]
 80025e0:	fab2 f282 	clz	r2, r2
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	f042 0220 	orr.w	r2, r2, #32
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	f002 021f 	and.w	r2, r2, #31
 80025f0:	2101      	movs	r1, #1
 80025f2:	fa01 f202 	lsl.w	r2, r1, r2
 80025f6:	4013      	ands	r3, r2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d19e      	bne.n	800253a <HAL_RCC_OscConfig+0xcfe>
 80025fc:	e01e      	b.n	800263c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025fe:	1d3b      	adds	r3, r7, #4
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d101      	bne.n	800260c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e018      	b.n	800263e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800260c:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <HAL_RCC_OscConfig+0xe0c>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002614:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002618:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800261c:	1d3b      	adds	r3, r7, #4
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	429a      	cmp	r2, r3
 8002624:	d108      	bne.n	8002638 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002626:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800262a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800262e:	1d3b      	adds	r3, r7, #4
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002634:	429a      	cmp	r2, r3
 8002636:	d001      	beq.n	800263c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e000      	b.n	800263e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021000 	.word	0x40021000

0800264c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b09e      	sub	sp, #120	; 0x78
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e162      	b.n	800292a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002664:	4b90      	ldr	r3, [pc, #576]	; (80028a8 <HAL_RCC_ClockConfig+0x25c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d910      	bls.n	8002694 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002672:	4b8d      	ldr	r3, [pc, #564]	; (80028a8 <HAL_RCC_ClockConfig+0x25c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 0207 	bic.w	r2, r3, #7
 800267a:	498b      	ldr	r1, [pc, #556]	; (80028a8 <HAL_RCC_ClockConfig+0x25c>)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	4313      	orrs	r3, r2
 8002680:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002682:	4b89      	ldr	r3, [pc, #548]	; (80028a8 <HAL_RCC_ClockConfig+0x25c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d001      	beq.n	8002694 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e14a      	b.n	800292a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d008      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a0:	4b82      	ldr	r3, [pc, #520]	; (80028ac <HAL_RCC_ClockConfig+0x260>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	497f      	ldr	r1, [pc, #508]	; (80028ac <HAL_RCC_ClockConfig+0x260>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 80dc 	beq.w	8002878 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d13c      	bne.n	8002742 <HAL_RCC_ClockConfig+0xf6>
 80026c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026cc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026d0:	fa93 f3a3 	rbit	r3, r3
 80026d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80026d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d8:	fab3 f383 	clz	r3, r3
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	095b      	lsrs	r3, r3, #5
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d102      	bne.n	80026f2 <HAL_RCC_ClockConfig+0xa6>
 80026ec:	4b6f      	ldr	r3, [pc, #444]	; (80028ac <HAL_RCC_ClockConfig+0x260>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	e00f      	b.n	8002712 <HAL_RCC_ClockConfig+0xc6>
 80026f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026fa:	fa93 f3a3 	rbit	r3, r3
 80026fe:	667b      	str	r3, [r7, #100]	; 0x64
 8002700:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002704:	663b      	str	r3, [r7, #96]	; 0x60
 8002706:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002708:	fa93 f3a3 	rbit	r3, r3
 800270c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800270e:	4b67      	ldr	r3, [pc, #412]	; (80028ac <HAL_RCC_ClockConfig+0x260>)
 8002710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002712:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002716:	65ba      	str	r2, [r7, #88]	; 0x58
 8002718:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800271a:	fa92 f2a2 	rbit	r2, r2
 800271e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002720:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002722:	fab2 f282 	clz	r2, r2
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	f042 0220 	orr.w	r2, r2, #32
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	f002 021f 	and.w	r2, r2, #31
 8002732:	2101      	movs	r1, #1
 8002734:	fa01 f202 	lsl.w	r2, r1, r2
 8002738:	4013      	ands	r3, r2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d17b      	bne.n	8002836 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e0f3      	b.n	800292a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b02      	cmp	r3, #2
 8002748:	d13c      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x178>
 800274a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800274e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002752:	fa93 f3a3 	rbit	r3, r3
 8002756:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800275a:	fab3 f383 	clz	r3, r3
 800275e:	b2db      	uxtb	r3, r3
 8002760:	095b      	lsrs	r3, r3, #5
 8002762:	b2db      	uxtb	r3, r3
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b01      	cmp	r3, #1
 800276c:	d102      	bne.n	8002774 <HAL_RCC_ClockConfig+0x128>
 800276e:	4b4f      	ldr	r3, [pc, #316]	; (80028ac <HAL_RCC_ClockConfig+0x260>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	e00f      	b.n	8002794 <HAL_RCC_ClockConfig+0x148>
 8002774:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002778:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800277c:	fa93 f3a3 	rbit	r3, r3
 8002780:	647b      	str	r3, [r7, #68]	; 0x44
 8002782:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002786:	643b      	str	r3, [r7, #64]	; 0x40
 8002788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800278a:	fa93 f3a3 	rbit	r3, r3
 800278e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002790:	4b46      	ldr	r3, [pc, #280]	; (80028ac <HAL_RCC_ClockConfig+0x260>)
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002798:	63ba      	str	r2, [r7, #56]	; 0x38
 800279a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800279c:	fa92 f2a2 	rbit	r2, r2
 80027a0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80027a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027a4:	fab2 f282 	clz	r2, r2
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	f042 0220 	orr.w	r2, r2, #32
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	f002 021f 	and.w	r2, r2, #31
 80027b4:	2101      	movs	r1, #1
 80027b6:	fa01 f202 	lsl.w	r2, r1, r2
 80027ba:	4013      	ands	r3, r2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d13a      	bne.n	8002836 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0b2      	b.n	800292a <HAL_RCC_ClockConfig+0x2de>
 80027c4:	2302      	movs	r3, #2
 80027c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ca:	fa93 f3a3 	rbit	r3, r3
 80027ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80027d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d2:	fab3 f383 	clz	r3, r3
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	095b      	lsrs	r3, r3, #5
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d102      	bne.n	80027ec <HAL_RCC_ClockConfig+0x1a0>
 80027e6:	4b31      	ldr	r3, [pc, #196]	; (80028ac <HAL_RCC_ClockConfig+0x260>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	e00d      	b.n	8002808 <HAL_RCC_ClockConfig+0x1bc>
 80027ec:	2302      	movs	r3, #2
 80027ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
 80027f8:	2302      	movs	r3, #2
 80027fa:	623b      	str	r3, [r7, #32]
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	fa93 f3a3 	rbit	r3, r3
 8002802:	61fb      	str	r3, [r7, #28]
 8002804:	4b29      	ldr	r3, [pc, #164]	; (80028ac <HAL_RCC_ClockConfig+0x260>)
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	2202      	movs	r2, #2
 800280a:	61ba      	str	r2, [r7, #24]
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	fa92 f2a2 	rbit	r2, r2
 8002812:	617a      	str	r2, [r7, #20]
  return result;
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	fab2 f282 	clz	r2, r2
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	f042 0220 	orr.w	r2, r2, #32
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	f002 021f 	and.w	r2, r2, #31
 8002826:	2101      	movs	r1, #1
 8002828:	fa01 f202 	lsl.w	r2, r1, r2
 800282c:	4013      	ands	r3, r2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e079      	b.n	800292a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002836:	4b1d      	ldr	r3, [pc, #116]	; (80028ac <HAL_RCC_ClockConfig+0x260>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f023 0203 	bic.w	r2, r3, #3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	491a      	ldr	r1, [pc, #104]	; (80028ac <HAL_RCC_ClockConfig+0x260>)
 8002844:	4313      	orrs	r3, r2
 8002846:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002848:	f7fe fbf2 	bl	8001030 <HAL_GetTick>
 800284c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284e:	e00a      	b.n	8002866 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002850:	f7fe fbee 	bl	8001030 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	f241 3288 	movw	r2, #5000	; 0x1388
 800285e:	4293      	cmp	r3, r2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e061      	b.n	800292a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002866:	4b11      	ldr	r3, [pc, #68]	; (80028ac <HAL_RCC_ClockConfig+0x260>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 020c 	and.w	r2, r3, #12
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	429a      	cmp	r2, r3
 8002876:	d1eb      	bne.n	8002850 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002878:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <HAL_RCC_ClockConfig+0x25c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d214      	bcs.n	80028b0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002886:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <HAL_RCC_ClockConfig+0x25c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 0207 	bic.w	r2, r3, #7
 800288e:	4906      	ldr	r1, [pc, #24]	; (80028a8 <HAL_RCC_ClockConfig+0x25c>)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	4313      	orrs	r3, r2
 8002894:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002896:	4b04      	ldr	r3, [pc, #16]	; (80028a8 <HAL_RCC_ClockConfig+0x25c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d005      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e040      	b.n	800292a <HAL_RCC_ClockConfig+0x2de>
 80028a8:	40022000 	.word	0x40022000
 80028ac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d008      	beq.n	80028ce <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028bc:	4b1d      	ldr	r3, [pc, #116]	; (8002934 <HAL_RCC_ClockConfig+0x2e8>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	491a      	ldr	r1, [pc, #104]	; (8002934 <HAL_RCC_ClockConfig+0x2e8>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d009      	beq.n	80028ee <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028da:	4b16      	ldr	r3, [pc, #88]	; (8002934 <HAL_RCC_ClockConfig+0x2e8>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	4912      	ldr	r1, [pc, #72]	; (8002934 <HAL_RCC_ClockConfig+0x2e8>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80028ee:	f000 f829 	bl	8002944 <HAL_RCC_GetSysClockFreq>
 80028f2:	4601      	mov	r1, r0
 80028f4:	4b0f      	ldr	r3, [pc, #60]	; (8002934 <HAL_RCC_ClockConfig+0x2e8>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028fc:	22f0      	movs	r2, #240	; 0xf0
 80028fe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	fa92 f2a2 	rbit	r2, r2
 8002906:	60fa      	str	r2, [r7, #12]
  return result;
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	fab2 f282 	clz	r2, r2
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	40d3      	lsrs	r3, r2
 8002912:	4a09      	ldr	r2, [pc, #36]	; (8002938 <HAL_RCC_ClockConfig+0x2ec>)
 8002914:	5cd3      	ldrb	r3, [r2, r3]
 8002916:	fa21 f303 	lsr.w	r3, r1, r3
 800291a:	4a08      	ldr	r2, [pc, #32]	; (800293c <HAL_RCC_ClockConfig+0x2f0>)
 800291c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800291e:	4b08      	ldr	r3, [pc, #32]	; (8002940 <HAL_RCC_ClockConfig+0x2f4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7fe fb40 	bl	8000fa8 <HAL_InitTick>
  
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3778      	adds	r7, #120	; 0x78
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40021000 	.word	0x40021000
 8002938:	08005150 	.word	0x08005150
 800293c:	20000000 	.word	0x20000000
 8002940:	20000004 	.word	0x20000004

08002944 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002944:	b480      	push	{r7}
 8002946:	b08b      	sub	sp, #44	; 0x2c
 8002948:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
 800294e:	2300      	movs	r3, #0
 8002950:	61bb      	str	r3, [r7, #24]
 8002952:	2300      	movs	r3, #0
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
 8002956:	2300      	movs	r3, #0
 8002958:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800295a:	2300      	movs	r3, #0
 800295c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800295e:	4b29      	ldr	r3, [pc, #164]	; (8002a04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f003 030c 	and.w	r3, r3, #12
 800296a:	2b04      	cmp	r3, #4
 800296c:	d002      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0x30>
 800296e:	2b08      	cmp	r3, #8
 8002970:	d003      	beq.n	800297a <HAL_RCC_GetSysClockFreq+0x36>
 8002972:	e03c      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002974:	4b24      	ldr	r3, [pc, #144]	; (8002a08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002976:	623b      	str	r3, [r7, #32]
      break;
 8002978:	e03c      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002980:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002984:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	fa92 f2a2 	rbit	r2, r2
 800298c:	607a      	str	r2, [r7, #4]
  return result;
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	fab2 f282 	clz	r2, r2
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	40d3      	lsrs	r3, r2
 8002998:	4a1c      	ldr	r2, [pc, #112]	; (8002a0c <HAL_RCC_GetSysClockFreq+0xc8>)
 800299a:	5cd3      	ldrb	r3, [r2, r3]
 800299c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800299e:	4b19      	ldr	r3, [pc, #100]	; (8002a04 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	220f      	movs	r2, #15
 80029a8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	fa92 f2a2 	rbit	r2, r2
 80029b0:	60fa      	str	r2, [r7, #12]
  return result;
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	fab2 f282 	clz	r2, r2
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	40d3      	lsrs	r3, r2
 80029bc:	4a14      	ldr	r2, [pc, #80]	; (8002a10 <HAL_RCC_GetSysClockFreq+0xcc>)
 80029be:	5cd3      	ldrb	r3, [r2, r3]
 80029c0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d008      	beq.n	80029de <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80029cc:	4a0e      	ldr	r2, [pc, #56]	; (8002a08 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	fb02 f303 	mul.w	r3, r2, r3
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
 80029dc:	e004      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	4a0c      	ldr	r2, [pc, #48]	; (8002a14 <HAL_RCC_GetSysClockFreq+0xd0>)
 80029e2:	fb02 f303 	mul.w	r3, r2, r3
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	623b      	str	r3, [r7, #32]
      break;
 80029ec:	e002      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029ee:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029f0:	623b      	str	r3, [r7, #32]
      break;
 80029f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029f4:	6a3b      	ldr	r3, [r7, #32]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	372c      	adds	r7, #44	; 0x2c
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	40021000 	.word	0x40021000
 8002a08:	007a1200 	.word	0x007a1200
 8002a0c:	08005168 	.word	0x08005168
 8002a10:	08005178 	.word	0x08005178
 8002a14:	003d0900 	.word	0x003d0900

08002a18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a1c:	4b03      	ldr	r3, [pc, #12]	; (8002a2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	20000000 	.word	0x20000000

08002a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002a36:	f7ff ffef 	bl	8002a18 <HAL_RCC_GetHCLKFreq>
 8002a3a:	4601      	mov	r1, r0
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a44:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a48:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	fa92 f2a2 	rbit	r2, r2
 8002a50:	603a      	str	r2, [r7, #0]
  return result;
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	fab2 f282 	clz	r2, r2
 8002a58:	b2d2      	uxtb	r2, r2
 8002a5a:	40d3      	lsrs	r3, r2
 8002a5c:	4a04      	ldr	r2, [pc, #16]	; (8002a70 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002a5e:	5cd3      	ldrb	r3, [r2, r3]
 8002a60:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	08005160 	.word	0x08005160

08002a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002a7a:	f7ff ffcd 	bl	8002a18 <HAL_RCC_GetHCLKFreq>
 8002a7e:	4601      	mov	r1, r0
 8002a80:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002a88:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002a8c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	fa92 f2a2 	rbit	r2, r2
 8002a94:	603a      	str	r2, [r7, #0]
  return result;
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	fab2 f282 	clz	r2, r2
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	40d3      	lsrs	r3, r2
 8002aa0:	4a04      	ldr	r2, [pc, #16]	; (8002ab4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002aa2:	5cd3      	ldrb	r3, [r2, r3]
 8002aa4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	08005160 	.word	0x08005160

08002ab8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b092      	sub	sp, #72	; 0x48
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 80d4 	beq.w	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002adc:	4b4e      	ldr	r3, [pc, #312]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10e      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ae8:	4b4b      	ldr	r3, [pc, #300]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	4a4a      	ldr	r2, [pc, #296]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af2:	61d3      	str	r3, [r2, #28]
 8002af4:	4b48      	ldr	r3, [pc, #288]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afc:	60bb      	str	r3, [r7, #8]
 8002afe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b00:	2301      	movs	r3, #1
 8002b02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b06:	4b45      	ldr	r3, [pc, #276]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d118      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b12:	4b42      	ldr	r3, [pc, #264]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a41      	ldr	r2, [pc, #260]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b1c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b1e:	f7fe fa87 	bl	8001030 <HAL_GetTick>
 8002b22:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b24:	e008      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b26:	f7fe fa83 	bl	8001030 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b64      	cmp	r3, #100	; 0x64
 8002b32:	d901      	bls.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e169      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b38:	4b38      	ldr	r3, [pc, #224]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0f0      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b44:	4b34      	ldr	r3, [pc, #208]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 8084 	beq.w	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d07c      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b64:	4b2c      	ldr	r3, [pc, #176]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b76:	fa93 f3a3 	rbit	r3, r3
 8002b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b7e:	fab3 f383 	clz	r3, r3
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	461a      	mov	r2, r3
 8002b86:	4b26      	ldr	r3, [pc, #152]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b88:	4413      	add	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	2301      	movs	r3, #1
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9a:	fa93 f3a3 	rbit	r3, r3
 8002b9e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ba2:	fab3 f383 	clz	r3, r3
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4b1d      	ldr	r3, [pc, #116]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bac:	4413      	add	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bb6:	4a18      	ldr	r2, [pc, #96]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bba:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d04b      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc6:	f7fe fa33 	bl	8001030 <HAL_GetTick>
 8002bca:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bcc:	e00a      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bce:	f7fe fa2f 	bl	8001030 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e113      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002be4:	2302      	movs	r3, #2
 8002be6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bea:	fa93 f3a3 	rbit	r3, r3
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	623b      	str	r3, [r7, #32]
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	61fb      	str	r3, [r7, #28]
  return result;
 8002bfc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bfe:	fab3 f383 	clz	r3, r3
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	095b      	lsrs	r3, r3, #5
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	f043 0302 	orr.w	r3, r3, #2
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d108      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002c12:	4b01      	ldr	r3, [pc, #4]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	e00d      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40007000 	.word	0x40007000
 8002c20:	10908100 	.word	0x10908100
 8002c24:	2302      	movs	r3, #2
 8002c26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	fa93 f3a3 	rbit	r3, r3
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	4b78      	ldr	r3, [pc, #480]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	2202      	movs	r2, #2
 8002c36:	613a      	str	r2, [r7, #16]
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	fa92 f2a2 	rbit	r2, r2
 8002c3e:	60fa      	str	r2, [r7, #12]
  return result;
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	fab2 f282 	clz	r2, r2
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	f002 021f 	and.w	r2, r2, #31
 8002c52:	2101      	movs	r1, #1
 8002c54:	fa01 f202 	lsl.w	r2, r1, r2
 8002c58:	4013      	ands	r3, r2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0b7      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002c5e:	4b6d      	ldr	r3, [pc, #436]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	496a      	ldr	r1, [pc, #424]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c70:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d105      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c78:	4b66      	ldr	r3, [pc, #408]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	4a65      	ldr	r2, [pc, #404]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d008      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c90:	4b60      	ldr	r3, [pc, #384]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	f023 0203 	bic.w	r2, r3, #3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	495d      	ldr	r1, [pc, #372]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d008      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cae:	4b59      	ldr	r3, [pc, #356]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	4956      	ldr	r1, [pc, #344]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d008      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ccc:	4b51      	ldr	r3, [pc, #324]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	494e      	ldr	r1, [pc, #312]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0320 	and.w	r3, r3, #32
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d008      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cea:	4b4a      	ldr	r3, [pc, #296]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	f023 0210 	bic.w	r2, r3, #16
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	4947      	ldr	r1, [pc, #284]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d008      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002d08:	4b42      	ldr	r3, [pc, #264]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d14:	493f      	ldr	r1, [pc, #252]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d008      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d26:	4b3b      	ldr	r3, [pc, #236]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	f023 0220 	bic.w	r2, r3, #32
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	4938      	ldr	r1, [pc, #224]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0308 	and.w	r3, r3, #8
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d008      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d44:	4b33      	ldr	r3, [pc, #204]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	4930      	ldr	r1, [pc, #192]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0310 	and.w	r3, r3, #16
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d008      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d62:	4b2c      	ldr	r3, [pc, #176]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	4929      	ldr	r1, [pc, #164]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d008      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d80:	4b24      	ldr	r3, [pc, #144]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	4921      	ldr	r1, [pc, #132]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d008      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d9e:	4b1d      	ldr	r3, [pc, #116]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	491a      	ldr	r1, [pc, #104]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d008      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002dbc:	4b15      	ldr	r3, [pc, #84]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc8:	4912      	ldr	r1, [pc, #72]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d008      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002dda:	4b0e      	ldr	r3, [pc, #56]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	490b      	ldr	r1, [pc, #44]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d008      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002df8:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e04:	4903      	ldr	r1, [pc, #12]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3748      	adds	r7, #72	; 0x48
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40021000 	.word	0x40021000

08002e18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e049      	b.n	8002ebe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d106      	bne.n	8002e44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7fd feac 	bl	8000b9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2202      	movs	r2, #2
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3304      	adds	r3, #4
 8002e54:	4619      	mov	r1, r3
 8002e56:	4610      	mov	r0, r2
 8002e58:	f000 fad8 	bl	800340c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
	...

08002ec8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d001      	beq.n	8002ee0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e042      	b.n	8002f66 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a21      	ldr	r2, [pc, #132]	; (8002f74 <HAL_TIM_Base_Start+0xac>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d018      	beq.n	8002f24 <HAL_TIM_Base_Start+0x5c>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002efa:	d013      	beq.n	8002f24 <HAL_TIM_Base_Start+0x5c>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a1d      	ldr	r2, [pc, #116]	; (8002f78 <HAL_TIM_Base_Start+0xb0>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d00e      	beq.n	8002f24 <HAL_TIM_Base_Start+0x5c>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a1c      	ldr	r2, [pc, #112]	; (8002f7c <HAL_TIM_Base_Start+0xb4>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d009      	beq.n	8002f24 <HAL_TIM_Base_Start+0x5c>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a1a      	ldr	r2, [pc, #104]	; (8002f80 <HAL_TIM_Base_Start+0xb8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d004      	beq.n	8002f24 <HAL_TIM_Base_Start+0x5c>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a19      	ldr	r2, [pc, #100]	; (8002f84 <HAL_TIM_Base_Start+0xbc>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d115      	bne.n	8002f50 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	4b17      	ldr	r3, [pc, #92]	; (8002f88 <HAL_TIM_Base_Start+0xc0>)
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2b06      	cmp	r3, #6
 8002f34:	d015      	beq.n	8002f62 <HAL_TIM_Base_Start+0x9a>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f3c:	d011      	beq.n	8002f62 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f042 0201 	orr.w	r2, r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f4e:	e008      	b.n	8002f62 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0201 	orr.w	r2, r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	e000      	b.n	8002f64 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	40012c00 	.word	0x40012c00
 8002f78:	40000400 	.word	0x40000400
 8002f7c:	40000800 	.word	0x40000800
 8002f80:	40013400 	.word	0x40013400
 8002f84:	40014000 	.word	0x40014000
 8002f88:	00010007 	.word	0x00010007

08002f8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e049      	b.n	8003032 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d106      	bne.n	8002fb8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f841 	bl	800303a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4610      	mov	r0, r2
 8002fcc:	f000 fa1e 	bl	800340c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
	...

08003050 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800305c:	2300      	movs	r3, #0
 800305e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003066:	2b01      	cmp	r3, #1
 8003068:	d101      	bne.n	800306e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800306a:	2302      	movs	r3, #2
 800306c:	e0ff      	b.n	800326e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b14      	cmp	r3, #20
 800307a:	f200 80f0 	bhi.w	800325e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800307e:	a201      	add	r2, pc, #4	; (adr r2, 8003084 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003084:	080030d9 	.word	0x080030d9
 8003088:	0800325f 	.word	0x0800325f
 800308c:	0800325f 	.word	0x0800325f
 8003090:	0800325f 	.word	0x0800325f
 8003094:	08003119 	.word	0x08003119
 8003098:	0800325f 	.word	0x0800325f
 800309c:	0800325f 	.word	0x0800325f
 80030a0:	0800325f 	.word	0x0800325f
 80030a4:	0800315b 	.word	0x0800315b
 80030a8:	0800325f 	.word	0x0800325f
 80030ac:	0800325f 	.word	0x0800325f
 80030b0:	0800325f 	.word	0x0800325f
 80030b4:	0800319b 	.word	0x0800319b
 80030b8:	0800325f 	.word	0x0800325f
 80030bc:	0800325f 	.word	0x0800325f
 80030c0:	0800325f 	.word	0x0800325f
 80030c4:	080031dd 	.word	0x080031dd
 80030c8:	0800325f 	.word	0x0800325f
 80030cc:	0800325f 	.word	0x0800325f
 80030d0:	0800325f 	.word	0x0800325f
 80030d4:	0800321d 	.word	0x0800321d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68b9      	ldr	r1, [r7, #8]
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 fa24 	bl	800352c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699a      	ldr	r2, [r3, #24]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0208 	orr.w	r2, r2, #8
 80030f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	699a      	ldr	r2, [r3, #24]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0204 	bic.w	r2, r2, #4
 8003102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6999      	ldr	r1, [r3, #24]
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	691a      	ldr	r2, [r3, #16]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	619a      	str	r2, [r3, #24]
      break;
 8003116:	e0a5      	b.n	8003264 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68b9      	ldr	r1, [r7, #8]
 800311e:	4618      	mov	r0, r3
 8003120:	f000 fa94 	bl	800364c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699a      	ldr	r2, [r3, #24]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003132:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	699a      	ldr	r2, [r3, #24]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003142:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6999      	ldr	r1, [r3, #24]
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	021a      	lsls	r2, r3, #8
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	619a      	str	r2, [r3, #24]
      break;
 8003158:	e084      	b.n	8003264 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68b9      	ldr	r1, [r7, #8]
 8003160:	4618      	mov	r0, r3
 8003162:	f000 fafd 	bl	8003760 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	69da      	ldr	r2, [r3, #28]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 0208 	orr.w	r2, r2, #8
 8003174:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	69da      	ldr	r2, [r3, #28]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0204 	bic.w	r2, r2, #4
 8003184:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	69d9      	ldr	r1, [r3, #28]
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	691a      	ldr	r2, [r3, #16]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	61da      	str	r2, [r3, #28]
      break;
 8003198:	e064      	b.n	8003264 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68b9      	ldr	r1, [r7, #8]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 fb65 	bl	8003870 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	69da      	ldr	r2, [r3, #28]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	69da      	ldr	r2, [r3, #28]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	69d9      	ldr	r1, [r3, #28]
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	021a      	lsls	r2, r3, #8
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	61da      	str	r2, [r3, #28]
      break;
 80031da:	e043      	b.n	8003264 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68b9      	ldr	r1, [r7, #8]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 fbae 	bl	8003944 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0208 	orr.w	r2, r2, #8
 80031f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0204 	bic.w	r2, r2, #4
 8003206:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	691a      	ldr	r2, [r3, #16]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800321a:	e023      	b.n	8003264 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68b9      	ldr	r1, [r7, #8]
 8003222:	4618      	mov	r0, r3
 8003224:	f000 fbf2 	bl	8003a0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003236:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003246:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	021a      	lsls	r2, r3, #8
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800325c:	e002      	b.n	8003264 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	75fb      	strb	r3, [r7, #23]
      break;
 8003262:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800326c:	7dfb      	ldrb	r3, [r7, #23]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop

08003278 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800328c:	2b01      	cmp	r3, #1
 800328e:	d101      	bne.n	8003294 <HAL_TIM_ConfigClockSource+0x1c>
 8003290:	2302      	movs	r3, #2
 8003292:	e0b6      	b.n	8003402 <HAL_TIM_ConfigClockSource+0x18a>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032d0:	d03e      	beq.n	8003350 <HAL_TIM_ConfigClockSource+0xd8>
 80032d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032d6:	f200 8087 	bhi.w	80033e8 <HAL_TIM_ConfigClockSource+0x170>
 80032da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032de:	f000 8086 	beq.w	80033ee <HAL_TIM_ConfigClockSource+0x176>
 80032e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e6:	d87f      	bhi.n	80033e8 <HAL_TIM_ConfigClockSource+0x170>
 80032e8:	2b70      	cmp	r3, #112	; 0x70
 80032ea:	d01a      	beq.n	8003322 <HAL_TIM_ConfigClockSource+0xaa>
 80032ec:	2b70      	cmp	r3, #112	; 0x70
 80032ee:	d87b      	bhi.n	80033e8 <HAL_TIM_ConfigClockSource+0x170>
 80032f0:	2b60      	cmp	r3, #96	; 0x60
 80032f2:	d050      	beq.n	8003396 <HAL_TIM_ConfigClockSource+0x11e>
 80032f4:	2b60      	cmp	r3, #96	; 0x60
 80032f6:	d877      	bhi.n	80033e8 <HAL_TIM_ConfigClockSource+0x170>
 80032f8:	2b50      	cmp	r3, #80	; 0x50
 80032fa:	d03c      	beq.n	8003376 <HAL_TIM_ConfigClockSource+0xfe>
 80032fc:	2b50      	cmp	r3, #80	; 0x50
 80032fe:	d873      	bhi.n	80033e8 <HAL_TIM_ConfigClockSource+0x170>
 8003300:	2b40      	cmp	r3, #64	; 0x40
 8003302:	d058      	beq.n	80033b6 <HAL_TIM_ConfigClockSource+0x13e>
 8003304:	2b40      	cmp	r3, #64	; 0x40
 8003306:	d86f      	bhi.n	80033e8 <HAL_TIM_ConfigClockSource+0x170>
 8003308:	2b30      	cmp	r3, #48	; 0x30
 800330a:	d064      	beq.n	80033d6 <HAL_TIM_ConfigClockSource+0x15e>
 800330c:	2b30      	cmp	r3, #48	; 0x30
 800330e:	d86b      	bhi.n	80033e8 <HAL_TIM_ConfigClockSource+0x170>
 8003310:	2b20      	cmp	r3, #32
 8003312:	d060      	beq.n	80033d6 <HAL_TIM_ConfigClockSource+0x15e>
 8003314:	2b20      	cmp	r3, #32
 8003316:	d867      	bhi.n	80033e8 <HAL_TIM_ConfigClockSource+0x170>
 8003318:	2b00      	cmp	r3, #0
 800331a:	d05c      	beq.n	80033d6 <HAL_TIM_ConfigClockSource+0x15e>
 800331c:	2b10      	cmp	r3, #16
 800331e:	d05a      	beq.n	80033d6 <HAL_TIM_ConfigClockSource+0x15e>
 8003320:	e062      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6818      	ldr	r0, [r3, #0]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	6899      	ldr	r1, [r3, #8]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f000 fc4b 	bl	8003bcc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003344:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	609a      	str	r2, [r3, #8]
      break;
 800334e:	e04f      	b.n	80033f0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6818      	ldr	r0, [r3, #0]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	6899      	ldr	r1, [r3, #8]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	f000 fc34 	bl	8003bcc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003372:	609a      	str	r2, [r3, #8]
      break;
 8003374:	e03c      	b.n	80033f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6818      	ldr	r0, [r3, #0]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	6859      	ldr	r1, [r3, #4]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	461a      	mov	r2, r3
 8003384:	f000 fba8 	bl	8003ad8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2150      	movs	r1, #80	; 0x50
 800338e:	4618      	mov	r0, r3
 8003390:	f000 fc01 	bl	8003b96 <TIM_ITRx_SetConfig>
      break;
 8003394:	e02c      	b.n	80033f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6818      	ldr	r0, [r3, #0]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	6859      	ldr	r1, [r3, #4]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	461a      	mov	r2, r3
 80033a4:	f000 fbc7 	bl	8003b36 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2160      	movs	r1, #96	; 0x60
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 fbf1 	bl	8003b96 <TIM_ITRx_SetConfig>
      break;
 80033b4:	e01c      	b.n	80033f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6818      	ldr	r0, [r3, #0]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	6859      	ldr	r1, [r3, #4]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	461a      	mov	r2, r3
 80033c4:	f000 fb88 	bl	8003ad8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2140      	movs	r1, #64	; 0x40
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 fbe1 	bl	8003b96 <TIM_ITRx_SetConfig>
      break;
 80033d4:	e00c      	b.n	80033f0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4619      	mov	r1, r3
 80033e0:	4610      	mov	r0, r2
 80033e2:	f000 fbd8 	bl	8003b96 <TIM_ITRx_SetConfig>
      break;
 80033e6:	e003      	b.n	80033f0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	73fb      	strb	r3, [r7, #15]
      break;
 80033ec:	e000      	b.n	80033f0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80033ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003400:	7bfb      	ldrb	r3, [r7, #15]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
	...

0800340c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a3c      	ldr	r2, [pc, #240]	; (8003510 <TIM_Base_SetConfig+0x104>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d00f      	beq.n	8003444 <TIM_Base_SetConfig+0x38>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800342a:	d00b      	beq.n	8003444 <TIM_Base_SetConfig+0x38>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a39      	ldr	r2, [pc, #228]	; (8003514 <TIM_Base_SetConfig+0x108>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d007      	beq.n	8003444 <TIM_Base_SetConfig+0x38>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a38      	ldr	r2, [pc, #224]	; (8003518 <TIM_Base_SetConfig+0x10c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d003      	beq.n	8003444 <TIM_Base_SetConfig+0x38>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a37      	ldr	r2, [pc, #220]	; (800351c <TIM_Base_SetConfig+0x110>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d108      	bne.n	8003456 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800344a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a2d      	ldr	r2, [pc, #180]	; (8003510 <TIM_Base_SetConfig+0x104>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d01b      	beq.n	8003496 <TIM_Base_SetConfig+0x8a>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003464:	d017      	beq.n	8003496 <TIM_Base_SetConfig+0x8a>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a2a      	ldr	r2, [pc, #168]	; (8003514 <TIM_Base_SetConfig+0x108>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d013      	beq.n	8003496 <TIM_Base_SetConfig+0x8a>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a29      	ldr	r2, [pc, #164]	; (8003518 <TIM_Base_SetConfig+0x10c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d00f      	beq.n	8003496 <TIM_Base_SetConfig+0x8a>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a28      	ldr	r2, [pc, #160]	; (800351c <TIM_Base_SetConfig+0x110>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00b      	beq.n	8003496 <TIM_Base_SetConfig+0x8a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a27      	ldr	r2, [pc, #156]	; (8003520 <TIM_Base_SetConfig+0x114>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d007      	beq.n	8003496 <TIM_Base_SetConfig+0x8a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a26      	ldr	r2, [pc, #152]	; (8003524 <TIM_Base_SetConfig+0x118>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d003      	beq.n	8003496 <TIM_Base_SetConfig+0x8a>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a25      	ldr	r2, [pc, #148]	; (8003528 <TIM_Base_SetConfig+0x11c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d108      	bne.n	80034a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800349c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a10      	ldr	r2, [pc, #64]	; (8003510 <TIM_Base_SetConfig+0x104>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d00f      	beq.n	80034f4 <TIM_Base_SetConfig+0xe8>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a11      	ldr	r2, [pc, #68]	; (800351c <TIM_Base_SetConfig+0x110>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00b      	beq.n	80034f4 <TIM_Base_SetConfig+0xe8>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a10      	ldr	r2, [pc, #64]	; (8003520 <TIM_Base_SetConfig+0x114>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d007      	beq.n	80034f4 <TIM_Base_SetConfig+0xe8>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a0f      	ldr	r2, [pc, #60]	; (8003524 <TIM_Base_SetConfig+0x118>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d003      	beq.n	80034f4 <TIM_Base_SetConfig+0xe8>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a0e      	ldr	r2, [pc, #56]	; (8003528 <TIM_Base_SetConfig+0x11c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d103      	bne.n	80034fc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	691a      	ldr	r2, [r3, #16]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	615a      	str	r2, [r3, #20]
}
 8003502:	bf00      	nop
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	40012c00 	.word	0x40012c00
 8003514:	40000400 	.word	0x40000400
 8003518:	40000800 	.word	0x40000800
 800351c:	40013400 	.word	0x40013400
 8003520:	40014000 	.word	0x40014000
 8003524:	40014400 	.word	0x40014400
 8003528:	40014800 	.word	0x40014800

0800352c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800352c:	b480      	push	{r7}
 800352e:	b087      	sub	sp, #28
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	f023 0201 	bic.w	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800355a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f023 0303 	bic.w	r3, r3, #3
 8003566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4313      	orrs	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f023 0302 	bic.w	r3, r3, #2
 8003578:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	4313      	orrs	r3, r2
 8003582:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a2c      	ldr	r2, [pc, #176]	; (8003638 <TIM_OC1_SetConfig+0x10c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d00f      	beq.n	80035ac <TIM_OC1_SetConfig+0x80>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a2b      	ldr	r2, [pc, #172]	; (800363c <TIM_OC1_SetConfig+0x110>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d00b      	beq.n	80035ac <TIM_OC1_SetConfig+0x80>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a2a      	ldr	r2, [pc, #168]	; (8003640 <TIM_OC1_SetConfig+0x114>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d007      	beq.n	80035ac <TIM_OC1_SetConfig+0x80>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a29      	ldr	r2, [pc, #164]	; (8003644 <TIM_OC1_SetConfig+0x118>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d003      	beq.n	80035ac <TIM_OC1_SetConfig+0x80>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a28      	ldr	r2, [pc, #160]	; (8003648 <TIM_OC1_SetConfig+0x11c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d10c      	bne.n	80035c6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f023 0308 	bic.w	r3, r3, #8
 80035b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f023 0304 	bic.w	r3, r3, #4
 80035c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a1b      	ldr	r2, [pc, #108]	; (8003638 <TIM_OC1_SetConfig+0x10c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d00f      	beq.n	80035ee <TIM_OC1_SetConfig+0xc2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a1a      	ldr	r2, [pc, #104]	; (800363c <TIM_OC1_SetConfig+0x110>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d00b      	beq.n	80035ee <TIM_OC1_SetConfig+0xc2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a19      	ldr	r2, [pc, #100]	; (8003640 <TIM_OC1_SetConfig+0x114>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d007      	beq.n	80035ee <TIM_OC1_SetConfig+0xc2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a18      	ldr	r2, [pc, #96]	; (8003644 <TIM_OC1_SetConfig+0x118>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d003      	beq.n	80035ee <TIM_OC1_SetConfig+0xc2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a17      	ldr	r2, [pc, #92]	; (8003648 <TIM_OC1_SetConfig+0x11c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d111      	bne.n	8003612 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	4313      	orrs	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	4313      	orrs	r3, r2
 8003610:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	621a      	str	r2, [r3, #32]
}
 800362c:	bf00      	nop
 800362e:	371c      	adds	r7, #28
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	40012c00 	.word	0x40012c00
 800363c:	40013400 	.word	0x40013400
 8003640:	40014000 	.word	0x40014000
 8003644:	40014400 	.word	0x40014400
 8003648:	40014800 	.word	0x40014800

0800364c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800364c:	b480      	push	{r7}
 800364e:	b087      	sub	sp, #28
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	f023 0210 	bic.w	r2, r3, #16
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800367a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800367e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003686:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	021b      	lsls	r3, r3, #8
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	4313      	orrs	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f023 0320 	bic.w	r3, r3, #32
 800369a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a28      	ldr	r2, [pc, #160]	; (800374c <TIM_OC2_SetConfig+0x100>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d003      	beq.n	80036b8 <TIM_OC2_SetConfig+0x6c>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a27      	ldr	r2, [pc, #156]	; (8003750 <TIM_OC2_SetConfig+0x104>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d10d      	bne.n	80036d4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a1d      	ldr	r2, [pc, #116]	; (800374c <TIM_OC2_SetConfig+0x100>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d00f      	beq.n	80036fc <TIM_OC2_SetConfig+0xb0>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a1c      	ldr	r2, [pc, #112]	; (8003750 <TIM_OC2_SetConfig+0x104>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d00b      	beq.n	80036fc <TIM_OC2_SetConfig+0xb0>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a1b      	ldr	r2, [pc, #108]	; (8003754 <TIM_OC2_SetConfig+0x108>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d007      	beq.n	80036fc <TIM_OC2_SetConfig+0xb0>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a1a      	ldr	r2, [pc, #104]	; (8003758 <TIM_OC2_SetConfig+0x10c>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d003      	beq.n	80036fc <TIM_OC2_SetConfig+0xb0>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a19      	ldr	r2, [pc, #100]	; (800375c <TIM_OC2_SetConfig+0x110>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d113      	bne.n	8003724 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003702:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800370a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4313      	orrs	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4313      	orrs	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	621a      	str	r2, [r3, #32]
}
 800373e:	bf00      	nop
 8003740:	371c      	adds	r7, #28
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	40012c00 	.word	0x40012c00
 8003750:	40013400 	.word	0x40013400
 8003754:	40014000 	.word	0x40014000
 8003758:	40014400 	.word	0x40014400
 800375c:	40014800 	.word	0x40014800

08003760 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003760:	b480      	push	{r7}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800378e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f023 0303 	bic.w	r3, r3, #3
 800379a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	021b      	lsls	r3, r3, #8
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a27      	ldr	r2, [pc, #156]	; (800385c <TIM_OC3_SetConfig+0xfc>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d003      	beq.n	80037ca <TIM_OC3_SetConfig+0x6a>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a26      	ldr	r2, [pc, #152]	; (8003860 <TIM_OC3_SetConfig+0x100>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d10d      	bne.n	80037e6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	021b      	lsls	r3, r3, #8
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	4313      	orrs	r3, r2
 80037dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037e4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a1c      	ldr	r2, [pc, #112]	; (800385c <TIM_OC3_SetConfig+0xfc>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d00f      	beq.n	800380e <TIM_OC3_SetConfig+0xae>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a1b      	ldr	r2, [pc, #108]	; (8003860 <TIM_OC3_SetConfig+0x100>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d00b      	beq.n	800380e <TIM_OC3_SetConfig+0xae>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a1a      	ldr	r2, [pc, #104]	; (8003864 <TIM_OC3_SetConfig+0x104>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d007      	beq.n	800380e <TIM_OC3_SetConfig+0xae>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a19      	ldr	r2, [pc, #100]	; (8003868 <TIM_OC3_SetConfig+0x108>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d003      	beq.n	800380e <TIM_OC3_SetConfig+0xae>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a18      	ldr	r2, [pc, #96]	; (800386c <TIM_OC3_SetConfig+0x10c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d113      	bne.n	8003836 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800381c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4313      	orrs	r3, r2
 8003828:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	4313      	orrs	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	621a      	str	r2, [r3, #32]
}
 8003850:	bf00      	nop
 8003852:	371c      	adds	r7, #28
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	40012c00 	.word	0x40012c00
 8003860:	40013400 	.word	0x40013400
 8003864:	40014000 	.word	0x40014000
 8003868:	40014400 	.word	0x40014400
 800386c:	40014800 	.word	0x40014800

08003870 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003870:	b480      	push	{r7}
 8003872:	b087      	sub	sp, #28
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800389e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	021b      	lsls	r3, r3, #8
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	031b      	lsls	r3, r3, #12
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a18      	ldr	r2, [pc, #96]	; (8003930 <TIM_OC4_SetConfig+0xc0>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d00f      	beq.n	80038f4 <TIM_OC4_SetConfig+0x84>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a17      	ldr	r2, [pc, #92]	; (8003934 <TIM_OC4_SetConfig+0xc4>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d00b      	beq.n	80038f4 <TIM_OC4_SetConfig+0x84>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a16      	ldr	r2, [pc, #88]	; (8003938 <TIM_OC4_SetConfig+0xc8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d007      	beq.n	80038f4 <TIM_OC4_SetConfig+0x84>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a15      	ldr	r2, [pc, #84]	; (800393c <TIM_OC4_SetConfig+0xcc>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d003      	beq.n	80038f4 <TIM_OC4_SetConfig+0x84>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a14      	ldr	r2, [pc, #80]	; (8003940 <TIM_OC4_SetConfig+0xd0>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d109      	bne.n	8003908 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	019b      	lsls	r3, r3, #6
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	4313      	orrs	r3, r2
 8003906:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	621a      	str	r2, [r3, #32]
}
 8003922:	bf00      	nop
 8003924:	371c      	adds	r7, #28
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	40012c00 	.word	0x40012c00
 8003934:	40013400 	.word	0x40013400
 8003938:	40014000 	.word	0x40014000
 800393c:	40014400 	.word	0x40014400
 8003940:	40014800 	.word	0x40014800

08003944 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003988:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	041b      	lsls	r3, r3, #16
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	4313      	orrs	r3, r2
 8003994:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a17      	ldr	r2, [pc, #92]	; (80039f8 <TIM_OC5_SetConfig+0xb4>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d00f      	beq.n	80039be <TIM_OC5_SetConfig+0x7a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a16      	ldr	r2, [pc, #88]	; (80039fc <TIM_OC5_SetConfig+0xb8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d00b      	beq.n	80039be <TIM_OC5_SetConfig+0x7a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a15      	ldr	r2, [pc, #84]	; (8003a00 <TIM_OC5_SetConfig+0xbc>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d007      	beq.n	80039be <TIM_OC5_SetConfig+0x7a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a14      	ldr	r2, [pc, #80]	; (8003a04 <TIM_OC5_SetConfig+0xc0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d003      	beq.n	80039be <TIM_OC5_SetConfig+0x7a>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a13      	ldr	r2, [pc, #76]	; (8003a08 <TIM_OC5_SetConfig+0xc4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d109      	bne.n	80039d2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	021b      	lsls	r3, r3, #8
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	621a      	str	r2, [r3, #32]
}
 80039ec:	bf00      	nop
 80039ee:	371c      	adds	r7, #28
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	40012c00 	.word	0x40012c00
 80039fc:	40013400 	.word	0x40013400
 8003a00:	40014000 	.word	0x40014000
 8003a04:	40014400 	.word	0x40014400
 8003a08:	40014800 	.word	0x40014800

08003a0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	021b      	lsls	r3, r3, #8
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	051b      	lsls	r3, r3, #20
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a18      	ldr	r2, [pc, #96]	; (8003ac4 <TIM_OC6_SetConfig+0xb8>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d00f      	beq.n	8003a88 <TIM_OC6_SetConfig+0x7c>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a17      	ldr	r2, [pc, #92]	; (8003ac8 <TIM_OC6_SetConfig+0xbc>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d00b      	beq.n	8003a88 <TIM_OC6_SetConfig+0x7c>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a16      	ldr	r2, [pc, #88]	; (8003acc <TIM_OC6_SetConfig+0xc0>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d007      	beq.n	8003a88 <TIM_OC6_SetConfig+0x7c>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a15      	ldr	r2, [pc, #84]	; (8003ad0 <TIM_OC6_SetConfig+0xc4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d003      	beq.n	8003a88 <TIM_OC6_SetConfig+0x7c>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a14      	ldr	r2, [pc, #80]	; (8003ad4 <TIM_OC6_SetConfig+0xc8>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d109      	bne.n	8003a9c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	029b      	lsls	r3, r3, #10
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	621a      	str	r2, [r3, #32]
}
 8003ab6:	bf00      	nop
 8003ab8:	371c      	adds	r7, #28
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40012c00 	.word	0x40012c00
 8003ac8:	40013400 	.word	0x40013400
 8003acc:	40014000 	.word	0x40014000
 8003ad0:	40014400 	.word	0x40014400
 8003ad4:	40014800 	.word	0x40014800

08003ad8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b087      	sub	sp, #28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	f023 0201 	bic.w	r2, r3, #1
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f023 030a 	bic.w	r3, r3, #10
 8003b14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	621a      	str	r2, [r3, #32]
}
 8003b2a:	bf00      	nop
 8003b2c:	371c      	adds	r7, #28
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b087      	sub	sp, #28
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	60f8      	str	r0, [r7, #12]
 8003b3e:	60b9      	str	r1, [r7, #8]
 8003b40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	f023 0210 	bic.w	r2, r3, #16
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	031b      	lsls	r3, r3, #12
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	621a      	str	r2, [r3, #32]
}
 8003b8a:	bf00      	nop
 8003b8c:	371c      	adds	r7, #28
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b085      	sub	sp, #20
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	f043 0307 	orr.w	r3, r3, #7
 8003bb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	609a      	str	r2, [r3, #8]
}
 8003bc0:	bf00      	nop
 8003bc2:	3714      	adds	r7, #20
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003be6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	021a      	lsls	r2, r3, #8
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	609a      	str	r2, [r3, #8]
}
 8003c00:	bf00      	nop
 8003c02:	371c      	adds	r7, #28
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e063      	b.n	8003cec <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a2b      	ldr	r2, [pc, #172]	; (8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d004      	beq.n	8003c58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a2a      	ldr	r2, [pc, #168]	; (8003cfc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d108      	bne.n	8003c6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a1b      	ldr	r2, [pc, #108]	; (8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d018      	beq.n	8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c96:	d013      	beq.n	8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a18      	ldr	r2, [pc, #96]	; (8003d00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00e      	beq.n	8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a17      	ldr	r2, [pc, #92]	; (8003d04 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d009      	beq.n	8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a12      	ldr	r2, [pc, #72]	; (8003cfc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d004      	beq.n	8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a13      	ldr	r2, [pc, #76]	; (8003d08 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d10c      	bne.n	8003cda <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cc6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	40012c00 	.word	0x40012c00
 8003cfc:	40013400 	.word	0x40013400
 8003d00:	40000400 	.word	0x40000400
 8003d04:	40000800 	.word	0x40000800
 8003d08:	40014000 	.word	0x40014000

08003d0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e040      	b.n	8003da0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d106      	bne.n	8003d34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7fc ffd6 	bl	8000ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2224      	movs	r2, #36	; 0x24
 8003d38:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0201 	bic.w	r2, r2, #1
 8003d48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f8b6 	bl	8003ebc <UART_SetConfig>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d101      	bne.n	8003d5a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e022      	b.n	8003da0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 fa7c 	bl	8004260 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0201 	orr.w	r2, r2, #1
 8003d96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 fb03 	bl	80043a4 <UART_CheckIdleState>
 8003d9e:	4603      	mov	r3, r0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08a      	sub	sp, #40	; 0x28
 8003dac:	af02      	add	r7, sp, #8
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	603b      	str	r3, [r7, #0]
 8003db4:	4613      	mov	r3, r2
 8003db6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dbc:	2b20      	cmp	r3, #32
 8003dbe:	d178      	bne.n	8003eb2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d002      	beq.n	8003dcc <HAL_UART_Transmit+0x24>
 8003dc6:	88fb      	ldrh	r3, [r7, #6]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e071      	b.n	8003eb4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2221      	movs	r2, #33	; 0x21
 8003ddc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dde:	f7fd f927 	bl	8001030 <HAL_GetTick>
 8003de2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	88fa      	ldrh	r2, [r7, #6]
 8003de8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	88fa      	ldrh	r2, [r7, #6]
 8003df0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dfc:	d108      	bne.n	8003e10 <HAL_UART_Transmit+0x68>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d104      	bne.n	8003e10 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	61bb      	str	r3, [r7, #24]
 8003e0e:	e003      	b.n	8003e18 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e14:	2300      	movs	r3, #0
 8003e16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e18:	e030      	b.n	8003e7c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2200      	movs	r2, #0
 8003e22:	2180      	movs	r1, #128	; 0x80
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 fb65 	bl	80044f4 <UART_WaitOnFlagUntilTimeout>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d004      	beq.n	8003e3a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2220      	movs	r2, #32
 8003e34:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e03c      	b.n	8003eb4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10b      	bne.n	8003e58 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	881a      	ldrh	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e4c:	b292      	uxth	r2, r2
 8003e4e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	3302      	adds	r3, #2
 8003e54:	61bb      	str	r3, [r7, #24]
 8003e56:	e008      	b.n	8003e6a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	781a      	ldrb	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	b292      	uxth	r2, r2
 8003e62:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	3301      	adds	r3, #1
 8003e68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1c8      	bne.n	8003e1a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	2140      	movs	r1, #64	; 0x40
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 fb2e 	bl	80044f4 <UART_WaitOnFlagUntilTimeout>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d004      	beq.n	8003ea8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e005      	b.n	8003eb4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	e000      	b.n	8003eb4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003eb2:	2302      	movs	r3, #2
  }
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3720      	adds	r7, #32
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b088      	sub	sp, #32
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003eea:	f023 030c 	bic.w	r3, r3, #12
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6812      	ldr	r2, [r2, #0]
 8003ef2:	6979      	ldr	r1, [r7, #20]
 8003ef4:	430b      	orrs	r3, r1
 8003ef6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4aad      	ldr	r2, [pc, #692]	; (80041ec <UART_SetConfig+0x330>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d120      	bne.n	8003f7e <UART_SetConfig+0xc2>
 8003f3c:	4bac      	ldr	r3, [pc, #688]	; (80041f0 <UART_SetConfig+0x334>)
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f40:	f003 0303 	and.w	r3, r3, #3
 8003f44:	2b03      	cmp	r3, #3
 8003f46:	d817      	bhi.n	8003f78 <UART_SetConfig+0xbc>
 8003f48:	a201      	add	r2, pc, #4	; (adr r2, 8003f50 <UART_SetConfig+0x94>)
 8003f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4e:	bf00      	nop
 8003f50:	08003f61 	.word	0x08003f61
 8003f54:	08003f6d 	.word	0x08003f6d
 8003f58:	08003f73 	.word	0x08003f73
 8003f5c:	08003f67 	.word	0x08003f67
 8003f60:	2301      	movs	r3, #1
 8003f62:	77fb      	strb	r3, [r7, #31]
 8003f64:	e0b5      	b.n	80040d2 <UART_SetConfig+0x216>
 8003f66:	2302      	movs	r3, #2
 8003f68:	77fb      	strb	r3, [r7, #31]
 8003f6a:	e0b2      	b.n	80040d2 <UART_SetConfig+0x216>
 8003f6c:	2304      	movs	r3, #4
 8003f6e:	77fb      	strb	r3, [r7, #31]
 8003f70:	e0af      	b.n	80040d2 <UART_SetConfig+0x216>
 8003f72:	2308      	movs	r3, #8
 8003f74:	77fb      	strb	r3, [r7, #31]
 8003f76:	e0ac      	b.n	80040d2 <UART_SetConfig+0x216>
 8003f78:	2310      	movs	r3, #16
 8003f7a:	77fb      	strb	r3, [r7, #31]
 8003f7c:	e0a9      	b.n	80040d2 <UART_SetConfig+0x216>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a9c      	ldr	r2, [pc, #624]	; (80041f4 <UART_SetConfig+0x338>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d124      	bne.n	8003fd2 <UART_SetConfig+0x116>
 8003f88:	4b99      	ldr	r3, [pc, #612]	; (80041f0 <UART_SetConfig+0x334>)
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f94:	d011      	beq.n	8003fba <UART_SetConfig+0xfe>
 8003f96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f9a:	d817      	bhi.n	8003fcc <UART_SetConfig+0x110>
 8003f9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fa0:	d011      	beq.n	8003fc6 <UART_SetConfig+0x10a>
 8003fa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fa6:	d811      	bhi.n	8003fcc <UART_SetConfig+0x110>
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <UART_SetConfig+0xf8>
 8003fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb0:	d006      	beq.n	8003fc0 <UART_SetConfig+0x104>
 8003fb2:	e00b      	b.n	8003fcc <UART_SetConfig+0x110>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	77fb      	strb	r3, [r7, #31]
 8003fb8:	e08b      	b.n	80040d2 <UART_SetConfig+0x216>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	77fb      	strb	r3, [r7, #31]
 8003fbe:	e088      	b.n	80040d2 <UART_SetConfig+0x216>
 8003fc0:	2304      	movs	r3, #4
 8003fc2:	77fb      	strb	r3, [r7, #31]
 8003fc4:	e085      	b.n	80040d2 <UART_SetConfig+0x216>
 8003fc6:	2308      	movs	r3, #8
 8003fc8:	77fb      	strb	r3, [r7, #31]
 8003fca:	e082      	b.n	80040d2 <UART_SetConfig+0x216>
 8003fcc:	2310      	movs	r3, #16
 8003fce:	77fb      	strb	r3, [r7, #31]
 8003fd0:	e07f      	b.n	80040d2 <UART_SetConfig+0x216>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a88      	ldr	r2, [pc, #544]	; (80041f8 <UART_SetConfig+0x33c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d124      	bne.n	8004026 <UART_SetConfig+0x16a>
 8003fdc:	4b84      	ldr	r3, [pc, #528]	; (80041f0 <UART_SetConfig+0x334>)
 8003fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003fe4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003fe8:	d011      	beq.n	800400e <UART_SetConfig+0x152>
 8003fea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003fee:	d817      	bhi.n	8004020 <UART_SetConfig+0x164>
 8003ff0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ff4:	d011      	beq.n	800401a <UART_SetConfig+0x15e>
 8003ff6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ffa:	d811      	bhi.n	8004020 <UART_SetConfig+0x164>
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <UART_SetConfig+0x14c>
 8004000:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004004:	d006      	beq.n	8004014 <UART_SetConfig+0x158>
 8004006:	e00b      	b.n	8004020 <UART_SetConfig+0x164>
 8004008:	2300      	movs	r3, #0
 800400a:	77fb      	strb	r3, [r7, #31]
 800400c:	e061      	b.n	80040d2 <UART_SetConfig+0x216>
 800400e:	2302      	movs	r3, #2
 8004010:	77fb      	strb	r3, [r7, #31]
 8004012:	e05e      	b.n	80040d2 <UART_SetConfig+0x216>
 8004014:	2304      	movs	r3, #4
 8004016:	77fb      	strb	r3, [r7, #31]
 8004018:	e05b      	b.n	80040d2 <UART_SetConfig+0x216>
 800401a:	2308      	movs	r3, #8
 800401c:	77fb      	strb	r3, [r7, #31]
 800401e:	e058      	b.n	80040d2 <UART_SetConfig+0x216>
 8004020:	2310      	movs	r3, #16
 8004022:	77fb      	strb	r3, [r7, #31]
 8004024:	e055      	b.n	80040d2 <UART_SetConfig+0x216>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a74      	ldr	r2, [pc, #464]	; (80041fc <UART_SetConfig+0x340>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d124      	bne.n	800407a <UART_SetConfig+0x1be>
 8004030:	4b6f      	ldr	r3, [pc, #444]	; (80041f0 <UART_SetConfig+0x334>)
 8004032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004034:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004038:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800403c:	d011      	beq.n	8004062 <UART_SetConfig+0x1a6>
 800403e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004042:	d817      	bhi.n	8004074 <UART_SetConfig+0x1b8>
 8004044:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004048:	d011      	beq.n	800406e <UART_SetConfig+0x1b2>
 800404a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800404e:	d811      	bhi.n	8004074 <UART_SetConfig+0x1b8>
 8004050:	2b00      	cmp	r3, #0
 8004052:	d003      	beq.n	800405c <UART_SetConfig+0x1a0>
 8004054:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004058:	d006      	beq.n	8004068 <UART_SetConfig+0x1ac>
 800405a:	e00b      	b.n	8004074 <UART_SetConfig+0x1b8>
 800405c:	2300      	movs	r3, #0
 800405e:	77fb      	strb	r3, [r7, #31]
 8004060:	e037      	b.n	80040d2 <UART_SetConfig+0x216>
 8004062:	2302      	movs	r3, #2
 8004064:	77fb      	strb	r3, [r7, #31]
 8004066:	e034      	b.n	80040d2 <UART_SetConfig+0x216>
 8004068:	2304      	movs	r3, #4
 800406a:	77fb      	strb	r3, [r7, #31]
 800406c:	e031      	b.n	80040d2 <UART_SetConfig+0x216>
 800406e:	2308      	movs	r3, #8
 8004070:	77fb      	strb	r3, [r7, #31]
 8004072:	e02e      	b.n	80040d2 <UART_SetConfig+0x216>
 8004074:	2310      	movs	r3, #16
 8004076:	77fb      	strb	r3, [r7, #31]
 8004078:	e02b      	b.n	80040d2 <UART_SetConfig+0x216>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a60      	ldr	r2, [pc, #384]	; (8004200 <UART_SetConfig+0x344>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d124      	bne.n	80040ce <UART_SetConfig+0x212>
 8004084:	4b5a      	ldr	r3, [pc, #360]	; (80041f0 <UART_SetConfig+0x334>)
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800408c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004090:	d011      	beq.n	80040b6 <UART_SetConfig+0x1fa>
 8004092:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004096:	d817      	bhi.n	80040c8 <UART_SetConfig+0x20c>
 8004098:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800409c:	d011      	beq.n	80040c2 <UART_SetConfig+0x206>
 800409e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040a2:	d811      	bhi.n	80040c8 <UART_SetConfig+0x20c>
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d003      	beq.n	80040b0 <UART_SetConfig+0x1f4>
 80040a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040ac:	d006      	beq.n	80040bc <UART_SetConfig+0x200>
 80040ae:	e00b      	b.n	80040c8 <UART_SetConfig+0x20c>
 80040b0:	2300      	movs	r3, #0
 80040b2:	77fb      	strb	r3, [r7, #31]
 80040b4:	e00d      	b.n	80040d2 <UART_SetConfig+0x216>
 80040b6:	2302      	movs	r3, #2
 80040b8:	77fb      	strb	r3, [r7, #31]
 80040ba:	e00a      	b.n	80040d2 <UART_SetConfig+0x216>
 80040bc:	2304      	movs	r3, #4
 80040be:	77fb      	strb	r3, [r7, #31]
 80040c0:	e007      	b.n	80040d2 <UART_SetConfig+0x216>
 80040c2:	2308      	movs	r3, #8
 80040c4:	77fb      	strb	r3, [r7, #31]
 80040c6:	e004      	b.n	80040d2 <UART_SetConfig+0x216>
 80040c8:	2310      	movs	r3, #16
 80040ca:	77fb      	strb	r3, [r7, #31]
 80040cc:	e001      	b.n	80040d2 <UART_SetConfig+0x216>
 80040ce:	2310      	movs	r3, #16
 80040d0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040da:	d15b      	bne.n	8004194 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80040dc:	7ffb      	ldrb	r3, [r7, #31]
 80040de:	2b08      	cmp	r3, #8
 80040e0:	d827      	bhi.n	8004132 <UART_SetConfig+0x276>
 80040e2:	a201      	add	r2, pc, #4	; (adr r2, 80040e8 <UART_SetConfig+0x22c>)
 80040e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e8:	0800410d 	.word	0x0800410d
 80040ec:	08004115 	.word	0x08004115
 80040f0:	0800411d 	.word	0x0800411d
 80040f4:	08004133 	.word	0x08004133
 80040f8:	08004123 	.word	0x08004123
 80040fc:	08004133 	.word	0x08004133
 8004100:	08004133 	.word	0x08004133
 8004104:	08004133 	.word	0x08004133
 8004108:	0800412b 	.word	0x0800412b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800410c:	f7fe fc90 	bl	8002a30 <HAL_RCC_GetPCLK1Freq>
 8004110:	61b8      	str	r0, [r7, #24]
        break;
 8004112:	e013      	b.n	800413c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004114:	f7fe fcae 	bl	8002a74 <HAL_RCC_GetPCLK2Freq>
 8004118:	61b8      	str	r0, [r7, #24]
        break;
 800411a:	e00f      	b.n	800413c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800411c:	4b39      	ldr	r3, [pc, #228]	; (8004204 <UART_SetConfig+0x348>)
 800411e:	61bb      	str	r3, [r7, #24]
        break;
 8004120:	e00c      	b.n	800413c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004122:	f7fe fc0f 	bl	8002944 <HAL_RCC_GetSysClockFreq>
 8004126:	61b8      	str	r0, [r7, #24]
        break;
 8004128:	e008      	b.n	800413c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800412a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800412e:	61bb      	str	r3, [r7, #24]
        break;
 8004130:	e004      	b.n	800413c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8004132:	2300      	movs	r3, #0
 8004134:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	77bb      	strb	r3, [r7, #30]
        break;
 800413a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 8083 	beq.w	800424a <UART_SetConfig+0x38e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	005a      	lsls	r2, r3, #1
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	085b      	lsrs	r3, r3, #1
 800414e:	441a      	add	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	fbb2 f3f3 	udiv	r3, r2, r3
 8004158:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	2b0f      	cmp	r3, #15
 800415e:	d916      	bls.n	800418e <UART_SetConfig+0x2d2>
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004166:	d212      	bcs.n	800418e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	b29b      	uxth	r3, r3
 800416c:	f023 030f 	bic.w	r3, r3, #15
 8004170:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	085b      	lsrs	r3, r3, #1
 8004176:	b29b      	uxth	r3, r3
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	b29a      	uxth	r2, r3
 800417e:	89fb      	ldrh	r3, [r7, #14]
 8004180:	4313      	orrs	r3, r2
 8004182:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	89fa      	ldrh	r2, [r7, #14]
 800418a:	60da      	str	r2, [r3, #12]
 800418c:	e05d      	b.n	800424a <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	77bb      	strb	r3, [r7, #30]
 8004192:	e05a      	b.n	800424a <UART_SetConfig+0x38e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004194:	7ffb      	ldrb	r3, [r7, #31]
 8004196:	2b08      	cmp	r3, #8
 8004198:	d836      	bhi.n	8004208 <UART_SetConfig+0x34c>
 800419a:	a201      	add	r2, pc, #4	; (adr r2, 80041a0 <UART_SetConfig+0x2e4>)
 800419c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a0:	080041c5 	.word	0x080041c5
 80041a4:	080041cd 	.word	0x080041cd
 80041a8:	080041d5 	.word	0x080041d5
 80041ac:	08004209 	.word	0x08004209
 80041b0:	080041db 	.word	0x080041db
 80041b4:	08004209 	.word	0x08004209
 80041b8:	08004209 	.word	0x08004209
 80041bc:	08004209 	.word	0x08004209
 80041c0:	080041e3 	.word	0x080041e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041c4:	f7fe fc34 	bl	8002a30 <HAL_RCC_GetPCLK1Freq>
 80041c8:	61b8      	str	r0, [r7, #24]
        break;
 80041ca:	e022      	b.n	8004212 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041cc:	f7fe fc52 	bl	8002a74 <HAL_RCC_GetPCLK2Freq>
 80041d0:	61b8      	str	r0, [r7, #24]
        break;
 80041d2:	e01e      	b.n	8004212 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041d4:	4b0b      	ldr	r3, [pc, #44]	; (8004204 <UART_SetConfig+0x348>)
 80041d6:	61bb      	str	r3, [r7, #24]
        break;
 80041d8:	e01b      	b.n	8004212 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041da:	f7fe fbb3 	bl	8002944 <HAL_RCC_GetSysClockFreq>
 80041de:	61b8      	str	r0, [r7, #24]
        break;
 80041e0:	e017      	b.n	8004212 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041e6:	61bb      	str	r3, [r7, #24]
        break;
 80041e8:	e013      	b.n	8004212 <UART_SetConfig+0x356>
 80041ea:	bf00      	nop
 80041ec:	40013800 	.word	0x40013800
 80041f0:	40021000 	.word	0x40021000
 80041f4:	40004400 	.word	0x40004400
 80041f8:	40004800 	.word	0x40004800
 80041fc:	40004c00 	.word	0x40004c00
 8004200:	40005000 	.word	0x40005000
 8004204:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	77bb      	strb	r3, [r7, #30]
        break;
 8004210:	bf00      	nop
    }

    if (pclk != 0U)
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d018      	beq.n	800424a <UART_SetConfig+0x38e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	085a      	lsrs	r2, r3, #1
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	441a      	add	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	fbb2 f3f3 	udiv	r3, r2, r3
 800422a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	2b0f      	cmp	r3, #15
 8004230:	d909      	bls.n	8004246 <UART_SetConfig+0x38a>
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004238:	d205      	bcs.n	8004246 <UART_SetConfig+0x38a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	b29a      	uxth	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	60da      	str	r2, [r3, #12]
 8004244:	e001      	b.n	800424a <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004256:	7fbb      	ldrb	r3, [r7, #30]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3720      	adds	r7, #32
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00a      	beq.n	800428a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00a      	beq.n	80042ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	430a      	orrs	r2, r1
 80042aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00a      	beq.n	80042ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	f003 0308 	and.w	r3, r3, #8
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00a      	beq.n	80042f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	430a      	orrs	r2, r1
 80042ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	f003 0310 	and.w	r3, r3, #16
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00a      	beq.n	8004312 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	f003 0320 	and.w	r3, r3, #32
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00a      	beq.n	8004334 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433c:	2b00      	cmp	r3, #0
 800433e:	d01a      	beq.n	8004376 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800435e:	d10a      	bne.n	8004376 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	430a      	orrs	r2, r1
 8004396:	605a      	str	r2, [r3, #4]
  }
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b098      	sub	sp, #96	; 0x60
 80043a8:	af02      	add	r7, sp, #8
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043b4:	f7fc fe3c 	bl	8001030 <HAL_GetTick>
 80043b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0308 	and.w	r3, r3, #8
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	d12e      	bne.n	8004426 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043d0:	2200      	movs	r2, #0
 80043d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f88c 	bl	80044f4 <UART_WaitOnFlagUntilTimeout>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d021      	beq.n	8004426 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ea:	e853 3f00 	ldrex	r3, [r3]
 80043ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043f6:	653b      	str	r3, [r7, #80]	; 0x50
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	461a      	mov	r2, r3
 80043fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004400:	647b      	str	r3, [r7, #68]	; 0x44
 8004402:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004404:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004406:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004408:	e841 2300 	strex	r3, r2, [r1]
 800440c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800440e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1e6      	bne.n	80043e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2220      	movs	r2, #32
 8004418:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e062      	b.n	80044ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b04      	cmp	r3, #4
 8004432:	d149      	bne.n	80044c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004434:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800443c:	2200      	movs	r2, #0
 800443e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f856 	bl	80044f4 <UART_WaitOnFlagUntilTimeout>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d03c      	beq.n	80044c8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	e853 3f00 	ldrex	r3, [r3]
 800445a:	623b      	str	r3, [r7, #32]
   return(result);
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004462:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	461a      	mov	r2, r3
 800446a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800446c:	633b      	str	r3, [r7, #48]	; 0x30
 800446e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004470:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004474:	e841 2300 	strex	r3, r2, [r1]
 8004478:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800447a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1e6      	bne.n	800444e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	3308      	adds	r3, #8
 8004486:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	e853 3f00 	ldrex	r3, [r3]
 800448e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f023 0301 	bic.w	r3, r3, #1
 8004496:	64bb      	str	r3, [r7, #72]	; 0x48
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3308      	adds	r3, #8
 800449e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044a0:	61fa      	str	r2, [r7, #28]
 80044a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a4:	69b9      	ldr	r1, [r7, #24]
 80044a6:	69fa      	ldr	r2, [r7, #28]
 80044a8:	e841 2300 	strex	r3, r2, [r1]
 80044ac:	617b      	str	r3, [r7, #20]
   return(result);
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1e5      	bne.n	8004480 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e011      	b.n	80044ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2220      	movs	r2, #32
 80044cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3758      	adds	r7, #88	; 0x58
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	603b      	str	r3, [r7, #0]
 8004500:	4613      	mov	r3, r2
 8004502:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004504:	e049      	b.n	800459a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450c:	d045      	beq.n	800459a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800450e:	f7fc fd8f 	bl	8001030 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	429a      	cmp	r2, r3
 800451c:	d302      	bcc.n	8004524 <UART_WaitOnFlagUntilTimeout+0x30>
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d101      	bne.n	8004528 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e048      	b.n	80045ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0304 	and.w	r3, r3, #4
 8004532:	2b00      	cmp	r3, #0
 8004534:	d031      	beq.n	800459a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	f003 0308 	and.w	r3, r3, #8
 8004540:	2b08      	cmp	r3, #8
 8004542:	d110      	bne.n	8004566 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2208      	movs	r2, #8
 800454a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 f838 	bl	80045c2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2208      	movs	r2, #8
 8004556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e029      	b.n	80045ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004570:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004574:	d111      	bne.n	800459a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800457e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f000 f81e 	bl	80045c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2220      	movs	r2, #32
 800458a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e00f      	b.n	80045ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	69da      	ldr	r2, [r3, #28]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	4013      	ands	r3, r2
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	bf0c      	ite	eq
 80045aa:	2301      	moveq	r3, #1
 80045ac:	2300      	movne	r3, #0
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	461a      	mov	r2, r3
 80045b2:	79fb      	ldrb	r3, [r7, #7]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d0a6      	beq.n	8004506 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b095      	sub	sp, #84	; 0x54
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d2:	e853 3f00 	ldrex	r3, [r3]
 80045d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	461a      	mov	r2, r3
 80045e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e8:	643b      	str	r3, [r7, #64]	; 0x40
 80045ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045f0:	e841 2300 	strex	r3, r2, [r1]
 80045f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e6      	bne.n	80045ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	3308      	adds	r3, #8
 8004602:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	e853 3f00 	ldrex	r3, [r3]
 800460a:	61fb      	str	r3, [r7, #28]
   return(result);
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	f023 0301 	bic.w	r3, r3, #1
 8004612:	64bb      	str	r3, [r7, #72]	; 0x48
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	3308      	adds	r3, #8
 800461a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800461c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800461e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004620:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004624:	e841 2300 	strex	r3, r2, [r1]
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1e5      	bne.n	80045fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004634:	2b01      	cmp	r3, #1
 8004636:	d118      	bne.n	800466a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	e853 3f00 	ldrex	r3, [r3]
 8004644:	60bb      	str	r3, [r7, #8]
   return(result);
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	f023 0310 	bic.w	r3, r3, #16
 800464c:	647b      	str	r3, [r7, #68]	; 0x44
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	461a      	mov	r2, r3
 8004654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004656:	61bb      	str	r3, [r7, #24]
 8004658:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465a:	6979      	ldr	r1, [r7, #20]
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	e841 2300 	strex	r3, r2, [r1]
 8004662:	613b      	str	r3, [r7, #16]
   return(result);
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1e6      	bne.n	8004638 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2220      	movs	r2, #32
 800466e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800467e:	bf00      	nop
 8004680:	3754      	adds	r7, #84	; 0x54
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
	...

0800468c <__errno>:
 800468c:	4b01      	ldr	r3, [pc, #4]	; (8004694 <__errno+0x8>)
 800468e:	6818      	ldr	r0, [r3, #0]
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	2000000c 	.word	0x2000000c

08004698 <__libc_init_array>:
 8004698:	b570      	push	{r4, r5, r6, lr}
 800469a:	4d0d      	ldr	r5, [pc, #52]	; (80046d0 <__libc_init_array+0x38>)
 800469c:	4c0d      	ldr	r4, [pc, #52]	; (80046d4 <__libc_init_array+0x3c>)
 800469e:	1b64      	subs	r4, r4, r5
 80046a0:	10a4      	asrs	r4, r4, #2
 80046a2:	2600      	movs	r6, #0
 80046a4:	42a6      	cmp	r6, r4
 80046a6:	d109      	bne.n	80046bc <__libc_init_array+0x24>
 80046a8:	4d0b      	ldr	r5, [pc, #44]	; (80046d8 <__libc_init_array+0x40>)
 80046aa:	4c0c      	ldr	r4, [pc, #48]	; (80046dc <__libc_init_array+0x44>)
 80046ac:	f000 fce6 	bl	800507c <_init>
 80046b0:	1b64      	subs	r4, r4, r5
 80046b2:	10a4      	asrs	r4, r4, #2
 80046b4:	2600      	movs	r6, #0
 80046b6:	42a6      	cmp	r6, r4
 80046b8:	d105      	bne.n	80046c6 <__libc_init_array+0x2e>
 80046ba:	bd70      	pop	{r4, r5, r6, pc}
 80046bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80046c0:	4798      	blx	r3
 80046c2:	3601      	adds	r6, #1
 80046c4:	e7ee      	b.n	80046a4 <__libc_init_array+0xc>
 80046c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ca:	4798      	blx	r3
 80046cc:	3601      	adds	r6, #1
 80046ce:	e7f2      	b.n	80046b6 <__libc_init_array+0x1e>
 80046d0:	080051ec 	.word	0x080051ec
 80046d4:	080051ec 	.word	0x080051ec
 80046d8:	080051ec 	.word	0x080051ec
 80046dc:	080051f0 	.word	0x080051f0

080046e0 <memset>:
 80046e0:	4402      	add	r2, r0
 80046e2:	4603      	mov	r3, r0
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d100      	bne.n	80046ea <memset+0xa>
 80046e8:	4770      	bx	lr
 80046ea:	f803 1b01 	strb.w	r1, [r3], #1
 80046ee:	e7f9      	b.n	80046e4 <memset+0x4>

080046f0 <_puts_r>:
 80046f0:	b570      	push	{r4, r5, r6, lr}
 80046f2:	460e      	mov	r6, r1
 80046f4:	4605      	mov	r5, r0
 80046f6:	b118      	cbz	r0, 8004700 <_puts_r+0x10>
 80046f8:	6983      	ldr	r3, [r0, #24]
 80046fa:	b90b      	cbnz	r3, 8004700 <_puts_r+0x10>
 80046fc:	f000 fa48 	bl	8004b90 <__sinit>
 8004700:	69ab      	ldr	r3, [r5, #24]
 8004702:	68ac      	ldr	r4, [r5, #8]
 8004704:	b913      	cbnz	r3, 800470c <_puts_r+0x1c>
 8004706:	4628      	mov	r0, r5
 8004708:	f000 fa42 	bl	8004b90 <__sinit>
 800470c:	4b2c      	ldr	r3, [pc, #176]	; (80047c0 <_puts_r+0xd0>)
 800470e:	429c      	cmp	r4, r3
 8004710:	d120      	bne.n	8004754 <_puts_r+0x64>
 8004712:	686c      	ldr	r4, [r5, #4]
 8004714:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004716:	07db      	lsls	r3, r3, #31
 8004718:	d405      	bmi.n	8004726 <_puts_r+0x36>
 800471a:	89a3      	ldrh	r3, [r4, #12]
 800471c:	0598      	lsls	r0, r3, #22
 800471e:	d402      	bmi.n	8004726 <_puts_r+0x36>
 8004720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004722:	f000 fad3 	bl	8004ccc <__retarget_lock_acquire_recursive>
 8004726:	89a3      	ldrh	r3, [r4, #12]
 8004728:	0719      	lsls	r1, r3, #28
 800472a:	d51d      	bpl.n	8004768 <_puts_r+0x78>
 800472c:	6923      	ldr	r3, [r4, #16]
 800472e:	b1db      	cbz	r3, 8004768 <_puts_r+0x78>
 8004730:	3e01      	subs	r6, #1
 8004732:	68a3      	ldr	r3, [r4, #8]
 8004734:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004738:	3b01      	subs	r3, #1
 800473a:	60a3      	str	r3, [r4, #8]
 800473c:	bb39      	cbnz	r1, 800478e <_puts_r+0x9e>
 800473e:	2b00      	cmp	r3, #0
 8004740:	da38      	bge.n	80047b4 <_puts_r+0xc4>
 8004742:	4622      	mov	r2, r4
 8004744:	210a      	movs	r1, #10
 8004746:	4628      	mov	r0, r5
 8004748:	f000 f848 	bl	80047dc <__swbuf_r>
 800474c:	3001      	adds	r0, #1
 800474e:	d011      	beq.n	8004774 <_puts_r+0x84>
 8004750:	250a      	movs	r5, #10
 8004752:	e011      	b.n	8004778 <_puts_r+0x88>
 8004754:	4b1b      	ldr	r3, [pc, #108]	; (80047c4 <_puts_r+0xd4>)
 8004756:	429c      	cmp	r4, r3
 8004758:	d101      	bne.n	800475e <_puts_r+0x6e>
 800475a:	68ac      	ldr	r4, [r5, #8]
 800475c:	e7da      	b.n	8004714 <_puts_r+0x24>
 800475e:	4b1a      	ldr	r3, [pc, #104]	; (80047c8 <_puts_r+0xd8>)
 8004760:	429c      	cmp	r4, r3
 8004762:	bf08      	it	eq
 8004764:	68ec      	ldreq	r4, [r5, #12]
 8004766:	e7d5      	b.n	8004714 <_puts_r+0x24>
 8004768:	4621      	mov	r1, r4
 800476a:	4628      	mov	r0, r5
 800476c:	f000 f888 	bl	8004880 <__swsetup_r>
 8004770:	2800      	cmp	r0, #0
 8004772:	d0dd      	beq.n	8004730 <_puts_r+0x40>
 8004774:	f04f 35ff 	mov.w	r5, #4294967295
 8004778:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800477a:	07da      	lsls	r2, r3, #31
 800477c:	d405      	bmi.n	800478a <_puts_r+0x9a>
 800477e:	89a3      	ldrh	r3, [r4, #12]
 8004780:	059b      	lsls	r3, r3, #22
 8004782:	d402      	bmi.n	800478a <_puts_r+0x9a>
 8004784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004786:	f000 faa2 	bl	8004cce <__retarget_lock_release_recursive>
 800478a:	4628      	mov	r0, r5
 800478c:	bd70      	pop	{r4, r5, r6, pc}
 800478e:	2b00      	cmp	r3, #0
 8004790:	da04      	bge.n	800479c <_puts_r+0xac>
 8004792:	69a2      	ldr	r2, [r4, #24]
 8004794:	429a      	cmp	r2, r3
 8004796:	dc06      	bgt.n	80047a6 <_puts_r+0xb6>
 8004798:	290a      	cmp	r1, #10
 800479a:	d004      	beq.n	80047a6 <_puts_r+0xb6>
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	6022      	str	r2, [r4, #0]
 80047a2:	7019      	strb	r1, [r3, #0]
 80047a4:	e7c5      	b.n	8004732 <_puts_r+0x42>
 80047a6:	4622      	mov	r2, r4
 80047a8:	4628      	mov	r0, r5
 80047aa:	f000 f817 	bl	80047dc <__swbuf_r>
 80047ae:	3001      	adds	r0, #1
 80047b0:	d1bf      	bne.n	8004732 <_puts_r+0x42>
 80047b2:	e7df      	b.n	8004774 <_puts_r+0x84>
 80047b4:	6823      	ldr	r3, [r4, #0]
 80047b6:	250a      	movs	r5, #10
 80047b8:	1c5a      	adds	r2, r3, #1
 80047ba:	6022      	str	r2, [r4, #0]
 80047bc:	701d      	strb	r5, [r3, #0]
 80047be:	e7db      	b.n	8004778 <_puts_r+0x88>
 80047c0:	080051ac 	.word	0x080051ac
 80047c4:	080051cc 	.word	0x080051cc
 80047c8:	0800518c 	.word	0x0800518c

080047cc <puts>:
 80047cc:	4b02      	ldr	r3, [pc, #8]	; (80047d8 <puts+0xc>)
 80047ce:	4601      	mov	r1, r0
 80047d0:	6818      	ldr	r0, [r3, #0]
 80047d2:	f7ff bf8d 	b.w	80046f0 <_puts_r>
 80047d6:	bf00      	nop
 80047d8:	2000000c 	.word	0x2000000c

080047dc <__swbuf_r>:
 80047dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047de:	460e      	mov	r6, r1
 80047e0:	4614      	mov	r4, r2
 80047e2:	4605      	mov	r5, r0
 80047e4:	b118      	cbz	r0, 80047ee <__swbuf_r+0x12>
 80047e6:	6983      	ldr	r3, [r0, #24]
 80047e8:	b90b      	cbnz	r3, 80047ee <__swbuf_r+0x12>
 80047ea:	f000 f9d1 	bl	8004b90 <__sinit>
 80047ee:	4b21      	ldr	r3, [pc, #132]	; (8004874 <__swbuf_r+0x98>)
 80047f0:	429c      	cmp	r4, r3
 80047f2:	d12b      	bne.n	800484c <__swbuf_r+0x70>
 80047f4:	686c      	ldr	r4, [r5, #4]
 80047f6:	69a3      	ldr	r3, [r4, #24]
 80047f8:	60a3      	str	r3, [r4, #8]
 80047fa:	89a3      	ldrh	r3, [r4, #12]
 80047fc:	071a      	lsls	r2, r3, #28
 80047fe:	d52f      	bpl.n	8004860 <__swbuf_r+0x84>
 8004800:	6923      	ldr	r3, [r4, #16]
 8004802:	b36b      	cbz	r3, 8004860 <__swbuf_r+0x84>
 8004804:	6923      	ldr	r3, [r4, #16]
 8004806:	6820      	ldr	r0, [r4, #0]
 8004808:	1ac0      	subs	r0, r0, r3
 800480a:	6963      	ldr	r3, [r4, #20]
 800480c:	b2f6      	uxtb	r6, r6
 800480e:	4283      	cmp	r3, r0
 8004810:	4637      	mov	r7, r6
 8004812:	dc04      	bgt.n	800481e <__swbuf_r+0x42>
 8004814:	4621      	mov	r1, r4
 8004816:	4628      	mov	r0, r5
 8004818:	f000 f926 	bl	8004a68 <_fflush_r>
 800481c:	bb30      	cbnz	r0, 800486c <__swbuf_r+0x90>
 800481e:	68a3      	ldr	r3, [r4, #8]
 8004820:	3b01      	subs	r3, #1
 8004822:	60a3      	str	r3, [r4, #8]
 8004824:	6823      	ldr	r3, [r4, #0]
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	6022      	str	r2, [r4, #0]
 800482a:	701e      	strb	r6, [r3, #0]
 800482c:	6963      	ldr	r3, [r4, #20]
 800482e:	3001      	adds	r0, #1
 8004830:	4283      	cmp	r3, r0
 8004832:	d004      	beq.n	800483e <__swbuf_r+0x62>
 8004834:	89a3      	ldrh	r3, [r4, #12]
 8004836:	07db      	lsls	r3, r3, #31
 8004838:	d506      	bpl.n	8004848 <__swbuf_r+0x6c>
 800483a:	2e0a      	cmp	r6, #10
 800483c:	d104      	bne.n	8004848 <__swbuf_r+0x6c>
 800483e:	4621      	mov	r1, r4
 8004840:	4628      	mov	r0, r5
 8004842:	f000 f911 	bl	8004a68 <_fflush_r>
 8004846:	b988      	cbnz	r0, 800486c <__swbuf_r+0x90>
 8004848:	4638      	mov	r0, r7
 800484a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800484c:	4b0a      	ldr	r3, [pc, #40]	; (8004878 <__swbuf_r+0x9c>)
 800484e:	429c      	cmp	r4, r3
 8004850:	d101      	bne.n	8004856 <__swbuf_r+0x7a>
 8004852:	68ac      	ldr	r4, [r5, #8]
 8004854:	e7cf      	b.n	80047f6 <__swbuf_r+0x1a>
 8004856:	4b09      	ldr	r3, [pc, #36]	; (800487c <__swbuf_r+0xa0>)
 8004858:	429c      	cmp	r4, r3
 800485a:	bf08      	it	eq
 800485c:	68ec      	ldreq	r4, [r5, #12]
 800485e:	e7ca      	b.n	80047f6 <__swbuf_r+0x1a>
 8004860:	4621      	mov	r1, r4
 8004862:	4628      	mov	r0, r5
 8004864:	f000 f80c 	bl	8004880 <__swsetup_r>
 8004868:	2800      	cmp	r0, #0
 800486a:	d0cb      	beq.n	8004804 <__swbuf_r+0x28>
 800486c:	f04f 37ff 	mov.w	r7, #4294967295
 8004870:	e7ea      	b.n	8004848 <__swbuf_r+0x6c>
 8004872:	bf00      	nop
 8004874:	080051ac 	.word	0x080051ac
 8004878:	080051cc 	.word	0x080051cc
 800487c:	0800518c 	.word	0x0800518c

08004880 <__swsetup_r>:
 8004880:	4b32      	ldr	r3, [pc, #200]	; (800494c <__swsetup_r+0xcc>)
 8004882:	b570      	push	{r4, r5, r6, lr}
 8004884:	681d      	ldr	r5, [r3, #0]
 8004886:	4606      	mov	r6, r0
 8004888:	460c      	mov	r4, r1
 800488a:	b125      	cbz	r5, 8004896 <__swsetup_r+0x16>
 800488c:	69ab      	ldr	r3, [r5, #24]
 800488e:	b913      	cbnz	r3, 8004896 <__swsetup_r+0x16>
 8004890:	4628      	mov	r0, r5
 8004892:	f000 f97d 	bl	8004b90 <__sinit>
 8004896:	4b2e      	ldr	r3, [pc, #184]	; (8004950 <__swsetup_r+0xd0>)
 8004898:	429c      	cmp	r4, r3
 800489a:	d10f      	bne.n	80048bc <__swsetup_r+0x3c>
 800489c:	686c      	ldr	r4, [r5, #4]
 800489e:	89a3      	ldrh	r3, [r4, #12]
 80048a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048a4:	0719      	lsls	r1, r3, #28
 80048a6:	d42c      	bmi.n	8004902 <__swsetup_r+0x82>
 80048a8:	06dd      	lsls	r5, r3, #27
 80048aa:	d411      	bmi.n	80048d0 <__swsetup_r+0x50>
 80048ac:	2309      	movs	r3, #9
 80048ae:	6033      	str	r3, [r6, #0]
 80048b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80048b4:	81a3      	strh	r3, [r4, #12]
 80048b6:	f04f 30ff 	mov.w	r0, #4294967295
 80048ba:	e03e      	b.n	800493a <__swsetup_r+0xba>
 80048bc:	4b25      	ldr	r3, [pc, #148]	; (8004954 <__swsetup_r+0xd4>)
 80048be:	429c      	cmp	r4, r3
 80048c0:	d101      	bne.n	80048c6 <__swsetup_r+0x46>
 80048c2:	68ac      	ldr	r4, [r5, #8]
 80048c4:	e7eb      	b.n	800489e <__swsetup_r+0x1e>
 80048c6:	4b24      	ldr	r3, [pc, #144]	; (8004958 <__swsetup_r+0xd8>)
 80048c8:	429c      	cmp	r4, r3
 80048ca:	bf08      	it	eq
 80048cc:	68ec      	ldreq	r4, [r5, #12]
 80048ce:	e7e6      	b.n	800489e <__swsetup_r+0x1e>
 80048d0:	0758      	lsls	r0, r3, #29
 80048d2:	d512      	bpl.n	80048fa <__swsetup_r+0x7a>
 80048d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048d6:	b141      	cbz	r1, 80048ea <__swsetup_r+0x6a>
 80048d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048dc:	4299      	cmp	r1, r3
 80048de:	d002      	beq.n	80048e6 <__swsetup_r+0x66>
 80048e0:	4630      	mov	r0, r6
 80048e2:	f000 fa59 	bl	8004d98 <_free_r>
 80048e6:	2300      	movs	r3, #0
 80048e8:	6363      	str	r3, [r4, #52]	; 0x34
 80048ea:	89a3      	ldrh	r3, [r4, #12]
 80048ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80048f0:	81a3      	strh	r3, [r4, #12]
 80048f2:	2300      	movs	r3, #0
 80048f4:	6063      	str	r3, [r4, #4]
 80048f6:	6923      	ldr	r3, [r4, #16]
 80048f8:	6023      	str	r3, [r4, #0]
 80048fa:	89a3      	ldrh	r3, [r4, #12]
 80048fc:	f043 0308 	orr.w	r3, r3, #8
 8004900:	81a3      	strh	r3, [r4, #12]
 8004902:	6923      	ldr	r3, [r4, #16]
 8004904:	b94b      	cbnz	r3, 800491a <__swsetup_r+0x9a>
 8004906:	89a3      	ldrh	r3, [r4, #12]
 8004908:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800490c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004910:	d003      	beq.n	800491a <__swsetup_r+0x9a>
 8004912:	4621      	mov	r1, r4
 8004914:	4630      	mov	r0, r6
 8004916:	f000 f9ff 	bl	8004d18 <__smakebuf_r>
 800491a:	89a0      	ldrh	r0, [r4, #12]
 800491c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004920:	f010 0301 	ands.w	r3, r0, #1
 8004924:	d00a      	beq.n	800493c <__swsetup_r+0xbc>
 8004926:	2300      	movs	r3, #0
 8004928:	60a3      	str	r3, [r4, #8]
 800492a:	6963      	ldr	r3, [r4, #20]
 800492c:	425b      	negs	r3, r3
 800492e:	61a3      	str	r3, [r4, #24]
 8004930:	6923      	ldr	r3, [r4, #16]
 8004932:	b943      	cbnz	r3, 8004946 <__swsetup_r+0xc6>
 8004934:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004938:	d1ba      	bne.n	80048b0 <__swsetup_r+0x30>
 800493a:	bd70      	pop	{r4, r5, r6, pc}
 800493c:	0781      	lsls	r1, r0, #30
 800493e:	bf58      	it	pl
 8004940:	6963      	ldrpl	r3, [r4, #20]
 8004942:	60a3      	str	r3, [r4, #8]
 8004944:	e7f4      	b.n	8004930 <__swsetup_r+0xb0>
 8004946:	2000      	movs	r0, #0
 8004948:	e7f7      	b.n	800493a <__swsetup_r+0xba>
 800494a:	bf00      	nop
 800494c:	2000000c 	.word	0x2000000c
 8004950:	080051ac 	.word	0x080051ac
 8004954:	080051cc 	.word	0x080051cc
 8004958:	0800518c 	.word	0x0800518c

0800495c <__sflush_r>:
 800495c:	898a      	ldrh	r2, [r1, #12]
 800495e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004962:	4605      	mov	r5, r0
 8004964:	0710      	lsls	r0, r2, #28
 8004966:	460c      	mov	r4, r1
 8004968:	d458      	bmi.n	8004a1c <__sflush_r+0xc0>
 800496a:	684b      	ldr	r3, [r1, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	dc05      	bgt.n	800497c <__sflush_r+0x20>
 8004970:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004972:	2b00      	cmp	r3, #0
 8004974:	dc02      	bgt.n	800497c <__sflush_r+0x20>
 8004976:	2000      	movs	r0, #0
 8004978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800497c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800497e:	2e00      	cmp	r6, #0
 8004980:	d0f9      	beq.n	8004976 <__sflush_r+0x1a>
 8004982:	2300      	movs	r3, #0
 8004984:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004988:	682f      	ldr	r7, [r5, #0]
 800498a:	602b      	str	r3, [r5, #0]
 800498c:	d032      	beq.n	80049f4 <__sflush_r+0x98>
 800498e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004990:	89a3      	ldrh	r3, [r4, #12]
 8004992:	075a      	lsls	r2, r3, #29
 8004994:	d505      	bpl.n	80049a2 <__sflush_r+0x46>
 8004996:	6863      	ldr	r3, [r4, #4]
 8004998:	1ac0      	subs	r0, r0, r3
 800499a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800499c:	b10b      	cbz	r3, 80049a2 <__sflush_r+0x46>
 800499e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049a0:	1ac0      	subs	r0, r0, r3
 80049a2:	2300      	movs	r3, #0
 80049a4:	4602      	mov	r2, r0
 80049a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049a8:	6a21      	ldr	r1, [r4, #32]
 80049aa:	4628      	mov	r0, r5
 80049ac:	47b0      	blx	r6
 80049ae:	1c43      	adds	r3, r0, #1
 80049b0:	89a3      	ldrh	r3, [r4, #12]
 80049b2:	d106      	bne.n	80049c2 <__sflush_r+0x66>
 80049b4:	6829      	ldr	r1, [r5, #0]
 80049b6:	291d      	cmp	r1, #29
 80049b8:	d82c      	bhi.n	8004a14 <__sflush_r+0xb8>
 80049ba:	4a2a      	ldr	r2, [pc, #168]	; (8004a64 <__sflush_r+0x108>)
 80049bc:	40ca      	lsrs	r2, r1
 80049be:	07d6      	lsls	r6, r2, #31
 80049c0:	d528      	bpl.n	8004a14 <__sflush_r+0xb8>
 80049c2:	2200      	movs	r2, #0
 80049c4:	6062      	str	r2, [r4, #4]
 80049c6:	04d9      	lsls	r1, r3, #19
 80049c8:	6922      	ldr	r2, [r4, #16]
 80049ca:	6022      	str	r2, [r4, #0]
 80049cc:	d504      	bpl.n	80049d8 <__sflush_r+0x7c>
 80049ce:	1c42      	adds	r2, r0, #1
 80049d0:	d101      	bne.n	80049d6 <__sflush_r+0x7a>
 80049d2:	682b      	ldr	r3, [r5, #0]
 80049d4:	b903      	cbnz	r3, 80049d8 <__sflush_r+0x7c>
 80049d6:	6560      	str	r0, [r4, #84]	; 0x54
 80049d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049da:	602f      	str	r7, [r5, #0]
 80049dc:	2900      	cmp	r1, #0
 80049de:	d0ca      	beq.n	8004976 <__sflush_r+0x1a>
 80049e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049e4:	4299      	cmp	r1, r3
 80049e6:	d002      	beq.n	80049ee <__sflush_r+0x92>
 80049e8:	4628      	mov	r0, r5
 80049ea:	f000 f9d5 	bl	8004d98 <_free_r>
 80049ee:	2000      	movs	r0, #0
 80049f0:	6360      	str	r0, [r4, #52]	; 0x34
 80049f2:	e7c1      	b.n	8004978 <__sflush_r+0x1c>
 80049f4:	6a21      	ldr	r1, [r4, #32]
 80049f6:	2301      	movs	r3, #1
 80049f8:	4628      	mov	r0, r5
 80049fa:	47b0      	blx	r6
 80049fc:	1c41      	adds	r1, r0, #1
 80049fe:	d1c7      	bne.n	8004990 <__sflush_r+0x34>
 8004a00:	682b      	ldr	r3, [r5, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0c4      	beq.n	8004990 <__sflush_r+0x34>
 8004a06:	2b1d      	cmp	r3, #29
 8004a08:	d001      	beq.n	8004a0e <__sflush_r+0xb2>
 8004a0a:	2b16      	cmp	r3, #22
 8004a0c:	d101      	bne.n	8004a12 <__sflush_r+0xb6>
 8004a0e:	602f      	str	r7, [r5, #0]
 8004a10:	e7b1      	b.n	8004976 <__sflush_r+0x1a>
 8004a12:	89a3      	ldrh	r3, [r4, #12]
 8004a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a18:	81a3      	strh	r3, [r4, #12]
 8004a1a:	e7ad      	b.n	8004978 <__sflush_r+0x1c>
 8004a1c:	690f      	ldr	r7, [r1, #16]
 8004a1e:	2f00      	cmp	r7, #0
 8004a20:	d0a9      	beq.n	8004976 <__sflush_r+0x1a>
 8004a22:	0793      	lsls	r3, r2, #30
 8004a24:	680e      	ldr	r6, [r1, #0]
 8004a26:	bf08      	it	eq
 8004a28:	694b      	ldreq	r3, [r1, #20]
 8004a2a:	600f      	str	r7, [r1, #0]
 8004a2c:	bf18      	it	ne
 8004a2e:	2300      	movne	r3, #0
 8004a30:	eba6 0807 	sub.w	r8, r6, r7
 8004a34:	608b      	str	r3, [r1, #8]
 8004a36:	f1b8 0f00 	cmp.w	r8, #0
 8004a3a:	dd9c      	ble.n	8004976 <__sflush_r+0x1a>
 8004a3c:	6a21      	ldr	r1, [r4, #32]
 8004a3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a40:	4643      	mov	r3, r8
 8004a42:	463a      	mov	r2, r7
 8004a44:	4628      	mov	r0, r5
 8004a46:	47b0      	blx	r6
 8004a48:	2800      	cmp	r0, #0
 8004a4a:	dc06      	bgt.n	8004a5a <__sflush_r+0xfe>
 8004a4c:	89a3      	ldrh	r3, [r4, #12]
 8004a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a52:	81a3      	strh	r3, [r4, #12]
 8004a54:	f04f 30ff 	mov.w	r0, #4294967295
 8004a58:	e78e      	b.n	8004978 <__sflush_r+0x1c>
 8004a5a:	4407      	add	r7, r0
 8004a5c:	eba8 0800 	sub.w	r8, r8, r0
 8004a60:	e7e9      	b.n	8004a36 <__sflush_r+0xda>
 8004a62:	bf00      	nop
 8004a64:	20400001 	.word	0x20400001

08004a68 <_fflush_r>:
 8004a68:	b538      	push	{r3, r4, r5, lr}
 8004a6a:	690b      	ldr	r3, [r1, #16]
 8004a6c:	4605      	mov	r5, r0
 8004a6e:	460c      	mov	r4, r1
 8004a70:	b913      	cbnz	r3, 8004a78 <_fflush_r+0x10>
 8004a72:	2500      	movs	r5, #0
 8004a74:	4628      	mov	r0, r5
 8004a76:	bd38      	pop	{r3, r4, r5, pc}
 8004a78:	b118      	cbz	r0, 8004a82 <_fflush_r+0x1a>
 8004a7a:	6983      	ldr	r3, [r0, #24]
 8004a7c:	b90b      	cbnz	r3, 8004a82 <_fflush_r+0x1a>
 8004a7e:	f000 f887 	bl	8004b90 <__sinit>
 8004a82:	4b14      	ldr	r3, [pc, #80]	; (8004ad4 <_fflush_r+0x6c>)
 8004a84:	429c      	cmp	r4, r3
 8004a86:	d11b      	bne.n	8004ac0 <_fflush_r+0x58>
 8004a88:	686c      	ldr	r4, [r5, #4]
 8004a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d0ef      	beq.n	8004a72 <_fflush_r+0xa>
 8004a92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a94:	07d0      	lsls	r0, r2, #31
 8004a96:	d404      	bmi.n	8004aa2 <_fflush_r+0x3a>
 8004a98:	0599      	lsls	r1, r3, #22
 8004a9a:	d402      	bmi.n	8004aa2 <_fflush_r+0x3a>
 8004a9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a9e:	f000 f915 	bl	8004ccc <__retarget_lock_acquire_recursive>
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	4621      	mov	r1, r4
 8004aa6:	f7ff ff59 	bl	800495c <__sflush_r>
 8004aaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004aac:	07da      	lsls	r2, r3, #31
 8004aae:	4605      	mov	r5, r0
 8004ab0:	d4e0      	bmi.n	8004a74 <_fflush_r+0xc>
 8004ab2:	89a3      	ldrh	r3, [r4, #12]
 8004ab4:	059b      	lsls	r3, r3, #22
 8004ab6:	d4dd      	bmi.n	8004a74 <_fflush_r+0xc>
 8004ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004aba:	f000 f908 	bl	8004cce <__retarget_lock_release_recursive>
 8004abe:	e7d9      	b.n	8004a74 <_fflush_r+0xc>
 8004ac0:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <_fflush_r+0x70>)
 8004ac2:	429c      	cmp	r4, r3
 8004ac4:	d101      	bne.n	8004aca <_fflush_r+0x62>
 8004ac6:	68ac      	ldr	r4, [r5, #8]
 8004ac8:	e7df      	b.n	8004a8a <_fflush_r+0x22>
 8004aca:	4b04      	ldr	r3, [pc, #16]	; (8004adc <_fflush_r+0x74>)
 8004acc:	429c      	cmp	r4, r3
 8004ace:	bf08      	it	eq
 8004ad0:	68ec      	ldreq	r4, [r5, #12]
 8004ad2:	e7da      	b.n	8004a8a <_fflush_r+0x22>
 8004ad4:	080051ac 	.word	0x080051ac
 8004ad8:	080051cc 	.word	0x080051cc
 8004adc:	0800518c 	.word	0x0800518c

08004ae0 <std>:
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	b510      	push	{r4, lr}
 8004ae4:	4604      	mov	r4, r0
 8004ae6:	e9c0 3300 	strd	r3, r3, [r0]
 8004aea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004aee:	6083      	str	r3, [r0, #8]
 8004af0:	8181      	strh	r1, [r0, #12]
 8004af2:	6643      	str	r3, [r0, #100]	; 0x64
 8004af4:	81c2      	strh	r2, [r0, #14]
 8004af6:	6183      	str	r3, [r0, #24]
 8004af8:	4619      	mov	r1, r3
 8004afa:	2208      	movs	r2, #8
 8004afc:	305c      	adds	r0, #92	; 0x5c
 8004afe:	f7ff fdef 	bl	80046e0 <memset>
 8004b02:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <std+0x38>)
 8004b04:	6263      	str	r3, [r4, #36]	; 0x24
 8004b06:	4b05      	ldr	r3, [pc, #20]	; (8004b1c <std+0x3c>)
 8004b08:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b0a:	4b05      	ldr	r3, [pc, #20]	; (8004b20 <std+0x40>)
 8004b0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b0e:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <std+0x44>)
 8004b10:	6224      	str	r4, [r4, #32]
 8004b12:	6323      	str	r3, [r4, #48]	; 0x30
 8004b14:	bd10      	pop	{r4, pc}
 8004b16:	bf00      	nop
 8004b18:	08004f0d 	.word	0x08004f0d
 8004b1c:	08004f2f 	.word	0x08004f2f
 8004b20:	08004f67 	.word	0x08004f67
 8004b24:	08004f8b 	.word	0x08004f8b

08004b28 <_cleanup_r>:
 8004b28:	4901      	ldr	r1, [pc, #4]	; (8004b30 <_cleanup_r+0x8>)
 8004b2a:	f000 b8af 	b.w	8004c8c <_fwalk_reent>
 8004b2e:	bf00      	nop
 8004b30:	08004a69 	.word	0x08004a69

08004b34 <__sfmoreglue>:
 8004b34:	b570      	push	{r4, r5, r6, lr}
 8004b36:	1e4a      	subs	r2, r1, #1
 8004b38:	2568      	movs	r5, #104	; 0x68
 8004b3a:	4355      	muls	r5, r2
 8004b3c:	460e      	mov	r6, r1
 8004b3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004b42:	f000 f979 	bl	8004e38 <_malloc_r>
 8004b46:	4604      	mov	r4, r0
 8004b48:	b140      	cbz	r0, 8004b5c <__sfmoreglue+0x28>
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	e9c0 1600 	strd	r1, r6, [r0]
 8004b50:	300c      	adds	r0, #12
 8004b52:	60a0      	str	r0, [r4, #8]
 8004b54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b58:	f7ff fdc2 	bl	80046e0 <memset>
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	bd70      	pop	{r4, r5, r6, pc}

08004b60 <__sfp_lock_acquire>:
 8004b60:	4801      	ldr	r0, [pc, #4]	; (8004b68 <__sfp_lock_acquire+0x8>)
 8004b62:	f000 b8b3 	b.w	8004ccc <__retarget_lock_acquire_recursive>
 8004b66:	bf00      	nop
 8004b68:	20000314 	.word	0x20000314

08004b6c <__sfp_lock_release>:
 8004b6c:	4801      	ldr	r0, [pc, #4]	; (8004b74 <__sfp_lock_release+0x8>)
 8004b6e:	f000 b8ae 	b.w	8004cce <__retarget_lock_release_recursive>
 8004b72:	bf00      	nop
 8004b74:	20000314 	.word	0x20000314

08004b78 <__sinit_lock_acquire>:
 8004b78:	4801      	ldr	r0, [pc, #4]	; (8004b80 <__sinit_lock_acquire+0x8>)
 8004b7a:	f000 b8a7 	b.w	8004ccc <__retarget_lock_acquire_recursive>
 8004b7e:	bf00      	nop
 8004b80:	2000030f 	.word	0x2000030f

08004b84 <__sinit_lock_release>:
 8004b84:	4801      	ldr	r0, [pc, #4]	; (8004b8c <__sinit_lock_release+0x8>)
 8004b86:	f000 b8a2 	b.w	8004cce <__retarget_lock_release_recursive>
 8004b8a:	bf00      	nop
 8004b8c:	2000030f 	.word	0x2000030f

08004b90 <__sinit>:
 8004b90:	b510      	push	{r4, lr}
 8004b92:	4604      	mov	r4, r0
 8004b94:	f7ff fff0 	bl	8004b78 <__sinit_lock_acquire>
 8004b98:	69a3      	ldr	r3, [r4, #24]
 8004b9a:	b11b      	cbz	r3, 8004ba4 <__sinit+0x14>
 8004b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ba0:	f7ff bff0 	b.w	8004b84 <__sinit_lock_release>
 8004ba4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ba8:	6523      	str	r3, [r4, #80]	; 0x50
 8004baa:	4b13      	ldr	r3, [pc, #76]	; (8004bf8 <__sinit+0x68>)
 8004bac:	4a13      	ldr	r2, [pc, #76]	; (8004bfc <__sinit+0x6c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	62a2      	str	r2, [r4, #40]	; 0x28
 8004bb2:	42a3      	cmp	r3, r4
 8004bb4:	bf04      	itt	eq
 8004bb6:	2301      	moveq	r3, #1
 8004bb8:	61a3      	streq	r3, [r4, #24]
 8004bba:	4620      	mov	r0, r4
 8004bbc:	f000 f820 	bl	8004c00 <__sfp>
 8004bc0:	6060      	str	r0, [r4, #4]
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	f000 f81c 	bl	8004c00 <__sfp>
 8004bc8:	60a0      	str	r0, [r4, #8]
 8004bca:	4620      	mov	r0, r4
 8004bcc:	f000 f818 	bl	8004c00 <__sfp>
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	60e0      	str	r0, [r4, #12]
 8004bd4:	2104      	movs	r1, #4
 8004bd6:	6860      	ldr	r0, [r4, #4]
 8004bd8:	f7ff ff82 	bl	8004ae0 <std>
 8004bdc:	68a0      	ldr	r0, [r4, #8]
 8004bde:	2201      	movs	r2, #1
 8004be0:	2109      	movs	r1, #9
 8004be2:	f7ff ff7d 	bl	8004ae0 <std>
 8004be6:	68e0      	ldr	r0, [r4, #12]
 8004be8:	2202      	movs	r2, #2
 8004bea:	2112      	movs	r1, #18
 8004bec:	f7ff ff78 	bl	8004ae0 <std>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	61a3      	str	r3, [r4, #24]
 8004bf4:	e7d2      	b.n	8004b9c <__sinit+0xc>
 8004bf6:	bf00      	nop
 8004bf8:	08005188 	.word	0x08005188
 8004bfc:	08004b29 	.word	0x08004b29

08004c00 <__sfp>:
 8004c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c02:	4607      	mov	r7, r0
 8004c04:	f7ff ffac 	bl	8004b60 <__sfp_lock_acquire>
 8004c08:	4b1e      	ldr	r3, [pc, #120]	; (8004c84 <__sfp+0x84>)
 8004c0a:	681e      	ldr	r6, [r3, #0]
 8004c0c:	69b3      	ldr	r3, [r6, #24]
 8004c0e:	b913      	cbnz	r3, 8004c16 <__sfp+0x16>
 8004c10:	4630      	mov	r0, r6
 8004c12:	f7ff ffbd 	bl	8004b90 <__sinit>
 8004c16:	3648      	adds	r6, #72	; 0x48
 8004c18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	d503      	bpl.n	8004c28 <__sfp+0x28>
 8004c20:	6833      	ldr	r3, [r6, #0]
 8004c22:	b30b      	cbz	r3, 8004c68 <__sfp+0x68>
 8004c24:	6836      	ldr	r6, [r6, #0]
 8004c26:	e7f7      	b.n	8004c18 <__sfp+0x18>
 8004c28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004c2c:	b9d5      	cbnz	r5, 8004c64 <__sfp+0x64>
 8004c2e:	4b16      	ldr	r3, [pc, #88]	; (8004c88 <__sfp+0x88>)
 8004c30:	60e3      	str	r3, [r4, #12]
 8004c32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c36:	6665      	str	r5, [r4, #100]	; 0x64
 8004c38:	f000 f847 	bl	8004cca <__retarget_lock_init_recursive>
 8004c3c:	f7ff ff96 	bl	8004b6c <__sfp_lock_release>
 8004c40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004c44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004c48:	6025      	str	r5, [r4, #0]
 8004c4a:	61a5      	str	r5, [r4, #24]
 8004c4c:	2208      	movs	r2, #8
 8004c4e:	4629      	mov	r1, r5
 8004c50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c54:	f7ff fd44 	bl	80046e0 <memset>
 8004c58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004c60:	4620      	mov	r0, r4
 8004c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c64:	3468      	adds	r4, #104	; 0x68
 8004c66:	e7d9      	b.n	8004c1c <__sfp+0x1c>
 8004c68:	2104      	movs	r1, #4
 8004c6a:	4638      	mov	r0, r7
 8004c6c:	f7ff ff62 	bl	8004b34 <__sfmoreglue>
 8004c70:	4604      	mov	r4, r0
 8004c72:	6030      	str	r0, [r6, #0]
 8004c74:	2800      	cmp	r0, #0
 8004c76:	d1d5      	bne.n	8004c24 <__sfp+0x24>
 8004c78:	f7ff ff78 	bl	8004b6c <__sfp_lock_release>
 8004c7c:	230c      	movs	r3, #12
 8004c7e:	603b      	str	r3, [r7, #0]
 8004c80:	e7ee      	b.n	8004c60 <__sfp+0x60>
 8004c82:	bf00      	nop
 8004c84:	08005188 	.word	0x08005188
 8004c88:	ffff0001 	.word	0xffff0001

08004c8c <_fwalk_reent>:
 8004c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c90:	4606      	mov	r6, r0
 8004c92:	4688      	mov	r8, r1
 8004c94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c98:	2700      	movs	r7, #0
 8004c9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c9e:	f1b9 0901 	subs.w	r9, r9, #1
 8004ca2:	d505      	bpl.n	8004cb0 <_fwalk_reent+0x24>
 8004ca4:	6824      	ldr	r4, [r4, #0]
 8004ca6:	2c00      	cmp	r4, #0
 8004ca8:	d1f7      	bne.n	8004c9a <_fwalk_reent+0xe>
 8004caa:	4638      	mov	r0, r7
 8004cac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cb0:	89ab      	ldrh	r3, [r5, #12]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d907      	bls.n	8004cc6 <_fwalk_reent+0x3a>
 8004cb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	d003      	beq.n	8004cc6 <_fwalk_reent+0x3a>
 8004cbe:	4629      	mov	r1, r5
 8004cc0:	4630      	mov	r0, r6
 8004cc2:	47c0      	blx	r8
 8004cc4:	4307      	orrs	r7, r0
 8004cc6:	3568      	adds	r5, #104	; 0x68
 8004cc8:	e7e9      	b.n	8004c9e <_fwalk_reent+0x12>

08004cca <__retarget_lock_init_recursive>:
 8004cca:	4770      	bx	lr

08004ccc <__retarget_lock_acquire_recursive>:
 8004ccc:	4770      	bx	lr

08004cce <__retarget_lock_release_recursive>:
 8004cce:	4770      	bx	lr

08004cd0 <__swhatbuf_r>:
 8004cd0:	b570      	push	{r4, r5, r6, lr}
 8004cd2:	460e      	mov	r6, r1
 8004cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cd8:	2900      	cmp	r1, #0
 8004cda:	b096      	sub	sp, #88	; 0x58
 8004cdc:	4614      	mov	r4, r2
 8004cde:	461d      	mov	r5, r3
 8004ce0:	da07      	bge.n	8004cf2 <__swhatbuf_r+0x22>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	602b      	str	r3, [r5, #0]
 8004ce6:	89b3      	ldrh	r3, [r6, #12]
 8004ce8:	061a      	lsls	r2, r3, #24
 8004cea:	d410      	bmi.n	8004d0e <__swhatbuf_r+0x3e>
 8004cec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cf0:	e00e      	b.n	8004d10 <__swhatbuf_r+0x40>
 8004cf2:	466a      	mov	r2, sp
 8004cf4:	f000 f970 	bl	8004fd8 <_fstat_r>
 8004cf8:	2800      	cmp	r0, #0
 8004cfa:	dbf2      	blt.n	8004ce2 <__swhatbuf_r+0x12>
 8004cfc:	9a01      	ldr	r2, [sp, #4]
 8004cfe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004d02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004d06:	425a      	negs	r2, r3
 8004d08:	415a      	adcs	r2, r3
 8004d0a:	602a      	str	r2, [r5, #0]
 8004d0c:	e7ee      	b.n	8004cec <__swhatbuf_r+0x1c>
 8004d0e:	2340      	movs	r3, #64	; 0x40
 8004d10:	2000      	movs	r0, #0
 8004d12:	6023      	str	r3, [r4, #0]
 8004d14:	b016      	add	sp, #88	; 0x58
 8004d16:	bd70      	pop	{r4, r5, r6, pc}

08004d18 <__smakebuf_r>:
 8004d18:	898b      	ldrh	r3, [r1, #12]
 8004d1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d1c:	079d      	lsls	r5, r3, #30
 8004d1e:	4606      	mov	r6, r0
 8004d20:	460c      	mov	r4, r1
 8004d22:	d507      	bpl.n	8004d34 <__smakebuf_r+0x1c>
 8004d24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d28:	6023      	str	r3, [r4, #0]
 8004d2a:	6123      	str	r3, [r4, #16]
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	6163      	str	r3, [r4, #20]
 8004d30:	b002      	add	sp, #8
 8004d32:	bd70      	pop	{r4, r5, r6, pc}
 8004d34:	ab01      	add	r3, sp, #4
 8004d36:	466a      	mov	r2, sp
 8004d38:	f7ff ffca 	bl	8004cd0 <__swhatbuf_r>
 8004d3c:	9900      	ldr	r1, [sp, #0]
 8004d3e:	4605      	mov	r5, r0
 8004d40:	4630      	mov	r0, r6
 8004d42:	f000 f879 	bl	8004e38 <_malloc_r>
 8004d46:	b948      	cbnz	r0, 8004d5c <__smakebuf_r+0x44>
 8004d48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d4c:	059a      	lsls	r2, r3, #22
 8004d4e:	d4ef      	bmi.n	8004d30 <__smakebuf_r+0x18>
 8004d50:	f023 0303 	bic.w	r3, r3, #3
 8004d54:	f043 0302 	orr.w	r3, r3, #2
 8004d58:	81a3      	strh	r3, [r4, #12]
 8004d5a:	e7e3      	b.n	8004d24 <__smakebuf_r+0xc>
 8004d5c:	4b0d      	ldr	r3, [pc, #52]	; (8004d94 <__smakebuf_r+0x7c>)
 8004d5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d60:	89a3      	ldrh	r3, [r4, #12]
 8004d62:	6020      	str	r0, [r4, #0]
 8004d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d68:	81a3      	strh	r3, [r4, #12]
 8004d6a:	9b00      	ldr	r3, [sp, #0]
 8004d6c:	6163      	str	r3, [r4, #20]
 8004d6e:	9b01      	ldr	r3, [sp, #4]
 8004d70:	6120      	str	r0, [r4, #16]
 8004d72:	b15b      	cbz	r3, 8004d8c <__smakebuf_r+0x74>
 8004d74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d78:	4630      	mov	r0, r6
 8004d7a:	f000 f93f 	bl	8004ffc <_isatty_r>
 8004d7e:	b128      	cbz	r0, 8004d8c <__smakebuf_r+0x74>
 8004d80:	89a3      	ldrh	r3, [r4, #12]
 8004d82:	f023 0303 	bic.w	r3, r3, #3
 8004d86:	f043 0301 	orr.w	r3, r3, #1
 8004d8a:	81a3      	strh	r3, [r4, #12]
 8004d8c:	89a0      	ldrh	r0, [r4, #12]
 8004d8e:	4305      	orrs	r5, r0
 8004d90:	81a5      	strh	r5, [r4, #12]
 8004d92:	e7cd      	b.n	8004d30 <__smakebuf_r+0x18>
 8004d94:	08004b29 	.word	0x08004b29

08004d98 <_free_r>:
 8004d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d9a:	2900      	cmp	r1, #0
 8004d9c:	d048      	beq.n	8004e30 <_free_r+0x98>
 8004d9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004da2:	9001      	str	r0, [sp, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f1a1 0404 	sub.w	r4, r1, #4
 8004daa:	bfb8      	it	lt
 8004dac:	18e4      	addlt	r4, r4, r3
 8004dae:	f000 f947 	bl	8005040 <__malloc_lock>
 8004db2:	4a20      	ldr	r2, [pc, #128]	; (8004e34 <_free_r+0x9c>)
 8004db4:	9801      	ldr	r0, [sp, #4]
 8004db6:	6813      	ldr	r3, [r2, #0]
 8004db8:	4615      	mov	r5, r2
 8004dba:	b933      	cbnz	r3, 8004dca <_free_r+0x32>
 8004dbc:	6063      	str	r3, [r4, #4]
 8004dbe:	6014      	str	r4, [r2, #0]
 8004dc0:	b003      	add	sp, #12
 8004dc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004dc6:	f000 b941 	b.w	800504c <__malloc_unlock>
 8004dca:	42a3      	cmp	r3, r4
 8004dcc:	d90b      	bls.n	8004de6 <_free_r+0x4e>
 8004dce:	6821      	ldr	r1, [r4, #0]
 8004dd0:	1862      	adds	r2, r4, r1
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	bf04      	itt	eq
 8004dd6:	681a      	ldreq	r2, [r3, #0]
 8004dd8:	685b      	ldreq	r3, [r3, #4]
 8004dda:	6063      	str	r3, [r4, #4]
 8004ddc:	bf04      	itt	eq
 8004dde:	1852      	addeq	r2, r2, r1
 8004de0:	6022      	streq	r2, [r4, #0]
 8004de2:	602c      	str	r4, [r5, #0]
 8004de4:	e7ec      	b.n	8004dc0 <_free_r+0x28>
 8004de6:	461a      	mov	r2, r3
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	b10b      	cbz	r3, 8004df0 <_free_r+0x58>
 8004dec:	42a3      	cmp	r3, r4
 8004dee:	d9fa      	bls.n	8004de6 <_free_r+0x4e>
 8004df0:	6811      	ldr	r1, [r2, #0]
 8004df2:	1855      	adds	r5, r2, r1
 8004df4:	42a5      	cmp	r5, r4
 8004df6:	d10b      	bne.n	8004e10 <_free_r+0x78>
 8004df8:	6824      	ldr	r4, [r4, #0]
 8004dfa:	4421      	add	r1, r4
 8004dfc:	1854      	adds	r4, r2, r1
 8004dfe:	42a3      	cmp	r3, r4
 8004e00:	6011      	str	r1, [r2, #0]
 8004e02:	d1dd      	bne.n	8004dc0 <_free_r+0x28>
 8004e04:	681c      	ldr	r4, [r3, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	6053      	str	r3, [r2, #4]
 8004e0a:	4421      	add	r1, r4
 8004e0c:	6011      	str	r1, [r2, #0]
 8004e0e:	e7d7      	b.n	8004dc0 <_free_r+0x28>
 8004e10:	d902      	bls.n	8004e18 <_free_r+0x80>
 8004e12:	230c      	movs	r3, #12
 8004e14:	6003      	str	r3, [r0, #0]
 8004e16:	e7d3      	b.n	8004dc0 <_free_r+0x28>
 8004e18:	6825      	ldr	r5, [r4, #0]
 8004e1a:	1961      	adds	r1, r4, r5
 8004e1c:	428b      	cmp	r3, r1
 8004e1e:	bf04      	itt	eq
 8004e20:	6819      	ldreq	r1, [r3, #0]
 8004e22:	685b      	ldreq	r3, [r3, #4]
 8004e24:	6063      	str	r3, [r4, #4]
 8004e26:	bf04      	itt	eq
 8004e28:	1949      	addeq	r1, r1, r5
 8004e2a:	6021      	streq	r1, [r4, #0]
 8004e2c:	6054      	str	r4, [r2, #4]
 8004e2e:	e7c7      	b.n	8004dc0 <_free_r+0x28>
 8004e30:	b003      	add	sp, #12
 8004e32:	bd30      	pop	{r4, r5, pc}
 8004e34:	200000bc 	.word	0x200000bc

08004e38 <_malloc_r>:
 8004e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3a:	1ccd      	adds	r5, r1, #3
 8004e3c:	f025 0503 	bic.w	r5, r5, #3
 8004e40:	3508      	adds	r5, #8
 8004e42:	2d0c      	cmp	r5, #12
 8004e44:	bf38      	it	cc
 8004e46:	250c      	movcc	r5, #12
 8004e48:	2d00      	cmp	r5, #0
 8004e4a:	4606      	mov	r6, r0
 8004e4c:	db01      	blt.n	8004e52 <_malloc_r+0x1a>
 8004e4e:	42a9      	cmp	r1, r5
 8004e50:	d903      	bls.n	8004e5a <_malloc_r+0x22>
 8004e52:	230c      	movs	r3, #12
 8004e54:	6033      	str	r3, [r6, #0]
 8004e56:	2000      	movs	r0, #0
 8004e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e5a:	f000 f8f1 	bl	8005040 <__malloc_lock>
 8004e5e:	4921      	ldr	r1, [pc, #132]	; (8004ee4 <_malloc_r+0xac>)
 8004e60:	680a      	ldr	r2, [r1, #0]
 8004e62:	4614      	mov	r4, r2
 8004e64:	b99c      	cbnz	r4, 8004e8e <_malloc_r+0x56>
 8004e66:	4f20      	ldr	r7, [pc, #128]	; (8004ee8 <_malloc_r+0xb0>)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	b923      	cbnz	r3, 8004e76 <_malloc_r+0x3e>
 8004e6c:	4621      	mov	r1, r4
 8004e6e:	4630      	mov	r0, r6
 8004e70:	f000 f83c 	bl	8004eec <_sbrk_r>
 8004e74:	6038      	str	r0, [r7, #0]
 8004e76:	4629      	mov	r1, r5
 8004e78:	4630      	mov	r0, r6
 8004e7a:	f000 f837 	bl	8004eec <_sbrk_r>
 8004e7e:	1c43      	adds	r3, r0, #1
 8004e80:	d123      	bne.n	8004eca <_malloc_r+0x92>
 8004e82:	230c      	movs	r3, #12
 8004e84:	6033      	str	r3, [r6, #0]
 8004e86:	4630      	mov	r0, r6
 8004e88:	f000 f8e0 	bl	800504c <__malloc_unlock>
 8004e8c:	e7e3      	b.n	8004e56 <_malloc_r+0x1e>
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	1b5b      	subs	r3, r3, r5
 8004e92:	d417      	bmi.n	8004ec4 <_malloc_r+0x8c>
 8004e94:	2b0b      	cmp	r3, #11
 8004e96:	d903      	bls.n	8004ea0 <_malloc_r+0x68>
 8004e98:	6023      	str	r3, [r4, #0]
 8004e9a:	441c      	add	r4, r3
 8004e9c:	6025      	str	r5, [r4, #0]
 8004e9e:	e004      	b.n	8004eaa <_malloc_r+0x72>
 8004ea0:	6863      	ldr	r3, [r4, #4]
 8004ea2:	42a2      	cmp	r2, r4
 8004ea4:	bf0c      	ite	eq
 8004ea6:	600b      	streq	r3, [r1, #0]
 8004ea8:	6053      	strne	r3, [r2, #4]
 8004eaa:	4630      	mov	r0, r6
 8004eac:	f000 f8ce 	bl	800504c <__malloc_unlock>
 8004eb0:	f104 000b 	add.w	r0, r4, #11
 8004eb4:	1d23      	adds	r3, r4, #4
 8004eb6:	f020 0007 	bic.w	r0, r0, #7
 8004eba:	1ac2      	subs	r2, r0, r3
 8004ebc:	d0cc      	beq.n	8004e58 <_malloc_r+0x20>
 8004ebe:	1a1b      	subs	r3, r3, r0
 8004ec0:	50a3      	str	r3, [r4, r2]
 8004ec2:	e7c9      	b.n	8004e58 <_malloc_r+0x20>
 8004ec4:	4622      	mov	r2, r4
 8004ec6:	6864      	ldr	r4, [r4, #4]
 8004ec8:	e7cc      	b.n	8004e64 <_malloc_r+0x2c>
 8004eca:	1cc4      	adds	r4, r0, #3
 8004ecc:	f024 0403 	bic.w	r4, r4, #3
 8004ed0:	42a0      	cmp	r0, r4
 8004ed2:	d0e3      	beq.n	8004e9c <_malloc_r+0x64>
 8004ed4:	1a21      	subs	r1, r4, r0
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	f000 f808 	bl	8004eec <_sbrk_r>
 8004edc:	3001      	adds	r0, #1
 8004ede:	d1dd      	bne.n	8004e9c <_malloc_r+0x64>
 8004ee0:	e7cf      	b.n	8004e82 <_malloc_r+0x4a>
 8004ee2:	bf00      	nop
 8004ee4:	200000bc 	.word	0x200000bc
 8004ee8:	200000c0 	.word	0x200000c0

08004eec <_sbrk_r>:
 8004eec:	b538      	push	{r3, r4, r5, lr}
 8004eee:	4d06      	ldr	r5, [pc, #24]	; (8004f08 <_sbrk_r+0x1c>)
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	4608      	mov	r0, r1
 8004ef6:	602b      	str	r3, [r5, #0]
 8004ef8:	f7fb ffce 	bl	8000e98 <_sbrk>
 8004efc:	1c43      	adds	r3, r0, #1
 8004efe:	d102      	bne.n	8004f06 <_sbrk_r+0x1a>
 8004f00:	682b      	ldr	r3, [r5, #0]
 8004f02:	b103      	cbz	r3, 8004f06 <_sbrk_r+0x1a>
 8004f04:	6023      	str	r3, [r4, #0]
 8004f06:	bd38      	pop	{r3, r4, r5, pc}
 8004f08:	20000318 	.word	0x20000318

08004f0c <__sread>:
 8004f0c:	b510      	push	{r4, lr}
 8004f0e:	460c      	mov	r4, r1
 8004f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f14:	f000 f8a0 	bl	8005058 <_read_r>
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	bfab      	itete	ge
 8004f1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f1e:	89a3      	ldrhlt	r3, [r4, #12]
 8004f20:	181b      	addge	r3, r3, r0
 8004f22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f26:	bfac      	ite	ge
 8004f28:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f2a:	81a3      	strhlt	r3, [r4, #12]
 8004f2c:	bd10      	pop	{r4, pc}

08004f2e <__swrite>:
 8004f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f32:	461f      	mov	r7, r3
 8004f34:	898b      	ldrh	r3, [r1, #12]
 8004f36:	05db      	lsls	r3, r3, #23
 8004f38:	4605      	mov	r5, r0
 8004f3a:	460c      	mov	r4, r1
 8004f3c:	4616      	mov	r6, r2
 8004f3e:	d505      	bpl.n	8004f4c <__swrite+0x1e>
 8004f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f44:	2302      	movs	r3, #2
 8004f46:	2200      	movs	r2, #0
 8004f48:	f000 f868 	bl	800501c <_lseek_r>
 8004f4c:	89a3      	ldrh	r3, [r4, #12]
 8004f4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f56:	81a3      	strh	r3, [r4, #12]
 8004f58:	4632      	mov	r2, r6
 8004f5a:	463b      	mov	r3, r7
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f62:	f000 b817 	b.w	8004f94 <_write_r>

08004f66 <__sseek>:
 8004f66:	b510      	push	{r4, lr}
 8004f68:	460c      	mov	r4, r1
 8004f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f6e:	f000 f855 	bl	800501c <_lseek_r>
 8004f72:	1c43      	adds	r3, r0, #1
 8004f74:	89a3      	ldrh	r3, [r4, #12]
 8004f76:	bf15      	itete	ne
 8004f78:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f82:	81a3      	strheq	r3, [r4, #12]
 8004f84:	bf18      	it	ne
 8004f86:	81a3      	strhne	r3, [r4, #12]
 8004f88:	bd10      	pop	{r4, pc}

08004f8a <__sclose>:
 8004f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f8e:	f000 b813 	b.w	8004fb8 <_close_r>
	...

08004f94 <_write_r>:
 8004f94:	b538      	push	{r3, r4, r5, lr}
 8004f96:	4d07      	ldr	r5, [pc, #28]	; (8004fb4 <_write_r+0x20>)
 8004f98:	4604      	mov	r4, r0
 8004f9a:	4608      	mov	r0, r1
 8004f9c:	4611      	mov	r1, r2
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	602a      	str	r2, [r5, #0]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	f7fb ff27 	bl	8000df6 <_write>
 8004fa8:	1c43      	adds	r3, r0, #1
 8004faa:	d102      	bne.n	8004fb2 <_write_r+0x1e>
 8004fac:	682b      	ldr	r3, [r5, #0]
 8004fae:	b103      	cbz	r3, 8004fb2 <_write_r+0x1e>
 8004fb0:	6023      	str	r3, [r4, #0]
 8004fb2:	bd38      	pop	{r3, r4, r5, pc}
 8004fb4:	20000318 	.word	0x20000318

08004fb8 <_close_r>:
 8004fb8:	b538      	push	{r3, r4, r5, lr}
 8004fba:	4d06      	ldr	r5, [pc, #24]	; (8004fd4 <_close_r+0x1c>)
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	4604      	mov	r4, r0
 8004fc0:	4608      	mov	r0, r1
 8004fc2:	602b      	str	r3, [r5, #0]
 8004fc4:	f7fb ff33 	bl	8000e2e <_close>
 8004fc8:	1c43      	adds	r3, r0, #1
 8004fca:	d102      	bne.n	8004fd2 <_close_r+0x1a>
 8004fcc:	682b      	ldr	r3, [r5, #0]
 8004fce:	b103      	cbz	r3, 8004fd2 <_close_r+0x1a>
 8004fd0:	6023      	str	r3, [r4, #0]
 8004fd2:	bd38      	pop	{r3, r4, r5, pc}
 8004fd4:	20000318 	.word	0x20000318

08004fd8 <_fstat_r>:
 8004fd8:	b538      	push	{r3, r4, r5, lr}
 8004fda:	4d07      	ldr	r5, [pc, #28]	; (8004ff8 <_fstat_r+0x20>)
 8004fdc:	2300      	movs	r3, #0
 8004fde:	4604      	mov	r4, r0
 8004fe0:	4608      	mov	r0, r1
 8004fe2:	4611      	mov	r1, r2
 8004fe4:	602b      	str	r3, [r5, #0]
 8004fe6:	f7fb ff2e 	bl	8000e46 <_fstat>
 8004fea:	1c43      	adds	r3, r0, #1
 8004fec:	d102      	bne.n	8004ff4 <_fstat_r+0x1c>
 8004fee:	682b      	ldr	r3, [r5, #0]
 8004ff0:	b103      	cbz	r3, 8004ff4 <_fstat_r+0x1c>
 8004ff2:	6023      	str	r3, [r4, #0]
 8004ff4:	bd38      	pop	{r3, r4, r5, pc}
 8004ff6:	bf00      	nop
 8004ff8:	20000318 	.word	0x20000318

08004ffc <_isatty_r>:
 8004ffc:	b538      	push	{r3, r4, r5, lr}
 8004ffe:	4d06      	ldr	r5, [pc, #24]	; (8005018 <_isatty_r+0x1c>)
 8005000:	2300      	movs	r3, #0
 8005002:	4604      	mov	r4, r0
 8005004:	4608      	mov	r0, r1
 8005006:	602b      	str	r3, [r5, #0]
 8005008:	f7fb ff2d 	bl	8000e66 <_isatty>
 800500c:	1c43      	adds	r3, r0, #1
 800500e:	d102      	bne.n	8005016 <_isatty_r+0x1a>
 8005010:	682b      	ldr	r3, [r5, #0]
 8005012:	b103      	cbz	r3, 8005016 <_isatty_r+0x1a>
 8005014:	6023      	str	r3, [r4, #0]
 8005016:	bd38      	pop	{r3, r4, r5, pc}
 8005018:	20000318 	.word	0x20000318

0800501c <_lseek_r>:
 800501c:	b538      	push	{r3, r4, r5, lr}
 800501e:	4d07      	ldr	r5, [pc, #28]	; (800503c <_lseek_r+0x20>)
 8005020:	4604      	mov	r4, r0
 8005022:	4608      	mov	r0, r1
 8005024:	4611      	mov	r1, r2
 8005026:	2200      	movs	r2, #0
 8005028:	602a      	str	r2, [r5, #0]
 800502a:	461a      	mov	r2, r3
 800502c:	f7fb ff26 	bl	8000e7c <_lseek>
 8005030:	1c43      	adds	r3, r0, #1
 8005032:	d102      	bne.n	800503a <_lseek_r+0x1e>
 8005034:	682b      	ldr	r3, [r5, #0]
 8005036:	b103      	cbz	r3, 800503a <_lseek_r+0x1e>
 8005038:	6023      	str	r3, [r4, #0]
 800503a:	bd38      	pop	{r3, r4, r5, pc}
 800503c:	20000318 	.word	0x20000318

08005040 <__malloc_lock>:
 8005040:	4801      	ldr	r0, [pc, #4]	; (8005048 <__malloc_lock+0x8>)
 8005042:	f7ff be43 	b.w	8004ccc <__retarget_lock_acquire_recursive>
 8005046:	bf00      	nop
 8005048:	20000310 	.word	0x20000310

0800504c <__malloc_unlock>:
 800504c:	4801      	ldr	r0, [pc, #4]	; (8005054 <__malloc_unlock+0x8>)
 800504e:	f7ff be3e 	b.w	8004cce <__retarget_lock_release_recursive>
 8005052:	bf00      	nop
 8005054:	20000310 	.word	0x20000310

08005058 <_read_r>:
 8005058:	b538      	push	{r3, r4, r5, lr}
 800505a:	4d07      	ldr	r5, [pc, #28]	; (8005078 <_read_r+0x20>)
 800505c:	4604      	mov	r4, r0
 800505e:	4608      	mov	r0, r1
 8005060:	4611      	mov	r1, r2
 8005062:	2200      	movs	r2, #0
 8005064:	602a      	str	r2, [r5, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	f7fb fea8 	bl	8000dbc <_read>
 800506c:	1c43      	adds	r3, r0, #1
 800506e:	d102      	bne.n	8005076 <_read_r+0x1e>
 8005070:	682b      	ldr	r3, [r5, #0]
 8005072:	b103      	cbz	r3, 8005076 <_read_r+0x1e>
 8005074:	6023      	str	r3, [r4, #0]
 8005076:	bd38      	pop	{r3, r4, r5, pc}
 8005078:	20000318 	.word	0x20000318

0800507c <_init>:
 800507c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507e:	bf00      	nop
 8005080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005082:	bc08      	pop	{r3}
 8005084:	469e      	mov	lr, r3
 8005086:	4770      	bx	lr

08005088 <_fini>:
 8005088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800508a:	bf00      	nop
 800508c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800508e:	bc08      	pop	{r3}
 8005090:	469e      	mov	lr, r3
 8005092:	4770      	bx	lr
