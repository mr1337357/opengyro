
spracingf3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fd4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08006164  08006164  00016164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006290  08006290  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08006290  08006290  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006290  08006290  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006290  08006290  00016290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006294  08006294  00016294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000464  20000068  08006300  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  08006300  000204cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012abc  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002965  00000000  00000000  00032b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d0  00000000  00000000  00035500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d2d  00000000  00000000  000365d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f532  00000000  00000000  000372fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015ca9  00000000  00000000  0005682f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9e77  00000000  00000000  0006c4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e0c  00000000  00000000  00126350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0012b15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800614c 	.word	0x0800614c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800614c 	.word	0x0800614c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <EXTI0_IRQHandler>:
	int val = gpio_read(pin.argi);
	printf("pin interrupt %ld %d\n",pin.argi,val);
}

void EXTI0_IRQHandler(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000274:	2001      	movs	r0, #1
 8000276:	f001 fbd7 	bl	8001a28 <HAL_GPIO_EXTI_IRQHandler>

}
 800027a:	bf00      	nop
 800027c:	bd80      	pop	{r7, pc}

0800027e <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800027e:	b580      	push	{r7, lr}
 8000280:	af00      	add	r7, sp, #0

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000282:	2002      	movs	r0, #2
 8000284:	f001 fbd0 	bl	8001a28 <HAL_GPIO_EXTI_IRQHandler>

}
 8000288:	bf00      	nop
 800028a:	bd80      	pop	{r7, pc}

0800028c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11); //requires update if pins change. figure out how to rework.
 8000290:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000294:	f001 fbc8 	bl	8001a28 <HAL_GPIO_EXTI_IRQHandler>

}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}

0800029c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	80fb      	strh	r3, [r7, #6]
	int i;
//	task gpio_task = { .arg.argi = GPIO_Pin,
//					   .func = test_gpio_task};
//	sched_add_task(&gpio_task);
	for(i=0;i<NUM_PINS;i++)
 80002a6:	2300      	movs	r3, #0
 80002a8:	60fb      	str	r3, [r7, #12]
 80002aa:	e009      	b.n	80002c0 <HAL_GPIO_EXTI_Callback+0x24>
	{
		if(gpio2hal_map[i] == GPIO_Pin)
 80002ac:	4a0f      	ldr	r2, [pc, #60]	; (80002ec <HAL_GPIO_EXTI_Callback+0x50>)
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002b4:	88fb      	ldrh	r3, [r7, #6]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d006      	beq.n	80002c8 <HAL_GPIO_EXTI_Callback+0x2c>
	for(i=0;i<NUM_PINS;i++)
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	3301      	adds	r3, #1
 80002be:	60fb      	str	r3, [r7, #12]
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	2b0a      	cmp	r3, #10
 80002c4:	d9f2      	bls.n	80002ac <HAL_GPIO_EXTI_Callback+0x10>
 80002c6:	e000      	b.n	80002ca <HAL_GPIO_EXTI_Callback+0x2e>
		{
			break;
 80002c8:	bf00      	nop
		}
	}
	if(pin_handlers[i] != 0)
 80002ca:	4a09      	ldr	r2, [pc, #36]	; (80002f0 <HAL_GPIO_EXTI_Callback+0x54>)
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d005      	beq.n	80002e2 <HAL_GPIO_EXTI_Callback+0x46>
	{
		pin_handlers[i](i);
 80002d6:	4a06      	ldr	r2, [pc, #24]	; (80002f0 <HAL_GPIO_EXTI_Callback+0x54>)
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002de:	68f8      	ldr	r0, [r7, #12]
 80002e0:	4798      	blx	r3
	}
}
 80002e2:	bf00      	nop
 80002e4:	3710      	adds	r7, #16
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	080061cc 	.word	0x080061cc
 80002f0:	20000084 	.word	0x20000084

080002f4 <gpio_init>:

void gpio_init()
{
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fa:	4b15      	ldr	r3, [pc, #84]	; (8000350 <gpio_init+0x5c>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a14      	ldr	r2, [pc, #80]	; (8000350 <gpio_init+0x5c>)
 8000300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b12      	ldr	r3, [pc, #72]	; (8000350 <gpio_init+0x5c>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800030e:	60fb      	str	r3, [r7, #12]
 8000310:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000312:	4b0f      	ldr	r3, [pc, #60]	; (8000350 <gpio_init+0x5c>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	4a0e      	ldr	r2, [pc, #56]	; (8000350 <gpio_init+0x5c>)
 8000318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800031c:	6153      	str	r3, [r2, #20]
 800031e:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <gpio_init+0x5c>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000326:	60bb      	str	r3, [r7, #8]
 8000328:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800032a:	4b09      	ldr	r3, [pc, #36]	; (8000350 <gpio_init+0x5c>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	4a08      	ldr	r2, [pc, #32]	; (8000350 <gpio_init+0x5c>)
 8000330:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000334:	6153      	str	r3, [r2, #20]
 8000336:	4b06      	ldr	r3, [pc, #24]	; (8000350 <gpio_init+0x5c>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800033e:	607b      	str	r3, [r7, #4]
 8000340:	687b      	ldr	r3, [r7, #4]
}
 8000342:	bf00      	nop
 8000344:	3714      	adds	r7, #20
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	40021000 	.word	0x40021000

08000354 <gpio_read>:
{
	return NUM_PINS;
}

int gpio_read(int pin)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(wrappers[pin].port, wrappers[pin].pin);
 800035c:	4a08      	ldr	r2, [pc, #32]	; (8000380 <gpio_read+0x2c>)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000364:	4906      	ldr	r1, [pc, #24]	; (8000380 <gpio_read+0x2c>)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	00db      	lsls	r3, r3, #3
 800036a:	440b      	add	r3, r1
 800036c:	889b      	ldrh	r3, [r3, #4]
 800036e:	4619      	mov	r1, r3
 8000370:	4610      	mov	r0, r2
 8000372:	f001 fb29 	bl	80019c8 <HAL_GPIO_ReadPin>
 8000376:	4603      	mov	r3, r0
}
 8000378:	4618      	mov	r0, r3
 800037a:	3708      	adds	r7, #8
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	08006174 	.word	0x08006174

08000384 <gpio_write>:

void gpio_write(int pin, int value)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(wrappers[pin].port, wrappers[pin].pin,!!value);
 800038e:	4a0b      	ldr	r2, [pc, #44]	; (80003bc <gpio_write+0x38>)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000396:	4a09      	ldr	r2, [pc, #36]	; (80003bc <gpio_write+0x38>)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	00db      	lsls	r3, r3, #3
 800039c:	4413      	add	r3, r2
 800039e:	8899      	ldrh	r1, [r3, #4]
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	bf14      	ite	ne
 80003a6:	2301      	movne	r3, #1
 80003a8:	2300      	moveq	r3, #0
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	461a      	mov	r2, r3
 80003ae:	f001 fb23 	bl	80019f8 <HAL_GPIO_WritePin>
}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	08006174 	.word	0x08006174

080003c0 <gpio_dir>:

void gpio_dir(int pin, int value) //0 is in 1 is out
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b088      	sub	sp, #32
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	6039      	str	r1, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ca:	f107 030c 	add.w	r3, r7, #12
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
 80003d8:	611a      	str	r2, [r3, #16]
	//HAL_GPIO_DeInit(wrappers[pin].port, wrappers[pin].pin);
	GPIO_InitStruct.Pin = wrappers[pin].pin;
 80003da:	4a11      	ldr	r2, [pc, #68]	; (8000420 <gpio_dir+0x60>)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	00db      	lsls	r3, r3, #3
 80003e0:	4413      	add	r3, r2
 80003e2:	889b      	ldrh	r3, [r3, #4]
 80003e4:	60fb      	str	r3, [r7, #12]

	if(value == 0)
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d104      	bne.n	80003f6 <gpio_dir+0x36>
	{
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ec:	2300      	movs	r3, #0
 80003ee:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f0:	2300      	movs	r3, #0
 80003f2:	617b      	str	r3, [r7, #20]
 80003f4:	e005      	b.n	8000402 <gpio_dir+0x42>
	}
	else
	{
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f6:	2301      	movs	r3, #1
 80003f8:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fa:	2300      	movs	r3, #0
 80003fc:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003fe:	2303      	movs	r3, #3
 8000400:	61bb      	str	r3, [r7, #24]
	}
	HAL_GPIO_Init(wrappers[pin].port, &GPIO_InitStruct);
 8000402:	4a07      	ldr	r2, [pc, #28]	; (8000420 <gpio_dir+0x60>)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800040a:	f107 020c 	add.w	r2, r7, #12
 800040e:	4611      	mov	r1, r2
 8000410:	4618      	mov	r0, r3
 8000412:	f001 f95f 	bl	80016d4 <HAL_GPIO_Init>
}
 8000416:	bf00      	nop
 8000418:	3720      	adds	r7, #32
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	08006174 	.word	0x08006174

08000424 <gpio_interrupt>:
}



void gpio_interrupt(int pin,void (*handler)(int))
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b088      	sub	sp, #32
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042e:	f107 030c 	add.w	r3, r7, #12
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
 800043a:	60da      	str	r2, [r3, #12]
 800043c:	611a      	str	r2, [r3, #16]

	//HAL_GPIO_DeInit(wrappers[pin].port, wrappers[pin].pin);

	pin_handlers[pin] = handler;
 800043e:	491b      	ldr	r1, [pc, #108]	; (80004ac <gpio_interrupt+0x88>)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	683a      	ldr	r2, [r7, #0]
 8000444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	GPIO_InitStruct.Pin = wrappers[pin].pin;
 8000448:	4a19      	ldr	r2, [pc, #100]	; (80004b0 <gpio_interrupt+0x8c>)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	00db      	lsls	r3, r3, #3
 800044e:	4413      	add	r3, r2
 8000450:	889b      	ldrh	r3, [r3, #4]
 8000452:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000454:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000458:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045a:	2300      	movs	r3, #0
 800045c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(wrappers[pin].port, &GPIO_InitStruct);
 800045e:	4a14      	ldr	r2, [pc, #80]	; (80004b0 <gpio_interrupt+0x8c>)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000466:	f107 020c 	add.w	r2, r7, #12
 800046a:	4611      	mov	r1, r2
 800046c:	4618      	mov	r0, r3
 800046e:	f001 f931 	bl	80016d4 <HAL_GPIO_Init>

	if(irq_nums[pin] > 0)
 8000472:	4a10      	ldr	r2, [pc, #64]	; (80004b4 <gpio_interrupt+0x90>)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800047a:	2b00      	cmp	r3, #0
 800047c:	dd11      	ble.n	80004a2 <gpio_interrupt+0x7e>
	{
		HAL_NVIC_SetPriority(irq_nums[pin], 0, 0);
 800047e:	4a0d      	ldr	r2, [pc, #52]	; (80004b4 <gpio_interrupt+0x90>)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000486:	b25b      	sxtb	r3, r3
 8000488:	2200      	movs	r2, #0
 800048a:	2100      	movs	r1, #0
 800048c:	4618      	mov	r0, r3
 800048e:	f001 f8ea 	bl	8001666 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(irq_nums[pin]);
 8000492:	4a08      	ldr	r2, [pc, #32]	; (80004b4 <gpio_interrupt+0x90>)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800049a:	b25b      	sxtb	r3, r3
 800049c:	4618      	mov	r0, r3
 800049e:	f001 f8fe 	bl	800169e <HAL_NVIC_EnableIRQ>
	}
}
 80004a2:	bf00      	nop
 80004a4:	3720      	adds	r7, #32
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	20000084 	.word	0x20000084
 80004b0:	08006174 	.word	0x08006174
 80004b4:	080061f8 	.word	0x080061f8

080004b8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80004c0:	1d39      	adds	r1, r7, #4
 80004c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004c6:	2201      	movs	r2, #1
 80004c8:	4803      	ldr	r0, [pc, #12]	; (80004d8 <__io_putchar+0x20>)
 80004ca:	f004 fa95 	bl	80049f8 <HAL_UART_Transmit>

  return ch;
 80004ce:	687b      	ldr	r3, [r7, #4]
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20000238 	.word	0x20000238

080004dc <read_pwm>:
	(void)arg.argi;
	printf("hello world\n");
}

void read_pwm(task_arg arg)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	int width = pwmin_width(0);
 80004e4:	2000      	movs	r0, #0
 80004e6:	f000 fc19 	bl	8000d1c <pwmin_width>
 80004ea:	60f8      	str	r0, [r7, #12]
	printf("%d\n",width);
 80004ec:	68f9      	ldr	r1, [r7, #12]
 80004ee:	4803      	ldr	r0, [pc, #12]	; (80004fc <read_pwm+0x20>)
 80004f0:	f004 ffb8 	bl	8005464 <iprintf>
}
 80004f4:	bf00      	nop
 80004f6:	3710      	adds	r7, #16
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	08006170 	.word	0x08006170

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f000 ff6d 	bl	80013e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f84d 	bl	80005a8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  sched_init();
 800050e:	f000 fc1b 	bl	8000d48 <sched_init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 fb19 	bl	8000b48 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000516:	f000 fae7 	bl	8000ae8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800051a:	f000 f8a1 	bl	8000660 <MX_I2C1_Init>
  MX_TIM3_Init();
 800051e:	f000 f9df 	bl	80008e0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000522:	f000 fa5f 	bl	80009e4 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000526:	f000 f98d 	bl	8000844 <MX_TIM2_Init>
  MX_TIM1_Init();
 800052a:	f000 f8d9 	bl	80006e0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  task next_task;
  gpio_init();
 800052e:	f7ff fee1 	bl	80002f4 <gpio_init>
  gpio_dir(LED_PIN,1);
 8000532:	2101      	movs	r1, #1
 8000534:	2000      	movs	r0, #0
 8000536:	f7ff ff43 	bl	80003c0 <gpio_dir>
  HAL_TIM_Base_Start(&htim1);
 800053a:	4817      	ldr	r0, [pc, #92]	; (8000598 <main+0x98>)
 800053c:	f003 f82e 	bl	800359c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 8000540:	4816      	ldr	r0, [pc, #88]	; (800059c <main+0x9c>)
 8000542:	f003 f82b 	bl	800359c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8000546:	4816      	ldr	r0, [pc, #88]	; (80005a0 <main+0xa0>)
 8000548:	f003 f828 	bl	800359c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 800054c:	4815      	ldr	r0, [pc, #84]	; (80005a4 <main+0xa4>)
 800054e:	f003 f825 	bl	800359c <HAL_TIM_Base_Start>

  int steer_pwm = pwmin_init(STEERING);
 8000552:	2002      	movs	r0, #2
 8000554:	f000 fbae 	bl	8000cb4 <pwmin_init>
 8000558:	6178      	str	r0, [r7, #20]
  int throttle_pwm = pwmin_init(THROTTLE);
 800055a:	2003      	movs	r0, #3
 800055c:	f000 fbaa 	bl	8000cb4 <pwmin_init>
 8000560:	6138      	str	r0, [r7, #16]
  int gain_pwm = pwmin_init(GAIN);
 8000562:	2004      	movs	r0, #4
 8000564:	f000 fba6 	bl	8000cb4 <pwmin_init>
 8000568:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	if(sched_get_task(&next_task))
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	4618      	mov	r0, r3
 800056e:	f000 fc2b 	bl	8000dc8 <sched_get_task>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d006      	beq.n	8000586 <main+0x86>
	{
		if(next_task.func)
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d0f5      	beq.n	800056a <main+0x6a>
		{
			next_task.func(next_task.arg);
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	4798      	blx	r3
 8000584:	e7f1      	b.n	800056a <main+0x6a>
		}
	}
	else
	{
		//HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
		gpio_write(LED_PIN,0);
 8000586:	2100      	movs	r1, #0
 8000588:	2000      	movs	r0, #0
 800058a:	f7ff fefb 	bl	8000384 <gpio_write>
		//__WFI();
		gpio_write(LED_PIN,1);
 800058e:	2101      	movs	r1, #1
 8000590:	2000      	movs	r0, #0
 8000592:	f7ff fef7 	bl	8000384 <gpio_write>
	if(sched_get_task(&next_task))
 8000596:	e7e8      	b.n	800056a <main+0x6a>
 8000598:	20000108 	.word	0x20000108
 800059c:	20000154 	.word	0x20000154
 80005a0:	200001a0 	.word	0x200001a0
 80005a4:	200001ec 	.word	0x200001ec

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b09e      	sub	sp, #120	; 0x78
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80005b2:	2228      	movs	r2, #40	; 0x28
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f005 f83e 	bl	8005638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005cc:	463b      	mov	r3, r7
 80005ce:	223c      	movs	r2, #60	; 0x3c
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f005 f830 	bl	8005638 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d8:	2302      	movs	r3, #2
 80005da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005dc:	2301      	movs	r3, #1
 80005de:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e0:	2310      	movs	r3, #16
 80005e2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e4:	2302      	movs	r3, #2
 80005e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e8:	2300      	movs	r3, #0
 80005ea:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80005ec:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80005f0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 fb54 	bl	8001ca4 <HAL_RCC_OscConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000602:	f000 faf9 	bl	8000bf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000606:	230f      	movs	r3, #15
 8000608:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060a:	2302      	movs	r3, #2
 800060c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000616:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800061c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000620:	2102      	movs	r1, #2
 8000622:	4618      	mov	r0, r3
 8000624:	f002 fb7c 	bl	8002d20 <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800062e:	f000 fae3 	bl	8000bf8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8000632:	f241 0321 	movw	r3, #4129	; 0x1021
 8000636:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800063c:	2300      	movs	r3, #0
 800063e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000640:	2300      	movs	r3, #0
 8000642:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000644:	463b      	mov	r3, r7
 8000646:	4618      	mov	r0, r3
 8000648:	f002 fda0 	bl	800318c <HAL_RCCEx_PeriphCLKConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000652:	f000 fad1 	bl	8000bf8 <Error_Handler>
  }
}
 8000656:	bf00      	nop
 8000658:	3778      	adds	r7, #120	; 0x78
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <MX_I2C1_Init+0x74>)
 8000666:	4a1c      	ldr	r2, [pc, #112]	; (80006d8 <MX_I2C1_Init+0x78>)
 8000668:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800066a:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <MX_I2C1_Init+0x74>)
 800066c:	4a1b      	ldr	r2, [pc, #108]	; (80006dc <MX_I2C1_Init+0x7c>)
 800066e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000670:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <MX_I2C1_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <MX_I2C1_Init+0x74>)
 8000678:	2201      	movs	r2, #1
 800067a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <MX_I2C1_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_I2C1_Init+0x74>)
 8000684:	2200      	movs	r2, #0
 8000686:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_I2C1_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_I2C1_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_I2C1_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800069a:	480e      	ldr	r0, [pc, #56]	; (80006d4 <MX_I2C1_Init+0x74>)
 800069c:	f001 f9dc 	bl	8001a58 <HAL_I2C_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006a6:	f000 faa7 	bl	8000bf8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006aa:	2100      	movs	r1, #0
 80006ac:	4809      	ldr	r0, [pc, #36]	; (80006d4 <MX_I2C1_Init+0x74>)
 80006ae:	f001 fa62 	bl	8001b76 <HAL_I2CEx_ConfigAnalogFilter>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006b8:	f000 fa9e 	bl	8000bf8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006bc:	2100      	movs	r1, #0
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_I2C1_Init+0x74>)
 80006c0:	f001 faa4 	bl	8001c0c <HAL_I2CEx_ConfigDigitalFilter>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006ca:	f000 fa95 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	200000b4 	.word	0x200000b4
 80006d8:	40005400 	.word	0x40005400
 80006dc:	2000090e 	.word	0x2000090e

080006e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b09a      	sub	sp, #104	; 0x68
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000700:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
 8000710:	615a      	str	r2, [r3, #20]
 8000712:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	222c      	movs	r2, #44	; 0x2c
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f004 ff8c 	bl	8005638 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000720:	4b46      	ldr	r3, [pc, #280]	; (800083c <MX_TIM1_Init+0x15c>)
 8000722:	4a47      	ldr	r2, [pc, #284]	; (8000840 <MX_TIM1_Init+0x160>)
 8000724:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64;
 8000726:	4b45      	ldr	r3, [pc, #276]	; (800083c <MX_TIM1_Init+0x15c>)
 8000728:	2240      	movs	r2, #64	; 0x40
 800072a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072c:	4b43      	ldr	r3, [pc, #268]	; (800083c <MX_TIM1_Init+0x15c>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000732:	4b42      	ldr	r3, [pc, #264]	; (800083c <MX_TIM1_Init+0x15c>)
 8000734:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000738:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800073a:	4b40      	ldr	r3, [pc, #256]	; (800083c <MX_TIM1_Init+0x15c>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000740:	4b3e      	ldr	r3, [pc, #248]	; (800083c <MX_TIM1_Init+0x15c>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000746:	4b3d      	ldr	r3, [pc, #244]	; (800083c <MX_TIM1_Init+0x15c>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800074c:	483b      	ldr	r0, [pc, #236]	; (800083c <MX_TIM1_Init+0x15c>)
 800074e:	f002 fecd 	bl	80034ec <HAL_TIM_Base_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000758:	f000 fa4e 	bl	8000bf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800075c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000760:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000762:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000766:	4619      	mov	r1, r3
 8000768:	4834      	ldr	r0, [pc, #208]	; (800083c <MX_TIM1_Init+0x15c>)
 800076a:	f003 fae9 	bl	8003d40 <HAL_TIM_ConfigClockSource>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000774:	f000 fa40 	bl	8000bf8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000778:	4830      	ldr	r0, [pc, #192]	; (800083c <MX_TIM1_Init+0x15c>)
 800077a:	f002 ff71 	bl	8003660 <HAL_TIM_OC_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000784:	f000 fa38 	bl	8000bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000788:	2300      	movs	r3, #0
 800078a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800078c:	2300      	movs	r3, #0
 800078e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000794:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000798:	4619      	mov	r1, r3
 800079a:	4828      	ldr	r0, [pc, #160]	; (800083c <MX_TIM1_Init+0x15c>)
 800079c:	f003 ffc2 	bl	8004724 <HAL_TIMEx_MasterConfigSynchronization>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80007a6:	f000 fa27 	bl	8000bf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80007aa:	2300      	movs	r3, #0
 80007ac:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007b2:	2300      	movs	r3, #0
 80007b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007b6:	2300      	movs	r3, #0
 80007b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007be:	2300      	movs	r3, #0
 80007c0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007c2:	2300      	movs	r3, #0
 80007c4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007ca:	2200      	movs	r2, #0
 80007cc:	4619      	mov	r1, r3
 80007ce:	481b      	ldr	r0, [pc, #108]	; (800083c <MX_TIM1_Init+0x15c>)
 80007d0:	f003 f928 	bl	8003a24 <HAL_TIM_OC_ConfigChannel>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80007da:	f000 fa0d 	bl	8000bf8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000800:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	4619      	mov	r1, r3
 8000812:	480a      	ldr	r0, [pc, #40]	; (800083c <MX_TIM1_Init+0x15c>)
 8000814:	f004 f806 	bl	8004824 <HAL_TIMEx_ConfigBreakDeadTime>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800081e:	f000 f9eb 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2100      	movs	r1, #0
 8000826:	2019      	movs	r0, #25
 8000828:	f000 ff1d 	bl	8001666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800082c:	2019      	movs	r0, #25
 800082e:	f000 ff36 	bl	800169e <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM1_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	3768      	adds	r7, #104	; 0x68
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000108 	.word	0x20000108
 8000840:	40012c00 	.word	0x40012c00

08000844 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800084a:	f107 0310 	add.w	r3, r7, #16
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000862:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <MX_TIM2_Init+0x98>)
 8000864:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000868:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 800086a:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <MX_TIM2_Init+0x98>)
 800086c:	2240      	movs	r2, #64	; 0x40
 800086e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000870:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_TIM2_Init+0x98>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000876:	4b19      	ldr	r3, [pc, #100]	; (80008dc <MX_TIM2_Init+0x98>)
 8000878:	f242 7210 	movw	r2, #10000	; 0x2710
 800087c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <MX_TIM2_Init+0x98>)
 8000880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000884:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MX_TIM2_Init+0x98>)
 8000888:	2280      	movs	r2, #128	; 0x80
 800088a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800088c:	4813      	ldr	r0, [pc, #76]	; (80008dc <MX_TIM2_Init+0x98>)
 800088e:	f002 fe2d 	bl	80034ec <HAL_TIM_Base_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000898:	f000 f9ae 	bl	8000bf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800089c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008a2:	f107 0310 	add.w	r3, r7, #16
 80008a6:	4619      	mov	r1, r3
 80008a8:	480c      	ldr	r0, [pc, #48]	; (80008dc <MX_TIM2_Init+0x98>)
 80008aa:	f003 fa49 	bl	8003d40 <HAL_TIM_ConfigClockSource>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80008b4:	f000 f9a0 	bl	8000bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b8:	2300      	movs	r3, #0
 80008ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	4619      	mov	r1, r3
 80008c4:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_TIM2_Init+0x98>)
 80008c6:	f003 ff2d 	bl	8004724 <HAL_TIMEx_MasterConfigSynchronization>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80008d0:	f000 f992 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	3720      	adds	r7, #32
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000154 	.word	0x20000154

080008e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08e      	sub	sp, #56	; 0x38
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000900:	463b      	mov	r3, r7
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
 800090c:	611a      	str	r2, [r3, #16]
 800090e:	615a      	str	r2, [r3, #20]
 8000910:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000912:	4b32      	ldr	r3, [pc, #200]	; (80009dc <MX_TIM3_Init+0xfc>)
 8000914:	4a32      	ldr	r2, [pc, #200]	; (80009e0 <MX_TIM3_Init+0x100>)
 8000916:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 8000918:	4b30      	ldr	r3, [pc, #192]	; (80009dc <MX_TIM3_Init+0xfc>)
 800091a:	2240      	movs	r2, #64	; 0x40
 800091c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091e:	4b2f      	ldr	r3, [pc, #188]	; (80009dc <MX_TIM3_Init+0xfc>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000924:	4b2d      	ldr	r3, [pc, #180]	; (80009dc <MX_TIM3_Init+0xfc>)
 8000926:	f242 7210 	movw	r2, #10000	; 0x2710
 800092a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800092c:	4b2b      	ldr	r3, [pc, #172]	; (80009dc <MX_TIM3_Init+0xfc>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000932:	4b2a      	ldr	r3, [pc, #168]	; (80009dc <MX_TIM3_Init+0xfc>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000938:	4828      	ldr	r0, [pc, #160]	; (80009dc <MX_TIM3_Init+0xfc>)
 800093a:	f002 fdd7 	bl	80034ec <HAL_TIM_Base_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000944:	f000 f958 	bl	8000bf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800094e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000952:	4619      	mov	r1, r3
 8000954:	4821      	ldr	r0, [pc, #132]	; (80009dc <MX_TIM3_Init+0xfc>)
 8000956:	f003 f9f3 	bl	8003d40 <HAL_TIM_ConfigClockSource>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000960:	f000 f94a 	bl	8000bf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000964:	481d      	ldr	r0, [pc, #116]	; (80009dc <MX_TIM3_Init+0xfc>)
 8000966:	f002 fedc 	bl	8003722 <HAL_TIM_PWM_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000970:	f000 f942 	bl	8000bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	4816      	ldr	r0, [pc, #88]	; (80009dc <MX_TIM3_Init+0xfc>)
 8000984:	f003 fece 	bl	8004724 <HAL_TIMEx_MasterConfigSynchronization>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800098e:	f000 f933 	bl	8000bf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000992:	2360      	movs	r3, #96	; 0x60
 8000994:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009a2:	463b      	mov	r3, r7
 80009a4:	2200      	movs	r2, #0
 80009a6:	4619      	mov	r1, r3
 80009a8:	480c      	ldr	r0, [pc, #48]	; (80009dc <MX_TIM3_Init+0xfc>)
 80009aa:	f003 f8b5 	bl	8003b18 <HAL_TIM_PWM_ConfigChannel>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80009b4:	f000 f920 	bl	8000bf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009b8:	463b      	mov	r3, r7
 80009ba:	2204      	movs	r2, #4
 80009bc:	4619      	mov	r1, r3
 80009be:	4807      	ldr	r0, [pc, #28]	; (80009dc <MX_TIM3_Init+0xfc>)
 80009c0:	f003 f8aa 	bl	8003b18 <HAL_TIM_PWM_ConfigChannel>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80009ca:	f000 f915 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009ce:	4803      	ldr	r0, [pc, #12]	; (80009dc <MX_TIM3_Init+0xfc>)
 80009d0:	f000 fb36 	bl	8001040 <HAL_TIM_MspPostInit>

}
 80009d4:	bf00      	nop
 80009d6:	3738      	adds	r7, #56	; 0x38
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	200001a0 	.word	0x200001a0
 80009e0:	40000400 	.word	0x40000400

080009e4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08e      	sub	sp, #56	; 0x38
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a04:	463b      	mov	r3, r7
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]
 8000a12:	615a      	str	r2, [r3, #20]
 8000a14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a16:	4b32      	ldr	r3, [pc, #200]	; (8000ae0 <MX_TIM4_Init+0xfc>)
 8000a18:	4a32      	ldr	r2, [pc, #200]	; (8000ae4 <MX_TIM4_Init+0x100>)
 8000a1a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5000;
 8000a1c:	4b30      	ldr	r3, [pc, #192]	; (8000ae0 <MX_TIM4_Init+0xfc>)
 8000a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a22:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a24:	4b2e      	ldr	r3, [pc, #184]	; (8000ae0 <MX_TIM4_Init+0xfc>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 8000a2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ae0 <MX_TIM4_Init+0xfc>)
 8000a2c:	22ff      	movs	r2, #255	; 0xff
 8000a2e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a30:	4b2b      	ldr	r3, [pc, #172]	; (8000ae0 <MX_TIM4_Init+0xfc>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a36:	4b2a      	ldr	r3, [pc, #168]	; (8000ae0 <MX_TIM4_Init+0xfc>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a3c:	4828      	ldr	r0, [pc, #160]	; (8000ae0 <MX_TIM4_Init+0xfc>)
 8000a3e:	f002 fd55 	bl	80034ec <HAL_TIM_Base_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000a48:	f000 f8d6 	bl	8000bf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a56:	4619      	mov	r1, r3
 8000a58:	4821      	ldr	r0, [pc, #132]	; (8000ae0 <MX_TIM4_Init+0xfc>)
 8000a5a:	f003 f971 	bl	8003d40 <HAL_TIM_ConfigClockSource>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000a64:	f000 f8c8 	bl	8000bf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a68:	481d      	ldr	r0, [pc, #116]	; (8000ae0 <MX_TIM4_Init+0xfc>)
 8000a6a:	f002 fe5a 	bl	8003722 <HAL_TIM_PWM_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000a74:	f000 f8c0 	bl	8000bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	4816      	ldr	r0, [pc, #88]	; (8000ae0 <MX_TIM4_Init+0xfc>)
 8000a88:	f003 fe4c 	bl	8004724 <HAL_TIMEx_MasterConfigSynchronization>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000a92:	f000 f8b1 	bl	8000bf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a96:	2360      	movs	r3, #96	; 0x60
 8000a98:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	4619      	mov	r1, r3
 8000aac:	480c      	ldr	r0, [pc, #48]	; (8000ae0 <MX_TIM4_Init+0xfc>)
 8000aae:	f003 f833 	bl	8003b18 <HAL_TIM_PWM_ConfigChannel>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000ab8:	f000 f89e 	bl	8000bf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000abc:	463b      	mov	r3, r7
 8000abe:	2204      	movs	r2, #4
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4807      	ldr	r0, [pc, #28]	; (8000ae0 <MX_TIM4_Init+0xfc>)
 8000ac4:	f003 f828 	bl	8003b18 <HAL_TIM_PWM_ConfigChannel>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8000ace:	f000 f893 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ad2:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <MX_TIM4_Init+0xfc>)
 8000ad4:	f000 fab4 	bl	8001040 <HAL_TIM_MspPostInit>

}
 8000ad8:	bf00      	nop
 8000ada:	3738      	adds	r7, #56	; 0x38
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	200001ec 	.word	0x200001ec
 8000ae4:	40000800 	.word	0x40000800

08000ae8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <MX_USART1_UART_Init+0x58>)
 8000aee:	4a15      	ldr	r2, [pc, #84]	; (8000b44 <MX_USART1_UART_Init+0x5c>)
 8000af0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000af2:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <MX_USART1_UART_Init+0x58>)
 8000af4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000af8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <MX_USART1_UART_Init+0x58>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <MX_USART1_UART_Init+0x58>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MX_USART1_UART_Init+0x58>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <MX_USART1_UART_Init+0x58>)
 8000b0e:	220c      	movs	r2, #12
 8000b10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <MX_USART1_UART_Init+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_USART1_UART_Init+0x58>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <MX_USART1_UART_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <MX_USART1_UART_Init+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b2a:	4805      	ldr	r0, [pc, #20]	; (8000b40 <MX_USART1_UART_Init+0x58>)
 8000b2c:	f003 ff16 	bl	800495c <HAL_UART_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b36:	f000 f85f 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000238 	.word	0x20000238
 8000b44:	40013800 	.word	0x40013800

08000b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_GPIO_Init+0x44>)
 8000b50:	695b      	ldr	r3, [r3, #20]
 8000b52:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <MX_GPIO_Init+0x44>)
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b58:	6153      	str	r3, [r2, #20]
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_GPIO_Init+0x44>)
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_GPIO_Init+0x44>)
 8000b68:	695b      	ldr	r3, [r3, #20]
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <MX_GPIO_Init+0x44>)
 8000b6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b70:	6153      	str	r3, [r2, #20]
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_GPIO_Init+0x44>)
 8000b74:	695b      	ldr	r3, [r3, #20]
 8000b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]

}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40021000 	.word	0x40021000

08000b90 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim1 )
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a13      	ldr	r2, [pc, #76]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d11d      	bne.n	8000bdc <HAL_TIM_PeriodElapsedCallback+0x4c>
  {
    milis++;
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	4a11      	ldr	r2, [pc, #68]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000ba8:	6013      	str	r3, [r2, #0]
    if(milis%100 == 0)
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000bb0:	fb83 1302 	smull	r1, r3, r3, r2
 8000bb4:	1159      	asrs	r1, r3, #5
 8000bb6:	17d3      	asrs	r3, r2, #31
 8000bb8:	1acb      	subs	r3, r1, r3
 8000bba:	2164      	movs	r1, #100	; 0x64
 8000bbc:	fb01 f303 	mul.w	r3, r1, r3
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d10b      	bne.n	8000bde <HAL_TIM_PeriodElapsedCallback+0x4e>
    {
    	task t;
    	t.arg.argi = milis;
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	60bb      	str	r3, [r7, #8]
    	t.func = read_pwm;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000bce:	60fb      	str	r3, [r7, #12]
    	sched_add_task(&t);
 8000bd0:	f107 0308 	add.w	r3, r7, #8
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 f8c7 	bl	8000d68 <sched_add_task>
  }
  else
  {
	  while(1);
  }
}
 8000bda:	e000      	b.n	8000bde <HAL_TIM_PeriodElapsedCallback+0x4e>
	  while(1);
 8000bdc:	e7fe      	b.n	8000bdc <HAL_TIM_PeriodElapsedCallback+0x4c>
}
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000108 	.word	0x20000108
 8000bec:	200000b0 	.word	0x200000b0
 8000bf0:	51eb851f 	.word	0x51eb851f
 8000bf4:	080004dd 	.word	0x080004dd

08000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <Error_Handler+0x8>
	...

08000c04 <pwmin_handler>:
static int next_handle;

pwmin pwms[NUM_PWMS];

void pwmin_handler(int pin)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	int pinvalue;
	int i;
	for(i=0;i<next_handle;i++)
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	e00d      	b.n	8000c2e <pwmin_handler+0x2a>
	{
		if(pwms[i].pin == pin)
 8000c12:	4925      	ldr	r1, [pc, #148]	; (8000ca8 <pwmin_handler+0xa4>)
 8000c14:	68fa      	ldr	r2, [r7, #12]
 8000c16:	4613      	mov	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4413      	add	r3, r2
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	440b      	add	r3, r1
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d008      	beq.n	8000c3a <pwmin_handler+0x36>
	for(i=0;i<next_handle;i++)
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <pwmin_handler+0xa8>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	dbec      	blt.n	8000c12 <pwmin_handler+0xe>
 8000c38:	e000      	b.n	8000c3c <pwmin_handler+0x38>
		{
			break;
 8000c3a:	bf00      	nop
		}
	}
	if(i == next_handle)
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <pwmin_handler+0xa8>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	68fa      	ldr	r2, [r7, #12]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d100      	bne.n	8000c48 <pwmin_handler+0x44>
	{
		while(1);
 8000c46:	e7fe      	b.n	8000c46 <pwmin_handler+0x42>
	}
	pinvalue = gpio_read(pin);
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff fb83 	bl	8000354 <gpio_read>
 8000c4e:	60b8      	str	r0, [r7, #8]
	if(pinvalue == 1)
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d10d      	bne.n	8000c72 <pwmin_handler+0x6e>
	{
		pwms[i].start_time = htim1.Instance->CNT;
 8000c56:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <pwmin_handler+0xac>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	4912      	ldr	r1, [pc, #72]	; (8000ca8 <pwmin_handler+0xa4>)
 8000c60:	68fa      	ldr	r2, [r7, #12]
 8000c62:	4613      	mov	r3, r2
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	4413      	add	r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	6018      	str	r0, [r3, #0]
	}
	else
	{
		pwms[i].width = htim1.Instance->CNT - pwms[i].start_time;
	}
}
 8000c70:	e016      	b.n	8000ca0 <pwmin_handler+0x9c>
		pwms[i].width = htim1.Instance->CNT - pwms[i].start_time;
 8000c72:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <pwmin_handler+0xac>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000c78:	480b      	ldr	r0, [pc, #44]	; (8000ca8 <pwmin_handler+0xa4>)
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	4413      	add	r3, r2
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4403      	add	r3, r0
 8000c86:	3304      	adds	r3, #4
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	1acb      	subs	r3, r1, r3
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	4906      	ldr	r1, [pc, #24]	; (8000ca8 <pwmin_handler+0xa4>)
 8000c90:	68fa      	ldr	r2, [r7, #12]
 8000c92:	4613      	mov	r3, r2
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	4413      	add	r3, r2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	440b      	add	r3, r1
 8000c9c:	3308      	adds	r3, #8
 8000c9e:	6018      	str	r0, [r3, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200002c4 	.word	0x200002c4
 8000cac:	200002c0 	.word	0x200002c0
 8000cb0:	20000108 	.word	0x20000108

08000cb4 <pwmin_init>:

int pwmin_init(int pin)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	int handle;
	if(next_handle == NUM_PWMS)
 8000cbc:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <pwmin_init+0x5c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b04      	cmp	r3, #4
 8000cc2:	d102      	bne.n	8000cca <pwmin_init+0x16>
	{
		return -1;
 8000cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc8:	e01d      	b.n	8000d06 <pwmin_init+0x52>
	}
	handle = next_handle++;
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <pwmin_init+0x5c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	1c5a      	adds	r2, r3, #1
 8000cd0:	490f      	ldr	r1, [pc, #60]	; (8000d10 <pwmin_init+0x5c>)
 8000cd2:	600a      	str	r2, [r1, #0]
 8000cd4:	60fb      	str	r3, [r7, #12]
	pwms[handle].pin = pin;
 8000cd6:	490f      	ldr	r1, [pc, #60]	; (8000d14 <pwmin_init+0x60>)
 8000cd8:	68fa      	ldr	r2, [r7, #12]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	4413      	add	r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	601a      	str	r2, [r3, #0]
	pwms[handle].width = 0;
 8000ce8:	490a      	ldr	r1, [pc, #40]	; (8000d14 <pwmin_init+0x60>)
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	4613      	mov	r3, r2
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	4413      	add	r3, r2
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	3308      	adds	r3, #8
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
	gpio_interrupt(pin,pwmin_handler);
 8000cfc:	4906      	ldr	r1, [pc, #24]	; (8000d18 <pwmin_init+0x64>)
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff fb90 	bl	8000424 <gpio_interrupt>
	return handle;
 8000d04:	68fb      	ldr	r3, [r7, #12]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200002c0 	.word	0x200002c0
 8000d14:	200002c4 	.word	0x200002c4
 8000d18:	08000c05 	.word	0x08000c05

08000d1c <pwmin_width>:

int32_t pwmin_width(int handle)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	return pwms[handle].width;
 8000d24:	4907      	ldr	r1, [pc, #28]	; (8000d44 <pwmin_width+0x28>)
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	4413      	add	r3, r2
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	440b      	add	r3, r1
 8000d32:	3308      	adds	r3, #8
 8000d34:	681b      	ldr	r3, [r3, #0]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	200002c4 	.word	0x200002c4

08000d48 <sched_init>:
};

struct sched_t sched;

void sched_init()
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
	sched.start = 0;
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <sched_init+0x1c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	801a      	strh	r2, [r3, #0]
	sched.end = 1;
 8000d52:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <sched_init+0x1c>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	805a      	strh	r2, [r3, #2]
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	200002f4 	.word	0x200002f4

08000d68 <sched_add_task>:

int sched_add_task(task *t)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	if(sched.end == sched.start)
 8000d70:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <sched_add_task+0x5c>)
 8000d72:	885a      	ldrh	r2, [r3, #2]
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <sched_add_task+0x5c>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d101      	bne.n	8000d80 <sched_add_task+0x18>
	{
		return 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	e01a      	b.n	8000db6 <sched_add_task+0x4e>
	}
	sched.tasks[sched.end].arg = t->arg;
 8000d80:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <sched_add_task+0x5c>)
 8000d82:	885b      	ldrh	r3, [r3, #2]
 8000d84:	4a0f      	ldr	r2, [pc, #60]	; (8000dc4 <sched_add_task+0x5c>)
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	4413      	add	r3, r2
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	6812      	ldr	r2, [r2, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
	sched.tasks[sched.end].func = t->func;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <sched_add_task+0x5c>)
 8000d92:	885b      	ldrh	r3, [r3, #2]
 8000d94:	4618      	mov	r0, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685a      	ldr	r2, [r3, #4]
 8000d9a:	490a      	ldr	r1, [pc, #40]	; (8000dc4 <sched_add_task+0x5c>)
 8000d9c:	00c3      	lsls	r3, r0, #3
 8000d9e:	440b      	add	r3, r1
 8000da0:	609a      	str	r2, [r3, #8]
	sched.end = (sched.end + 1) & (QUEUE_SIZE-1);
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <sched_add_task+0x5c>)
 8000da4:	885b      	ldrh	r3, [r3, #2]
 8000da6:	3301      	adds	r3, #1
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	f003 030f 	and.w	r3, r3, #15
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <sched_add_task+0x5c>)
 8000db2:	805a      	strh	r2, [r3, #2]
	return 1;
 8000db4:	2301      	movs	r3, #1
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	200002f4 	.word	0x200002f4

08000dc8 <sched_get_task>:

int sched_get_task(task *t)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b087      	sub	sp, #28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	uint32_t primask;
	if(((sched.start+1)&(QUEUE_SIZE-1)) == sched.end)
 8000dd0:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <sched_get_task+0x78>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	f003 030f 	and.w	r3, r3, #15
 8000dda:	4a19      	ldr	r2, [pc, #100]	; (8000e40 <sched_get_task+0x78>)
 8000ddc:	8852      	ldrh	r2, [r2, #2]
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d101      	bne.n	8000de6 <sched_get_task+0x1e>
	{
		return 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	e026      	b.n	8000e34 <sched_get_task+0x6c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000de6:	f3ef 8310 	mrs	r3, PRIMASK
 8000dea:	60fb      	str	r3, [r7, #12]
  return(result);
 8000dec:	68fb      	ldr	r3, [r7, #12]
	}
	primask = __get_PRIMASK();
 8000dee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000df0:	b672      	cpsid	i
}
 8000df2:	bf00      	nop
	__disable_irq();

	sched.start = (sched.start+1) & (QUEUE_SIZE - 1);
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <sched_get_task+0x78>)
 8000df6:	881b      	ldrh	r3, [r3, #0]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	f003 030f 	and.w	r3, r3, #15
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <sched_get_task+0x78>)
 8000e04:	801a      	strh	r2, [r3, #0]
	t->arg = sched.tasks[sched.start].arg;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <sched_get_task+0x78>)
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	490c      	ldr	r1, [pc, #48]	; (8000e40 <sched_get_task+0x78>)
 8000e0e:	00db      	lsls	r3, r3, #3
 8000e10:	440b      	add	r3, r1
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	6013      	str	r3, [r2, #0]
	t->func = sched.tasks[sched.start].func;
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <sched_get_task+0x78>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	4a09      	ldr	r2, [pc, #36]	; (8000e40 <sched_get_task+0x78>)
 8000e1c:	00db      	lsls	r3, r3, #3
 8000e1e:	4413      	add	r3, r2
 8000e20:	689a      	ldr	r2, [r3, #8]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	f383 8810 	msr	PRIMASK, r3
}
 8000e30:	bf00      	nop

	__set_PRIMASK(primask);
	return 1;
 8000e32:	2301      	movs	r3, #1
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	371c      	adds	r7, #28
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	200002f4 	.word	0x200002f4

08000e44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <HAL_MspInit+0x44>)
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <HAL_MspInit+0x44>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6193      	str	r3, [r2, #24]
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <HAL_MspInit+0x44>)
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <HAL_MspInit+0x44>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	4a08      	ldr	r2, [pc, #32]	; (8000e88 <HAL_MspInit+0x44>)
 8000e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e6c:	61d3      	str	r3, [r2, #28]
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_MspInit+0x44>)
 8000e70:	69db      	ldr	r3, [r3, #28]
 8000e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	40021000 	.word	0x40021000

08000e8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	; 0x28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a26      	ldr	r2, [pc, #152]	; (8000f44 <HAL_I2C_MspInit+0xb8>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d145      	bne.n	8000f3a <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <HAL_I2C_MspInit+0xbc>)
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	4a25      	ldr	r2, [pc, #148]	; (8000f48 <HAL_I2C_MspInit+0xbc>)
 8000eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb8:	6153      	str	r3, [r2, #20]
 8000eba:	4b23      	ldr	r3, [pc, #140]	; (8000f48 <HAL_I2C_MspInit+0xbc>)
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec6:	4b20      	ldr	r3, [pc, #128]	; (8000f48 <HAL_I2C_MspInit+0xbc>)
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	4a1f      	ldr	r2, [pc, #124]	; (8000f48 <HAL_I2C_MspInit+0xbc>)
 8000ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ed0:	6153      	str	r3, [r2, #20]
 8000ed2:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <HAL_I2C_MspInit+0xbc>)
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ee4:	2312      	movs	r3, #18
 8000ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eec:	2303      	movs	r3, #3
 8000eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efe:	f000 fbe9 	bl	80016d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f02:	2380      	movs	r3, #128	; 0x80
 8000f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f06:	2312      	movs	r3, #18
 8000f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f12:	2304      	movs	r3, #4
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	480b      	ldr	r0, [pc, #44]	; (8000f4c <HAL_I2C_MspInit+0xc0>)
 8000f1e:	f000 fbd9 	bl	80016d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <HAL_I2C_MspInit+0xbc>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	4a08      	ldr	r2, [pc, #32]	; (8000f48 <HAL_I2C_MspInit+0xbc>)
 8000f28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f2c:	61d3      	str	r3, [r2, #28]
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_I2C_MspInit+0xbc>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f3a:	bf00      	nop
 8000f3c:	3728      	adds	r7, #40	; 0x28
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40005400 	.word	0x40005400
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	48000400 	.word	0x48000400

08000f50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a34      	ldr	r2, [pc, #208]	; (8001030 <HAL_TIM_Base_MspInit+0xe0>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d12c      	bne.n	8000fbc <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f62:	4b34      	ldr	r3, [pc, #208]	; (8001034 <HAL_TIM_Base_MspInit+0xe4>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	4a33      	ldr	r2, [pc, #204]	; (8001034 <HAL_TIM_Base_MspInit+0xe4>)
 8000f68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f6c:	6193      	str	r3, [r2, #24]
 8000f6e:	4b31      	ldr	r3, [pc, #196]	; (8001034 <HAL_TIM_Base_MspInit+0xe4>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2018      	movs	r0, #24
 8000f80:	f000 fb71 	bl	8001666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000f84:	2018      	movs	r0, #24
 8000f86:	f000 fb8a 	bl	800169e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	2019      	movs	r0, #25
 8000f90:	f000 fb69 	bl	8001666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000f94:	2019      	movs	r0, #25
 8000f96:	f000 fb82 	bl	800169e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	201a      	movs	r0, #26
 8000fa0:	f000 fb61 	bl	8001666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000fa4:	201a      	movs	r0, #26
 8000fa6:	f000 fb7a 	bl	800169e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2100      	movs	r1, #0
 8000fae:	201b      	movs	r0, #27
 8000fb0:	f000 fb59 	bl	8001666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000fb4:	201b      	movs	r0, #27
 8000fb6:	f000 fb72 	bl	800169e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000fba:	e034      	b.n	8001026 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM2)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fc4:	d10c      	bne.n	8000fe0 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fc6:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <HAL_TIM_Base_MspInit+0xe4>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	4a1a      	ldr	r2, [pc, #104]	; (8001034 <HAL_TIM_Base_MspInit+0xe4>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	61d3      	str	r3, [r2, #28]
 8000fd2:	4b18      	ldr	r3, [pc, #96]	; (8001034 <HAL_TIM_Base_MspInit+0xe4>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]
}
 8000fde:	e022      	b.n	8001026 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a14      	ldr	r2, [pc, #80]	; (8001038 <HAL_TIM_Base_MspInit+0xe8>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d10c      	bne.n	8001004 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fea:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_TIM_Base_MspInit+0xe4>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	4a11      	ldr	r2, [pc, #68]	; (8001034 <HAL_TIM_Base_MspInit+0xe4>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	61d3      	str	r3, [r2, #28]
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <HAL_TIM_Base_MspInit+0xe4>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
}
 8001002:	e010      	b.n	8001026 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0c      	ldr	r2, [pc, #48]	; (800103c <HAL_TIM_Base_MspInit+0xec>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d10b      	bne.n	8001026 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <HAL_TIM_Base_MspInit+0xe4>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	4a08      	ldr	r2, [pc, #32]	; (8001034 <HAL_TIM_Base_MspInit+0xe4>)
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	61d3      	str	r3, [r2, #28]
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_TIM_Base_MspInit+0xe4>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
}
 8001026:	bf00      	nop
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40012c00 	.word	0x40012c00
 8001034:	40021000 	.word	0x40021000
 8001038:	40000400 	.word	0x40000400
 800103c:	40000800 	.word	0x40000800

08001040 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a23      	ldr	r2, [pc, #140]	; (80010ec <HAL_TIM_MspPostInit+0xac>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d11d      	bne.n	800109e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <HAL_TIM_MspPostInit+0xb0>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	4a22      	ldr	r2, [pc, #136]	; (80010f0 <HAL_TIM_MspPostInit+0xb0>)
 8001068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800106c:	6153      	str	r3, [r2, #20]
 800106e:	4b20      	ldr	r3, [pc, #128]	; (80010f0 <HAL_TIM_MspPostInit+0xb0>)
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800107a:	23c0      	movs	r3, #192	; 0xc0
 800107c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800108a:	2302      	movs	r3, #2
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001098:	f000 fb1c 	bl	80016d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800109c:	e022      	b.n	80010e4 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM4)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a14      	ldr	r2, [pc, #80]	; (80010f4 <HAL_TIM_MspPostInit+0xb4>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d11d      	bne.n	80010e4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <HAL_TIM_MspPostInit+0xb0>)
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	4a10      	ldr	r2, [pc, #64]	; (80010f0 <HAL_TIM_MspPostInit+0xb0>)
 80010ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b2:	6153      	str	r3, [r2, #20]
 80010b4:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <HAL_TIM_MspPostInit+0xb0>)
 80010b6:	695b      	ldr	r3, [r3, #20]
 80010b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010c0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80010d2:	230a      	movs	r3, #10
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4619      	mov	r1, r3
 80010dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e0:	f000 faf8 	bl	80016d4 <HAL_GPIO_Init>
}
 80010e4:	bf00      	nop
 80010e6:	3728      	adds	r7, #40	; 0x28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40000400 	.word	0x40000400
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40000800 	.word	0x40000800

080010f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a18      	ldr	r2, [pc, #96]	; (8001178 <HAL_UART_MspInit+0x80>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d129      	bne.n	800116e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800111a:	4b18      	ldr	r3, [pc, #96]	; (800117c <HAL_UART_MspInit+0x84>)
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	4a17      	ldr	r2, [pc, #92]	; (800117c <HAL_UART_MspInit+0x84>)
 8001120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001124:	6193      	str	r3, [r2, #24]
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <HAL_UART_MspInit+0x84>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <HAL_UART_MspInit+0x84>)
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	4a11      	ldr	r2, [pc, #68]	; (800117c <HAL_UART_MspInit+0x84>)
 8001138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113c:	6153      	str	r3, [r2, #20]
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <HAL_UART_MspInit+0x84>)
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800114a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800114e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800115c:	2307      	movs	r3, #7
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	4619      	mov	r1, r3
 8001166:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116a:	f000 fab3 	bl	80016d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800116e:	bf00      	nop
 8001170:	3728      	adds	r7, #40	; 0x28
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40013800 	.word	0x40013800
 800117c:	40021000 	.word	0x40021000

08001180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <NMI_Handler+0x4>

08001186 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118a:	e7fe      	b.n	800118a <HardFault_Handler+0x4>

0800118c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <MemManage_Handler+0x4>

08001192 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001196:	e7fe      	b.n	8001196 <BusFault_Handler+0x4>

08001198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800119c:	e7fe      	b.n	800119c <UsageFault_Handler+0x4>

0800119e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011cc:	f000 f950 	bl	8001470 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80011da:	f002 fb03 	bl	80037e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000108 	.word	0x20000108

080011e8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80011ee:	f002 faf9 	bl	80037e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000108 	.word	0x20000108

080011fc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001200:	4802      	ldr	r0, [pc, #8]	; (800120c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001202:	f002 faef 	bl	80037e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000108 	.word	0x20000108

08001210 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <TIM1_CC_IRQHandler+0x10>)
 8001216:	f002 fae5 	bl	80037e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000108 	.word	0x20000108

08001224 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	e00a      	b.n	800124c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001236:	f3af 8000 	nop.w
 800123a:	4601      	mov	r1, r0
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	1c5a      	adds	r2, r3, #1
 8001240:	60ba      	str	r2, [r7, #8]
 8001242:	b2ca      	uxtb	r2, r1
 8001244:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	3301      	adds	r3, #1
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	429a      	cmp	r2, r3
 8001252:	dbf0      	blt.n	8001236 <_read+0x12>
	}

return len;
 8001254:	687b      	ldr	r3, [r7, #4]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	60f8      	str	r0, [r7, #12]
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	e009      	b.n	8001284 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	1c5a      	adds	r2, r3, #1
 8001274:	60ba      	str	r2, [r7, #8]
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff f91d 	bl	80004b8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	3301      	adds	r3, #1
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697a      	ldr	r2, [r7, #20]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	429a      	cmp	r2, r3
 800128a:	dbf1      	blt.n	8001270 <_write+0x12>
	}
	return len;
 800128c:	687b      	ldr	r3, [r7, #4]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <_close>:

int _close(int file)
{
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
	return -1;
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
 80012b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012be:	605a      	str	r2, [r3, #4]
	return 0;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <_isatty>:

int _isatty(int file)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
	return 1;
 80012d6:	2301      	movs	r3, #1
}
 80012d8:	4618      	mov	r0, r3
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
	return 0;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001308:	4a14      	ldr	r2, [pc, #80]	; (800135c <_sbrk+0x5c>)
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <_sbrk+0x60>)
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001314:	4b13      	ldr	r3, [pc, #76]	; (8001364 <_sbrk+0x64>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d102      	bne.n	8001322 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <_sbrk+0x64>)
 800131e:	4a12      	ldr	r2, [pc, #72]	; (8001368 <_sbrk+0x68>)
 8001320:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <_sbrk+0x64>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	429a      	cmp	r2, r3
 800132e:	d207      	bcs.n	8001340 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001330:	f004 f9d0 	bl	80056d4 <__errno>
 8001334:	4603      	mov	r3, r0
 8001336:	220c      	movs	r2, #12
 8001338:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
 800133e:	e009      	b.n	8001354 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <_sbrk+0x64>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001346:	4b07      	ldr	r3, [pc, #28]	; (8001364 <_sbrk+0x64>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	4a05      	ldr	r2, [pc, #20]	; (8001364 <_sbrk+0x64>)
 8001350:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001352:	68fb      	ldr	r3, [r7, #12]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20008000 	.word	0x20008000
 8001360:	00000400 	.word	0x00000400
 8001364:	20000378 	.word	0x20000378
 8001368:	200004d0 	.word	0x200004d0

0800136c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <SystemInit+0x20>)
 8001372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001376:	4a05      	ldr	r2, [pc, #20]	; (800138c <SystemInit+0x20>)
 8001378:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800137c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013c8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001394:	f7ff ffea 	bl	800136c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001398:	480c      	ldr	r0, [pc, #48]	; (80013cc <LoopForever+0x6>)
  ldr r1, =_edata
 800139a:	490d      	ldr	r1, [pc, #52]	; (80013d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800139c:	4a0d      	ldr	r2, [pc, #52]	; (80013d4 <LoopForever+0xe>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a0:	e002      	b.n	80013a8 <LoopCopyDataInit>

080013a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a6:	3304      	adds	r3, #4

080013a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ac:	d3f9      	bcc.n	80013a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013b0:	4c0a      	ldr	r4, [pc, #40]	; (80013dc <LoopForever+0x16>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b4:	e001      	b.n	80013ba <LoopFillZerobss>

080013b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b8:	3204      	adds	r2, #4

080013ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013bc:	d3fb      	bcc.n	80013b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013be:	f004 f98f 	bl	80056e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013c2:	f7ff f89d 	bl	8000500 <main>

080013c6 <LoopForever>:

LoopForever:
    b LoopForever
 80013c6:	e7fe      	b.n	80013c6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013c8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80013cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80013d4:	08006298 	.word	0x08006298
  ldr r2, =_sbss
 80013d8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80013dc:	200004cc 	.word	0x200004cc

080013e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013e0:	e7fe      	b.n	80013e0 <ADC1_2_IRQHandler>
	...

080013e4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <HAL_Init+0x28>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a07      	ldr	r2, [pc, #28]	; (800140c <HAL_Init+0x28>)
 80013ee:	f043 0310 	orr.w	r3, r3, #16
 80013f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f4:	2003      	movs	r0, #3
 80013f6:	f000 f92b 	bl	8001650 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013fa:	2000      	movs	r0, #0
 80013fc:	f000 f808 	bl	8001410 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001400:	f7ff fd20 	bl	8000e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40022000 	.word	0x40022000

08001410 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_InitTick+0x54>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <HAL_InitTick+0x58>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4619      	mov	r1, r3
 8001422:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001426:	fbb3 f3f1 	udiv	r3, r3, r1
 800142a:	fbb2 f3f3 	udiv	r3, r2, r3
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f943 	bl	80016ba <HAL_SYSTICK_Config>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e00e      	b.n	800145c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b0f      	cmp	r3, #15
 8001442:	d80a      	bhi.n	800145a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001444:	2200      	movs	r2, #0
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	f000 f90b 	bl	8001666 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001450:	4a06      	ldr	r2, [pc, #24]	; (800146c <HAL_InitTick+0x5c>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	e000      	b.n	800145c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000000 	.word	0x20000000
 8001468:	20000008 	.word	0x20000008
 800146c:	20000004 	.word	0x20000004

08001470 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_IncTick+0x20>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_IncTick+0x24>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4413      	add	r3, r2
 8001480:	4a04      	ldr	r2, [pc, #16]	; (8001494 <HAL_IncTick+0x24>)
 8001482:	6013      	str	r3, [r2, #0]
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000008 	.word	0x20000008
 8001494:	2000037c 	.word	0x2000037c

08001498 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return uwTick;  
 800149c:	4b03      	ldr	r3, [pc, #12]	; (80014ac <HAL_GetTick+0x14>)
 800149e:	681b      	ldr	r3, [r3, #0]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	2000037c 	.word	0x2000037c

080014b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014cc:	4013      	ands	r3, r2
 80014ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e2:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	60d3      	str	r3, [r2, #12]
}
 80014e8:	bf00      	nop
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <__NVIC_GetPriorityGrouping+0x18>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	0a1b      	lsrs	r3, r3, #8
 8001502:	f003 0307 	and.w	r3, r3, #7
}
 8001506:	4618      	mov	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	2b00      	cmp	r3, #0
 8001524:	db0b      	blt.n	800153e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	f003 021f 	and.w	r2, r3, #31
 800152c:	4907      	ldr	r1, [pc, #28]	; (800154c <__NVIC_EnableIRQ+0x38>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	2001      	movs	r0, #1
 8001536:	fa00 f202 	lsl.w	r2, r0, r2
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000e100 	.word	0xe000e100

08001550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	6039      	str	r1, [r7, #0]
 800155a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001560:	2b00      	cmp	r3, #0
 8001562:	db0a      	blt.n	800157a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	b2da      	uxtb	r2, r3
 8001568:	490c      	ldr	r1, [pc, #48]	; (800159c <__NVIC_SetPriority+0x4c>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	0112      	lsls	r2, r2, #4
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	440b      	add	r3, r1
 8001574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001578:	e00a      	b.n	8001590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4908      	ldr	r1, [pc, #32]	; (80015a0 <__NVIC_SetPriority+0x50>)
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	3b04      	subs	r3, #4
 8001588:	0112      	lsls	r2, r2, #4
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	440b      	add	r3, r1
 800158e:	761a      	strb	r2, [r3, #24]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000e100 	.word	0xe000e100
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b089      	sub	sp, #36	; 0x24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f1c3 0307 	rsb	r3, r3, #7
 80015be:	2b04      	cmp	r3, #4
 80015c0:	bf28      	it	cs
 80015c2:	2304      	movcs	r3, #4
 80015c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3304      	adds	r3, #4
 80015ca:	2b06      	cmp	r3, #6
 80015cc:	d902      	bls.n	80015d4 <NVIC_EncodePriority+0x30>
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3b03      	subs	r3, #3
 80015d2:	e000      	b.n	80015d6 <NVIC_EncodePriority+0x32>
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	f04f 32ff 	mov.w	r2, #4294967295
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43da      	mvns	r2, r3
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	401a      	ands	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ec:	f04f 31ff 	mov.w	r1, #4294967295
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	43d9      	mvns	r1, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	4313      	orrs	r3, r2
         );
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3724      	adds	r7, #36	; 0x24
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3b01      	subs	r3, #1
 8001618:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800161c:	d301      	bcc.n	8001622 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800161e:	2301      	movs	r3, #1
 8001620:	e00f      	b.n	8001642 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001622:	4a0a      	ldr	r2, [pc, #40]	; (800164c <SysTick_Config+0x40>)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3b01      	subs	r3, #1
 8001628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800162a:	210f      	movs	r1, #15
 800162c:	f04f 30ff 	mov.w	r0, #4294967295
 8001630:	f7ff ff8e 	bl	8001550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <SysTick_Config+0x40>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800163a:	4b04      	ldr	r3, [pc, #16]	; (800164c <SysTick_Config+0x40>)
 800163c:	2207      	movs	r2, #7
 800163e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	e000e010 	.word	0xe000e010

08001650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff ff29 	bl	80014b0 <__NVIC_SetPriorityGrouping>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b086      	sub	sp, #24
 800166a:	af00      	add	r7, sp, #0
 800166c:	4603      	mov	r3, r0
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	607a      	str	r2, [r7, #4]
 8001672:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001678:	f7ff ff3e 	bl	80014f8 <__NVIC_GetPriorityGrouping>
 800167c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	68b9      	ldr	r1, [r7, #8]
 8001682:	6978      	ldr	r0, [r7, #20]
 8001684:	f7ff ff8e 	bl	80015a4 <NVIC_EncodePriority>
 8001688:	4602      	mov	r2, r0
 800168a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168e:	4611      	mov	r1, r2
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff5d 	bl	8001550 <__NVIC_SetPriority>
}
 8001696:	bf00      	nop
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4603      	mov	r3, r0
 80016a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff31 	bl	8001514 <__NVIC_EnableIRQ>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff ffa2 	bl	800160c <SysTick_Config>
 80016c8:	4603      	mov	r3, r0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b087      	sub	sp, #28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e2:	e154      	b.n	800198e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	2101      	movs	r1, #1
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	fa01 f303 	lsl.w	r3, r1, r3
 80016f0:	4013      	ands	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 8146 	beq.w	8001988 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	2b01      	cmp	r3, #1
 8001706:	d005      	beq.n	8001714 <HAL_GPIO_Init+0x40>
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d130      	bne.n	8001776 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	2203      	movs	r2, #3
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4013      	ands	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	68da      	ldr	r2, [r3, #12]
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	4313      	orrs	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800174a:	2201      	movs	r2, #1
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	4013      	ands	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	091b      	lsrs	r3, r3, #4
 8001760:	f003 0201 	and.w	r2, r3, #1
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	4313      	orrs	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	2b03      	cmp	r3, #3
 8001780:	d017      	beq.n	80017b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	2203      	movs	r2, #3
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4013      	ands	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d123      	bne.n	8001806 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	08da      	lsrs	r2, r3, #3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3208      	adds	r2, #8
 80017c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	220f      	movs	r2, #15
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	4013      	ands	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	691a      	ldr	r2, [r3, #16]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f003 0307 	and.w	r3, r3, #7
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	08da      	lsrs	r2, r3, #3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3208      	adds	r2, #8
 8001800:	6939      	ldr	r1, [r7, #16]
 8001802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	2203      	movs	r2, #3
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4013      	ands	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 0203 	and.w	r2, r3, #3
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 80a0 	beq.w	8001988 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001848:	4b58      	ldr	r3, [pc, #352]	; (80019ac <HAL_GPIO_Init+0x2d8>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	4a57      	ldr	r2, [pc, #348]	; (80019ac <HAL_GPIO_Init+0x2d8>)
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	6193      	str	r3, [r2, #24]
 8001854:	4b55      	ldr	r3, [pc, #340]	; (80019ac <HAL_GPIO_Init+0x2d8>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001860:	4a53      	ldr	r2, [pc, #332]	; (80019b0 <HAL_GPIO_Init+0x2dc>)
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	089b      	lsrs	r3, r3, #2
 8001866:	3302      	adds	r3, #2
 8001868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	220f      	movs	r2, #15
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800188a:	d019      	beq.n	80018c0 <HAL_GPIO_Init+0x1ec>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a49      	ldr	r2, [pc, #292]	; (80019b4 <HAL_GPIO_Init+0x2e0>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d013      	beq.n	80018bc <HAL_GPIO_Init+0x1e8>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a48      	ldr	r2, [pc, #288]	; (80019b8 <HAL_GPIO_Init+0x2e4>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d00d      	beq.n	80018b8 <HAL_GPIO_Init+0x1e4>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a47      	ldr	r2, [pc, #284]	; (80019bc <HAL_GPIO_Init+0x2e8>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d007      	beq.n	80018b4 <HAL_GPIO_Init+0x1e0>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a46      	ldr	r2, [pc, #280]	; (80019c0 <HAL_GPIO_Init+0x2ec>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d101      	bne.n	80018b0 <HAL_GPIO_Init+0x1dc>
 80018ac:	2304      	movs	r3, #4
 80018ae:	e008      	b.n	80018c2 <HAL_GPIO_Init+0x1ee>
 80018b0:	2305      	movs	r3, #5
 80018b2:	e006      	b.n	80018c2 <HAL_GPIO_Init+0x1ee>
 80018b4:	2303      	movs	r3, #3
 80018b6:	e004      	b.n	80018c2 <HAL_GPIO_Init+0x1ee>
 80018b8:	2302      	movs	r3, #2
 80018ba:	e002      	b.n	80018c2 <HAL_GPIO_Init+0x1ee>
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <HAL_GPIO_Init+0x1ee>
 80018c0:	2300      	movs	r3, #0
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	f002 0203 	and.w	r2, r2, #3
 80018c8:	0092      	lsls	r2, r2, #2
 80018ca:	4093      	lsls	r3, r2
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018d2:	4937      	ldr	r1, [pc, #220]	; (80019b0 <HAL_GPIO_Init+0x2dc>)
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	089b      	lsrs	r3, r3, #2
 80018d8:	3302      	adds	r3, #2
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018e0:	4b38      	ldr	r3, [pc, #224]	; (80019c4 <HAL_GPIO_Init+0x2f0>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001904:	4a2f      	ldr	r2, [pc, #188]	; (80019c4 <HAL_GPIO_Init+0x2f0>)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800190a:	4b2e      	ldr	r3, [pc, #184]	; (80019c4 <HAL_GPIO_Init+0x2f0>)
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4313      	orrs	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800192e:	4a25      	ldr	r2, [pc, #148]	; (80019c4 <HAL_GPIO_Init+0x2f0>)
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001934:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <HAL_GPIO_Init+0x2f0>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	43db      	mvns	r3, r3
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4013      	ands	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001958:	4a1a      	ldr	r2, [pc, #104]	; (80019c4 <HAL_GPIO_Init+0x2f0>)
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800195e:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <HAL_GPIO_Init+0x2f0>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	43db      	mvns	r3, r3
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4013      	ands	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4313      	orrs	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001982:	4a10      	ldr	r2, [pc, #64]	; (80019c4 <HAL_GPIO_Init+0x2f0>)
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	3301      	adds	r3, #1
 800198c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	fa22 f303 	lsr.w	r3, r2, r3
 8001998:	2b00      	cmp	r3, #0
 800199a:	f47f aea3 	bne.w	80016e4 <HAL_GPIO_Init+0x10>
  }
}
 800199e:	bf00      	nop
 80019a0:	bf00      	nop
 80019a2:	371c      	adds	r7, #28
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40010000 	.word	0x40010000
 80019b4:	48000400 	.word	0x48000400
 80019b8:	48000800 	.word	0x48000800
 80019bc:	48000c00 	.word	0x48000c00
 80019c0:	48001000 	.word	0x48001000
 80019c4:	40010400 	.word	0x40010400

080019c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691a      	ldr	r2, [r3, #16]
 80019d8:	887b      	ldrh	r3, [r7, #2]
 80019da:	4013      	ands	r3, r2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d002      	beq.n	80019e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019e0:	2301      	movs	r3, #1
 80019e2:	73fb      	strb	r3, [r7, #15]
 80019e4:	e001      	b.n	80019ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019e6:	2300      	movs	r3, #0
 80019e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	807b      	strh	r3, [r7, #2]
 8001a04:	4613      	mov	r3, r2
 8001a06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a08:	787b      	ldrb	r3, [r7, #1]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a0e:	887a      	ldrh	r2, [r7, #2]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a14:	e002      	b.n	8001a1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a16:	887a      	ldrh	r2, [r7, #2]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a32:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a34:	695a      	ldr	r2, [r3, #20]
 8001a36:	88fb      	ldrh	r3, [r7, #6]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d006      	beq.n	8001a4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a3e:	4a05      	ldr	r2, [pc, #20]	; (8001a54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a40:	88fb      	ldrh	r3, [r7, #6]
 8001a42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a44:	88fb      	ldrh	r3, [r7, #6]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fc28 	bl	800029c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40010400 	.word	0x40010400

08001a58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e081      	b.n	8001b6e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d106      	bne.n	8001a84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff fa04 	bl	8000e8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2224      	movs	r2, #36	; 0x24
 8001a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0201 	bic.w	r2, r2, #1
 8001a9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001aa8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ab8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d107      	bne.n	8001ad2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	e006      	b.n	8001ae0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ade:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d104      	bne.n	8001af2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001af0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	6812      	ldr	r2, [r2, #0]
 8001afc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691a      	ldr	r2, [r3, #16]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69d9      	ldr	r1, [r3, #28]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a1a      	ldr	r2, [r3, #32]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0201 	orr.w	r2, r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2220      	movs	r2, #32
 8001b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b20      	cmp	r3, #32
 8001b8a:	d138      	bne.n	8001bfe <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d101      	bne.n	8001b9a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b96:	2302      	movs	r3, #2
 8001b98:	e032      	b.n	8001c00 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2224      	movs	r2, #36	; 0x24
 8001ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0201 	bic.w	r2, r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bc8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6819      	ldr	r1, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f042 0201 	orr.w	r2, r2, #1
 8001be8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2220      	movs	r2, #32
 8001bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	e000      	b.n	8001c00 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001bfe:	2302      	movs	r3, #2
  }
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b20      	cmp	r3, #32
 8001c20:	d139      	bne.n	8001c96 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d101      	bne.n	8001c30 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	e033      	b.n	8001c98 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2224      	movs	r2, #36	; 0x24
 8001c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0201 	bic.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c5e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	021b      	lsls	r3, r3, #8
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f042 0201 	orr.w	r2, r2, #1
 8001c80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2220      	movs	r2, #32
 8001c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c92:	2300      	movs	r3, #0
 8001c94:	e000      	b.n	8001c98 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c96:	2302      	movs	r3, #2
  }
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cb4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d102      	bne.n	8001cca <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	f001 b823 	b.w	8002d10 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 817d 	beq.w	8001fda <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ce0:	4bbc      	ldr	r3, [pc, #752]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 030c 	and.w	r3, r3, #12
 8001ce8:	2b04      	cmp	r3, #4
 8001cea:	d00c      	beq.n	8001d06 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cec:	4bb9      	ldr	r3, [pc, #740]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 030c 	and.w	r3, r3, #12
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d15c      	bne.n	8001db2 <HAL_RCC_OscConfig+0x10e>
 8001cf8:	4bb6      	ldr	r3, [pc, #728]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d04:	d155      	bne.n	8001db2 <HAL_RCC_OscConfig+0x10e>
 8001d06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d0a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001d12:	fa93 f3a3 	rbit	r3, r3
 8001d16:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d1a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d1e:	fab3 f383 	clz	r3, r3
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	095b      	lsrs	r3, r3, #5
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d102      	bne.n	8001d38 <HAL_RCC_OscConfig+0x94>
 8001d32:	4ba8      	ldr	r3, [pc, #672]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	e015      	b.n	8001d64 <HAL_RCC_OscConfig+0xc0>
 8001d38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d3c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d40:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001d44:	fa93 f3a3 	rbit	r3, r3
 8001d48:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001d4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d50:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001d54:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001d58:	fa93 f3a3 	rbit	r3, r3
 8001d5c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001d60:	4b9c      	ldr	r3, [pc, #624]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d68:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001d6c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001d70:	fa92 f2a2 	rbit	r2, r2
 8001d74:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001d78:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001d7c:	fab2 f282 	clz	r2, r2
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	f042 0220 	orr.w	r2, r2, #32
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	f002 021f 	and.w	r2, r2, #31
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 811f 	beq.w	8001fd8 <HAL_RCC_OscConfig+0x334>
 8001d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f040 8116 	bne.w	8001fd8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	f000 bfaf 	b.w	8002d10 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc2:	d106      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x12e>
 8001dc4:	4b83      	ldr	r3, [pc, #524]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a82      	ldr	r2, [pc, #520]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	e036      	b.n	8001e40 <HAL_RCC_OscConfig+0x19c>
 8001dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10c      	bne.n	8001dfc <HAL_RCC_OscConfig+0x158>
 8001de2:	4b7c      	ldr	r3, [pc, #496]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a7b      	ldr	r2, [pc, #492]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001de8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	4b79      	ldr	r3, [pc, #484]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a78      	ldr	r2, [pc, #480]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001df4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	e021      	b.n	8001e40 <HAL_RCC_OscConfig+0x19c>
 8001dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e0c:	d10c      	bne.n	8001e28 <HAL_RCC_OscConfig+0x184>
 8001e0e:	4b71      	ldr	r3, [pc, #452]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a70      	ldr	r2, [pc, #448]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	4b6e      	ldr	r3, [pc, #440]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a6d      	ldr	r2, [pc, #436]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	e00b      	b.n	8001e40 <HAL_RCC_OscConfig+0x19c>
 8001e28:	4b6a      	ldr	r3, [pc, #424]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a69      	ldr	r2, [pc, #420]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	4b67      	ldr	r3, [pc, #412]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a66      	ldr	r2, [pc, #408]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e3e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e40:	4b64      	ldr	r3, [pc, #400]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e44:	f023 020f 	bic.w	r2, r3, #15
 8001e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	495f      	ldr	r1, [pc, #380]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d059      	beq.n	8001f1e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6a:	f7ff fb15 	bl	8001498 <HAL_GetTick>
 8001e6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e72:	e00a      	b.n	8001e8a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e74:	f7ff fb10 	bl	8001498 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b64      	cmp	r3, #100	; 0x64
 8001e82:	d902      	bls.n	8001e8a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	f000 bf43 	b.w	8002d10 <HAL_RCC_OscConfig+0x106c>
 8001e8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e8e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001e96:	fa93 f3a3 	rbit	r3, r3
 8001e9a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001e9e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea2:	fab3 f383 	clz	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	095b      	lsrs	r3, r3, #5
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d102      	bne.n	8001ebc <HAL_RCC_OscConfig+0x218>
 8001eb6:	4b47      	ldr	r3, [pc, #284]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	e015      	b.n	8001ee8 <HAL_RCC_OscConfig+0x244>
 8001ebc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ec0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001ec8:	fa93 f3a3 	rbit	r3, r3
 8001ecc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001ed0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ed4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001ed8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001edc:	fa93 f3a3 	rbit	r3, r3
 8001ee0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001ee4:	4b3b      	ldr	r3, [pc, #236]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eec:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001ef0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001ef4:	fa92 f2a2 	rbit	r2, r2
 8001ef8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001efc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001f00:	fab2 f282 	clz	r2, r2
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	f042 0220 	orr.w	r2, r2, #32
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	f002 021f 	and.w	r2, r2, #31
 8001f10:	2101      	movs	r1, #1
 8001f12:	fa01 f202 	lsl.w	r2, r1, r2
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0ab      	beq.n	8001e74 <HAL_RCC_OscConfig+0x1d0>
 8001f1c:	e05d      	b.n	8001fda <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1e:	f7ff fabb 	bl	8001498 <HAL_GetTick>
 8001f22:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f26:	e00a      	b.n	8001f3e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f28:	f7ff fab6 	bl	8001498 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b64      	cmp	r3, #100	; 0x64
 8001f36:	d902      	bls.n	8001f3e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	f000 bee9 	b.w	8002d10 <HAL_RCC_OscConfig+0x106c>
 8001f3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f42:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001f52:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f56:	fab3 f383 	clz	r3, r3
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	095b      	lsrs	r3, r3, #5
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d102      	bne.n	8001f70 <HAL_RCC_OscConfig+0x2cc>
 8001f6a:	4b1a      	ldr	r3, [pc, #104]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	e015      	b.n	8001f9c <HAL_RCC_OscConfig+0x2f8>
 8001f70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f74:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f78:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001f7c:	fa93 f3a3 	rbit	r3, r3
 8001f80:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001f84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f88:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001f8c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001f98:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fa0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001fa4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001fa8:	fa92 f2a2 	rbit	r2, r2
 8001fac:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001fb0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001fb4:	fab2 f282 	clz	r2, r2
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	f042 0220 	orr.w	r2, r2, #32
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	f002 021f 	and.w	r2, r2, #31
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1ab      	bne.n	8001f28 <HAL_RCC_OscConfig+0x284>
 8001fd0:	e003      	b.n	8001fda <HAL_RCC_OscConfig+0x336>
 8001fd2:	bf00      	nop
 8001fd4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 817d 	beq.w	80022ea <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ff0:	4ba6      	ldr	r3, [pc, #664]	; (800228c <HAL_RCC_OscConfig+0x5e8>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00b      	beq.n	8002014 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ffc:	4ba3      	ldr	r3, [pc, #652]	; (800228c <HAL_RCC_OscConfig+0x5e8>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 030c 	and.w	r3, r3, #12
 8002004:	2b08      	cmp	r3, #8
 8002006:	d172      	bne.n	80020ee <HAL_RCC_OscConfig+0x44a>
 8002008:	4ba0      	ldr	r3, [pc, #640]	; (800228c <HAL_RCC_OscConfig+0x5e8>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d16c      	bne.n	80020ee <HAL_RCC_OscConfig+0x44a>
 8002014:	2302      	movs	r3, #2
 8002016:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800201e:	fa93 f3a3 	rbit	r3, r3
 8002022:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002026:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800202a:	fab3 f383 	clz	r3, r3
 800202e:	b2db      	uxtb	r3, r3
 8002030:	095b      	lsrs	r3, r3, #5
 8002032:	b2db      	uxtb	r3, r3
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b01      	cmp	r3, #1
 800203c:	d102      	bne.n	8002044 <HAL_RCC_OscConfig+0x3a0>
 800203e:	4b93      	ldr	r3, [pc, #588]	; (800228c <HAL_RCC_OscConfig+0x5e8>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	e013      	b.n	800206c <HAL_RCC_OscConfig+0x3c8>
 8002044:	2302      	movs	r3, #2
 8002046:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800204e:	fa93 f3a3 	rbit	r3, r3
 8002052:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002056:	2302      	movs	r3, #2
 8002058:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800205c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002060:	fa93 f3a3 	rbit	r3, r3
 8002064:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002068:	4b88      	ldr	r3, [pc, #544]	; (800228c <HAL_RCC_OscConfig+0x5e8>)
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	2202      	movs	r2, #2
 800206e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002072:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002076:	fa92 f2a2 	rbit	r2, r2
 800207a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800207e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002082:	fab2 f282 	clz	r2, r2
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	f042 0220 	orr.w	r2, r2, #32
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	f002 021f 	and.w	r2, r2, #31
 8002092:	2101      	movs	r1, #1
 8002094:	fa01 f202 	lsl.w	r2, r1, r2
 8002098:	4013      	ands	r3, r2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00a      	beq.n	80020b4 <HAL_RCC_OscConfig+0x410>
 800209e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d002      	beq.n	80020b4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	f000 be2e 	b.w	8002d10 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b4:	4b75      	ldr	r3, [pc, #468]	; (800228c <HAL_RCC_OscConfig+0x5e8>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	21f8      	movs	r1, #248	; 0xf8
 80020ca:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ce:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80020d2:	fa91 f1a1 	rbit	r1, r1
 80020d6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80020da:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80020de:	fab1 f181 	clz	r1, r1
 80020e2:	b2c9      	uxtb	r1, r1
 80020e4:	408b      	lsls	r3, r1
 80020e6:	4969      	ldr	r1, [pc, #420]	; (800228c <HAL_RCC_OscConfig+0x5e8>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ec:	e0fd      	b.n	80022ea <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 8088 	beq.w	8002210 <HAL_RCC_OscConfig+0x56c>
 8002100:	2301      	movs	r3, #1
 8002102:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002106:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800210a:	fa93 f3a3 	rbit	r3, r3
 800210e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002112:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002116:	fab3 f383 	clz	r3, r3
 800211a:	b2db      	uxtb	r3, r3
 800211c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002120:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	461a      	mov	r2, r3
 8002128:	2301      	movs	r3, #1
 800212a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7ff f9b4 	bl	8001498 <HAL_GetTick>
 8002130:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002134:	e00a      	b.n	800214c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002136:	f7ff f9af 	bl	8001498 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d902      	bls.n	800214c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	f000 bde2 	b.w	8002d10 <HAL_RCC_OscConfig+0x106c>
 800214c:	2302      	movs	r3, #2
 800214e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002152:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002156:	fa93 f3a3 	rbit	r3, r3
 800215a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800215e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002162:	fab3 f383 	clz	r3, r3
 8002166:	b2db      	uxtb	r3, r3
 8002168:	095b      	lsrs	r3, r3, #5
 800216a:	b2db      	uxtb	r3, r3
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b01      	cmp	r3, #1
 8002174:	d102      	bne.n	800217c <HAL_RCC_OscConfig+0x4d8>
 8002176:	4b45      	ldr	r3, [pc, #276]	; (800228c <HAL_RCC_OscConfig+0x5e8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	e013      	b.n	80021a4 <HAL_RCC_OscConfig+0x500>
 800217c:	2302      	movs	r3, #2
 800217e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002182:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002186:	fa93 f3a3 	rbit	r3, r3
 800218a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800218e:	2302      	movs	r3, #2
 8002190:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002194:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002198:	fa93 f3a3 	rbit	r3, r3
 800219c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80021a0:	4b3a      	ldr	r3, [pc, #232]	; (800228c <HAL_RCC_OscConfig+0x5e8>)
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	2202      	movs	r2, #2
 80021a6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80021aa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80021ae:	fa92 f2a2 	rbit	r2, r2
 80021b2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80021b6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80021ba:	fab2 f282 	clz	r2, r2
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	f042 0220 	orr.w	r2, r2, #32
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	f002 021f 	and.w	r2, r2, #31
 80021ca:	2101      	movs	r1, #1
 80021cc:	fa01 f202 	lsl.w	r2, r1, r2
 80021d0:	4013      	ands	r3, r2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0af      	beq.n	8002136 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d6:	4b2d      	ldr	r3, [pc, #180]	; (800228c <HAL_RCC_OscConfig+0x5e8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	21f8      	movs	r1, #248	; 0xf8
 80021ec:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80021f4:	fa91 f1a1 	rbit	r1, r1
 80021f8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80021fc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002200:	fab1 f181 	clz	r1, r1
 8002204:	b2c9      	uxtb	r1, r1
 8002206:	408b      	lsls	r3, r1
 8002208:	4920      	ldr	r1, [pc, #128]	; (800228c <HAL_RCC_OscConfig+0x5e8>)
 800220a:	4313      	orrs	r3, r2
 800220c:	600b      	str	r3, [r1, #0]
 800220e:	e06c      	b.n	80022ea <HAL_RCC_OscConfig+0x646>
 8002210:	2301      	movs	r3, #1
 8002212:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002222:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002226:	fab3 f383 	clz	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002230:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	461a      	mov	r2, r3
 8002238:	2300      	movs	r3, #0
 800223a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223c:	f7ff f92c 	bl	8001498 <HAL_GetTick>
 8002240:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002244:	e00a      	b.n	800225c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002246:	f7ff f927 	bl	8001498 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d902      	bls.n	800225c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	f000 bd5a 	b.w	8002d10 <HAL_RCC_OscConfig+0x106c>
 800225c:	2302      	movs	r3, #2
 800225e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002266:	fa93 f3a3 	rbit	r3, r3
 800226a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800226e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002272:	fab3 f383 	clz	r3, r3
 8002276:	b2db      	uxtb	r3, r3
 8002278:	095b      	lsrs	r3, r3, #5
 800227a:	b2db      	uxtb	r3, r3
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b01      	cmp	r3, #1
 8002284:	d104      	bne.n	8002290 <HAL_RCC_OscConfig+0x5ec>
 8002286:	4b01      	ldr	r3, [pc, #4]	; (800228c <HAL_RCC_OscConfig+0x5e8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	e015      	b.n	80022b8 <HAL_RCC_OscConfig+0x614>
 800228c:	40021000 	.word	0x40021000
 8002290:	2302      	movs	r3, #2
 8002292:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002296:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800229a:	fa93 f3a3 	rbit	r3, r3
 800229e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80022a2:	2302      	movs	r3, #2
 80022a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80022a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80022b4:	4bc8      	ldr	r3, [pc, #800]	; (80025d8 <HAL_RCC_OscConfig+0x934>)
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	2202      	movs	r2, #2
 80022ba:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80022be:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80022c2:	fa92 f2a2 	rbit	r2, r2
 80022c6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80022ca:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80022ce:	fab2 f282 	clz	r2, r2
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	f042 0220 	orr.w	r2, r2, #32
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	f002 021f 	and.w	r2, r2, #31
 80022de:	2101      	movs	r1, #1
 80022e0:	fa01 f202 	lsl.w	r2, r1, r2
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1ad      	bne.n	8002246 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 8110 	beq.w	8002520 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002304:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d079      	beq.n	8002404 <HAL_RCC_OscConfig+0x760>
 8002310:	2301      	movs	r3, #1
 8002312:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002316:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800231a:	fa93 f3a3 	rbit	r3, r3
 800231e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002322:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002326:	fab3 f383 	clz	r3, r3
 800232a:	b2db      	uxtb	r3, r3
 800232c:	461a      	mov	r2, r3
 800232e:	4bab      	ldr	r3, [pc, #684]	; (80025dc <HAL_RCC_OscConfig+0x938>)
 8002330:	4413      	add	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	461a      	mov	r2, r3
 8002336:	2301      	movs	r3, #1
 8002338:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233a:	f7ff f8ad 	bl	8001498 <HAL_GetTick>
 800233e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002342:	e00a      	b.n	800235a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002344:	f7ff f8a8 	bl	8001498 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d902      	bls.n	800235a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	f000 bcdb 	b.w	8002d10 <HAL_RCC_OscConfig+0x106c>
 800235a:	2302      	movs	r3, #2
 800235c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002360:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002364:	fa93 f3a3 	rbit	r3, r3
 8002368:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800236c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002370:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002374:	2202      	movs	r2, #2
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	fa93 f2a3 	rbit	r2, r3
 8002386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002398:	2202      	movs	r2, #2
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	fa93 f2a3 	rbit	r2, r3
 80023aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023b2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b4:	4b88      	ldr	r3, [pc, #544]	; (80025d8 <HAL_RCC_OscConfig+0x934>)
 80023b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023bc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80023c0:	2102      	movs	r1, #2
 80023c2:	6019      	str	r1, [r3, #0]
 80023c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	fa93 f1a3 	rbit	r1, r3
 80023d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80023da:	6019      	str	r1, [r3, #0]
  return result;
 80023dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	fab3 f383 	clz	r3, r3
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	f003 031f 	and.w	r3, r3, #31
 80023f6:	2101      	movs	r1, #1
 80023f8:	fa01 f303 	lsl.w	r3, r1, r3
 80023fc:	4013      	ands	r3, r2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0a0      	beq.n	8002344 <HAL_RCC_OscConfig+0x6a0>
 8002402:	e08d      	b.n	8002520 <HAL_RCC_OscConfig+0x87c>
 8002404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002408:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800240c:	2201      	movs	r2, #1
 800240e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002414:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	fa93 f2a3 	rbit	r2, r3
 800241e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002422:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002426:	601a      	str	r2, [r3, #0]
  return result;
 8002428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002430:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	461a      	mov	r2, r3
 800243a:	4b68      	ldr	r3, [pc, #416]	; (80025dc <HAL_RCC_OscConfig+0x938>)
 800243c:	4413      	add	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	461a      	mov	r2, r3
 8002442:	2300      	movs	r3, #0
 8002444:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002446:	f7ff f827 	bl	8001498 <HAL_GetTick>
 800244a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800244e:	e00a      	b.n	8002466 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002450:	f7ff f822 	bl	8001498 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d902      	bls.n	8002466 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	f000 bc55 	b.w	8002d10 <HAL_RCC_OscConfig+0x106c>
 8002466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800246e:	2202      	movs	r2, #2
 8002470:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002476:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	fa93 f2a3 	rbit	r2, r3
 8002480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002484:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002492:	2202      	movs	r2, #2
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	fa93 f2a3 	rbit	r2, r3
 80024a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80024b6:	2202      	movs	r2, #2
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	fa93 f2a3 	rbit	r2, r3
 80024c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024cc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80024d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d2:	4b41      	ldr	r3, [pc, #260]	; (80025d8 <HAL_RCC_OscConfig+0x934>)
 80024d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024da:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80024de:	2102      	movs	r1, #2
 80024e0:	6019      	str	r1, [r3, #0]
 80024e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	fa93 f1a3 	rbit	r1, r3
 80024f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80024f8:	6019      	str	r1, [r3, #0]
  return result;
 80024fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fe:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	fab3 f383 	clz	r3, r3
 8002508:	b2db      	uxtb	r3, r3
 800250a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800250e:	b2db      	uxtb	r3, r3
 8002510:	f003 031f 	and.w	r3, r3, #31
 8002514:	2101      	movs	r1, #1
 8002516:	fa01 f303 	lsl.w	r3, r1, r3
 800251a:	4013      	ands	r3, r2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d197      	bne.n	8002450 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002524:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 81a1 	beq.w	8002878 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002536:	2300      	movs	r3, #0
 8002538:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800253c:	4b26      	ldr	r3, [pc, #152]	; (80025d8 <HAL_RCC_OscConfig+0x934>)
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d116      	bne.n	8002576 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002548:	4b23      	ldr	r3, [pc, #140]	; (80025d8 <HAL_RCC_OscConfig+0x934>)
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	4a22      	ldr	r2, [pc, #136]	; (80025d8 <HAL_RCC_OscConfig+0x934>)
 800254e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002552:	61d3      	str	r3, [r2, #28]
 8002554:	4b20      	ldr	r3, [pc, #128]	; (80025d8 <HAL_RCC_OscConfig+0x934>)
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800255c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002560:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800256e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002570:	2301      	movs	r3, #1
 8002572:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002576:	4b1a      	ldr	r3, [pc, #104]	; (80025e0 <HAL_RCC_OscConfig+0x93c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257e:	2b00      	cmp	r3, #0
 8002580:	d11a      	bne.n	80025b8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002582:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <HAL_RCC_OscConfig+0x93c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a16      	ldr	r2, [pc, #88]	; (80025e0 <HAL_RCC_OscConfig+0x93c>)
 8002588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800258c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800258e:	f7fe ff83 	bl	8001498 <HAL_GetTick>
 8002592:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002596:	e009      	b.n	80025ac <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002598:	f7fe ff7e 	bl	8001498 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b64      	cmp	r3, #100	; 0x64
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e3b1      	b.n	8002d10 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ac:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <HAL_RCC_OscConfig+0x93c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0ef      	beq.n	8002598 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d10d      	bne.n	80025e4 <HAL_RCC_OscConfig+0x940>
 80025c8:	4b03      	ldr	r3, [pc, #12]	; (80025d8 <HAL_RCC_OscConfig+0x934>)
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	4a02      	ldr	r2, [pc, #8]	; (80025d8 <HAL_RCC_OscConfig+0x934>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	6213      	str	r3, [r2, #32]
 80025d4:	e03c      	b.n	8002650 <HAL_RCC_OscConfig+0x9ac>
 80025d6:	bf00      	nop
 80025d8:	40021000 	.word	0x40021000
 80025dc:	10908120 	.word	0x10908120
 80025e0:	40007000 	.word	0x40007000
 80025e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10c      	bne.n	800260e <HAL_RCC_OscConfig+0x96a>
 80025f4:	4bc1      	ldr	r3, [pc, #772]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	4ac0      	ldr	r2, [pc, #768]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 80025fa:	f023 0301 	bic.w	r3, r3, #1
 80025fe:	6213      	str	r3, [r2, #32]
 8002600:	4bbe      	ldr	r3, [pc, #760]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	4abd      	ldr	r2, [pc, #756]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 8002606:	f023 0304 	bic.w	r3, r3, #4
 800260a:	6213      	str	r3, [r2, #32]
 800260c:	e020      	b.n	8002650 <HAL_RCC_OscConfig+0x9ac>
 800260e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002612:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	2b05      	cmp	r3, #5
 800261c:	d10c      	bne.n	8002638 <HAL_RCC_OscConfig+0x994>
 800261e:	4bb7      	ldr	r3, [pc, #732]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	4ab6      	ldr	r2, [pc, #728]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 8002624:	f043 0304 	orr.w	r3, r3, #4
 8002628:	6213      	str	r3, [r2, #32]
 800262a:	4bb4      	ldr	r3, [pc, #720]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	4ab3      	ldr	r2, [pc, #716]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	6213      	str	r3, [r2, #32]
 8002636:	e00b      	b.n	8002650 <HAL_RCC_OscConfig+0x9ac>
 8002638:	4bb0      	ldr	r3, [pc, #704]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	4aaf      	ldr	r2, [pc, #700]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 800263e:	f023 0301 	bic.w	r3, r3, #1
 8002642:	6213      	str	r3, [r2, #32]
 8002644:	4bad      	ldr	r3, [pc, #692]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	4aac      	ldr	r2, [pc, #688]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 800264a:	f023 0304 	bic.w	r3, r3, #4
 800264e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002654:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 8081 	beq.w	8002764 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002662:	f7fe ff19 	bl	8001498 <HAL_GetTick>
 8002666:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800266a:	e00b      	b.n	8002684 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800266c:	f7fe ff14 	bl	8001498 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	f241 3288 	movw	r2, #5000	; 0x1388
 800267c:	4293      	cmp	r3, r2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e345      	b.n	8002d10 <HAL_RCC_OscConfig+0x106c>
 8002684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002688:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800268c:	2202      	movs	r2, #2
 800268e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002694:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	fa93 f2a3 	rbit	r2, r3
 800269e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80026b0:	2202      	movs	r2, #2
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	fa93 f2a3 	rbit	r2, r3
 80026c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80026ca:	601a      	str	r2, [r3, #0]
  return result;
 80026cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80026d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d6:	fab3 f383 	clz	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	095b      	lsrs	r3, r3, #5
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	f043 0302 	orr.w	r3, r3, #2
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d102      	bne.n	80026f0 <HAL_RCC_OscConfig+0xa4c>
 80026ea:	4b84      	ldr	r3, [pc, #528]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	e013      	b.n	8002718 <HAL_RCC_OscConfig+0xa74>
 80026f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80026f8:	2202      	movs	r2, #2
 80026fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002700:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	fa93 f2a3 	rbit	r2, r3
 800270a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	4b79      	ldr	r3, [pc, #484]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800271c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002720:	2102      	movs	r1, #2
 8002722:	6011      	str	r1, [r2, #0]
 8002724:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002728:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	fa92 f1a2 	rbit	r1, r2
 8002732:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002736:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800273a:	6011      	str	r1, [r2, #0]
  return result;
 800273c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002740:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	fab2 f282 	clz	r2, r2
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	f002 021f 	and.w	r2, r2, #31
 8002756:	2101      	movs	r1, #1
 8002758:	fa01 f202 	lsl.w	r2, r1, r2
 800275c:	4013      	ands	r3, r2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d084      	beq.n	800266c <HAL_RCC_OscConfig+0x9c8>
 8002762:	e07f      	b.n	8002864 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002764:	f7fe fe98 	bl	8001498 <HAL_GetTick>
 8002768:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276c:	e00b      	b.n	8002786 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800276e:	f7fe fe93 	bl	8001498 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	f241 3288 	movw	r2, #5000	; 0x1388
 800277e:	4293      	cmp	r3, r2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e2c4      	b.n	8002d10 <HAL_RCC_OscConfig+0x106c>
 8002786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800278e:	2202      	movs	r2, #2
 8002790:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002796:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	fa93 f2a3 	rbit	r2, r3
 80027a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80027b2:	2202      	movs	r2, #2
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ba:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	fa93 f2a3 	rbit	r2, r3
 80027c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80027cc:	601a      	str	r2, [r3, #0]
  return result;
 80027ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80027d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d8:	fab3 f383 	clz	r3, r3
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	f043 0302 	orr.w	r3, r3, #2
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d102      	bne.n	80027f2 <HAL_RCC_OscConfig+0xb4e>
 80027ec:	4b43      	ldr	r3, [pc, #268]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	e013      	b.n	800281a <HAL_RCC_OscConfig+0xb76>
 80027f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80027fa:	2202      	movs	r2, #2
 80027fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002802:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	fa93 f2a3 	rbit	r2, r3
 800280c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002810:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	4b39      	ldr	r3, [pc, #228]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800281e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002822:	2102      	movs	r1, #2
 8002824:	6011      	str	r1, [r2, #0]
 8002826:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800282a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	fa92 f1a2 	rbit	r1, r2
 8002834:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002838:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800283c:	6011      	str	r1, [r2, #0]
  return result;
 800283e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002842:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	fab2 f282 	clz	r2, r2
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	f002 021f 	and.w	r2, r2, #31
 8002858:	2101      	movs	r1, #1
 800285a:	fa01 f202 	lsl.w	r2, r1, r2
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d184      	bne.n	800276e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002864:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002868:	2b01      	cmp	r3, #1
 800286a:	d105      	bne.n	8002878 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800286c:	4b23      	ldr	r3, [pc, #140]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	4a22      	ldr	r2, [pc, #136]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 8002872:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002876:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 8242 	beq.w	8002d0e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800288a:	4b1c      	ldr	r3, [pc, #112]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 030c 	and.w	r3, r3, #12
 8002892:	2b08      	cmp	r3, #8
 8002894:	f000 8213 	beq.w	8002cbe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	f040 8162 	bne.w	8002b6e <HAL_RCC_OscConfig+0xeca>
 80028aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ae:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80028b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028bc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	fa93 f2a3 	rbit	r2, r3
 80028c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ca:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80028ce:	601a      	str	r2, [r3, #0]
  return result;
 80028d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80028d8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028da:	fab3 f383 	clz	r3, r3
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	461a      	mov	r2, r3
 80028ec:	2300      	movs	r3, #0
 80028ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f0:	f7fe fdd2 	bl	8001498 <HAL_GetTick>
 80028f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f8:	e00c      	b.n	8002914 <HAL_RCC_OscConfig+0xc70>
 80028fa:	bf00      	nop
 80028fc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002900:	f7fe fdca 	bl	8001498 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e1fd      	b.n	8002d10 <HAL_RCC_OscConfig+0x106c>
 8002914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002918:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800291c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002920:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002926:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	fa93 f2a3 	rbit	r2, r3
 8002930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002934:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002938:	601a      	str	r2, [r3, #0]
  return result;
 800293a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002942:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002944:	fab3 f383 	clz	r3, r3
 8002948:	b2db      	uxtb	r3, r3
 800294a:	095b      	lsrs	r3, r3, #5
 800294c:	b2db      	uxtb	r3, r3
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b01      	cmp	r3, #1
 8002956:	d102      	bne.n	800295e <HAL_RCC_OscConfig+0xcba>
 8002958:	4bb0      	ldr	r3, [pc, #704]	; (8002c1c <HAL_RCC_OscConfig+0xf78>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	e027      	b.n	80029ae <HAL_RCC_OscConfig+0xd0a>
 800295e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002962:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002966:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800296a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002970:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	fa93 f2a3 	rbit	r2, r3
 800297a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002988:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800298c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002996:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	fa93 f2a3 	rbit	r2, r3
 80029a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	4b9c      	ldr	r3, [pc, #624]	; (8002c1c <HAL_RCC_OscConfig+0xf78>)
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029b2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80029b6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029ba:	6011      	str	r1, [r2, #0]
 80029bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029c0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80029c4:	6812      	ldr	r2, [r2, #0]
 80029c6:	fa92 f1a2 	rbit	r1, r2
 80029ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029ce:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80029d2:	6011      	str	r1, [r2, #0]
  return result;
 80029d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029d8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	fab2 f282 	clz	r2, r2
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	f042 0220 	orr.w	r2, r2, #32
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	f002 021f 	and.w	r2, r2, #31
 80029ee:	2101      	movs	r1, #1
 80029f0:	fa01 f202 	lsl.w	r2, r1, r2
 80029f4:	4013      	ands	r3, r2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d182      	bne.n	8002900 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029fa:	4b88      	ldr	r3, [pc, #544]	; (8002c1c <HAL_RCC_OscConfig+0xf78>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	430b      	orrs	r3, r1
 8002a1c:	497f      	ldr	r1, [pc, #508]	; (8002c1c <HAL_RCC_OscConfig+0xf78>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	604b      	str	r3, [r1, #4]
 8002a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a26:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002a2a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a34:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	fa93 f2a3 	rbit	r2, r3
 8002a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a42:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002a46:	601a      	str	r2, [r3, #0]
  return result;
 8002a48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002a50:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a52:	fab3 f383 	clz	r3, r3
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	461a      	mov	r2, r3
 8002a64:	2301      	movs	r3, #1
 8002a66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a68:	f7fe fd16 	bl	8001498 <HAL_GetTick>
 8002a6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a70:	e009      	b.n	8002a86 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a72:	f7fe fd11 	bl	8001498 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e144      	b.n	8002d10 <HAL_RCC_OscConfig+0x106c>
 8002a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002a8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a98:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	fa93 f2a3 	rbit	r2, r3
 8002aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002aaa:	601a      	str	r2, [r3, #0]
  return result;
 8002aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002ab4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ab6:	fab3 f383 	clz	r3, r3
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	095b      	lsrs	r3, r3, #5
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d102      	bne.n	8002ad0 <HAL_RCC_OscConfig+0xe2c>
 8002aca:	4b54      	ldr	r3, [pc, #336]	; (8002c1c <HAL_RCC_OscConfig+0xf78>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	e027      	b.n	8002b20 <HAL_RCC_OscConfig+0xe7c>
 8002ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002ad8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002adc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	fa93 f2a3 	rbit	r2, r3
 8002aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afa:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002afe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b08:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	fa93 f2a3 	rbit	r2, r3
 8002b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b16:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	4b3f      	ldr	r3, [pc, #252]	; (8002c1c <HAL_RCC_OscConfig+0xf78>)
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b24:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002b28:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b2c:	6011      	str	r1, [r2, #0]
 8002b2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b32:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	fa92 f1a2 	rbit	r1, r2
 8002b3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b40:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002b44:	6011      	str	r1, [r2, #0]
  return result;
 8002b46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b4a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	fab2 f282 	clz	r2, r2
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	f042 0220 	orr.w	r2, r2, #32
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	f002 021f 	and.w	r2, r2, #31
 8002b60:	2101      	movs	r1, #1
 8002b62:	fa01 f202 	lsl.w	r2, r1, r2
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d082      	beq.n	8002a72 <HAL_RCC_OscConfig+0xdce>
 8002b6c:	e0cf      	b.n	8002d0e <HAL_RCC_OscConfig+0x106a>
 8002b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b72:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002b76:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b80:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	fa93 f2a3 	rbit	r2, r3
 8002b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002b92:	601a      	str	r2, [r3, #0]
  return result;
 8002b94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b98:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002b9c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9e:	fab3 f383 	clz	r3, r3
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ba8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	461a      	mov	r2, r3
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb4:	f7fe fc70 	bl	8001498 <HAL_GetTick>
 8002bb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bbc:	e009      	b.n	8002bd2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bbe:	f7fe fc6b 	bl	8001498 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e09e      	b.n	8002d10 <HAL_RCC_OscConfig+0x106c>
 8002bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002bda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	fa93 f2a3 	rbit	r2, r3
 8002bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002bf6:	601a      	str	r2, [r3, #0]
  return result;
 8002bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c00:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c02:	fab3 f383 	clz	r3, r3
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	095b      	lsrs	r3, r3, #5
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d104      	bne.n	8002c20 <HAL_RCC_OscConfig+0xf7c>
 8002c16:	4b01      	ldr	r3, [pc, #4]	; (8002c1c <HAL_RCC_OscConfig+0xf78>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	e029      	b.n	8002c70 <HAL_RCC_OscConfig+0xfcc>
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c24:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002c28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c32:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	fa93 f2a3 	rbit	r2, r3
 8002c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c40:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002c4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c58:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	fa93 f2a3 	rbit	r2, r3
 8002c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c66:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	4b2b      	ldr	r3, [pc, #172]	; (8002d1c <HAL_RCC_OscConfig+0x1078>)
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c74:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002c78:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c7c:	6011      	str	r1, [r2, #0]
 8002c7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c82:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	fa92 f1a2 	rbit	r1, r2
 8002c8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c90:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002c94:	6011      	str	r1, [r2, #0]
  return result;
 8002c96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c9a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002c9e:	6812      	ldr	r2, [r2, #0]
 8002ca0:	fab2 f282 	clz	r2, r2
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	f042 0220 	orr.w	r2, r2, #32
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	f002 021f 	and.w	r2, r2, #31
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d180      	bne.n	8002bbe <HAL_RCC_OscConfig+0xf1a>
 8002cbc:	e027      	b.n	8002d0e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d101      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e01e      	b.n	8002d10 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cd2:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <HAL_RCC_OscConfig+0x1078>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002cda:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002cde:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d10b      	bne.n	8002d0a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002cf2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002cf6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d001      	beq.n	8002d0e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40021000 	.word	0x40021000

08002d20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b09e      	sub	sp, #120	; 0x78
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e162      	b.n	8002ffe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d38:	4b90      	ldr	r3, [pc, #576]	; (8002f7c <HAL_RCC_ClockConfig+0x25c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d910      	bls.n	8002d68 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d46:	4b8d      	ldr	r3, [pc, #564]	; (8002f7c <HAL_RCC_ClockConfig+0x25c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 0207 	bic.w	r2, r3, #7
 8002d4e:	498b      	ldr	r1, [pc, #556]	; (8002f7c <HAL_RCC_ClockConfig+0x25c>)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	4b89      	ldr	r3, [pc, #548]	; (8002f7c <HAL_RCC_ClockConfig+0x25c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e14a      	b.n	8002ffe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d74:	4b82      	ldr	r3, [pc, #520]	; (8002f80 <HAL_RCC_ClockConfig+0x260>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	497f      	ldr	r1, [pc, #508]	; (8002f80 <HAL_RCC_ClockConfig+0x260>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 80dc 	beq.w	8002f4c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d13c      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xf6>
 8002d9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002da0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002da4:	fa93 f3a3 	rbit	r3, r3
 8002da8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dac:	fab3 f383 	clz	r3, r3
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	095b      	lsrs	r3, r3, #5
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d102      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xa6>
 8002dc0:	4b6f      	ldr	r3, [pc, #444]	; (8002f80 <HAL_RCC_ClockConfig+0x260>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	e00f      	b.n	8002de6 <HAL_RCC_ClockConfig+0xc6>
 8002dc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dce:	fa93 f3a3 	rbit	r3, r3
 8002dd2:	667b      	str	r3, [r7, #100]	; 0x64
 8002dd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dd8:	663b      	str	r3, [r7, #96]	; 0x60
 8002dda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ddc:	fa93 f3a3 	rbit	r3, r3
 8002de0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002de2:	4b67      	ldr	r3, [pc, #412]	; (8002f80 <HAL_RCC_ClockConfig+0x260>)
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dea:	65ba      	str	r2, [r7, #88]	; 0x58
 8002dec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dee:	fa92 f2a2 	rbit	r2, r2
 8002df2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002df4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002df6:	fab2 f282 	clz	r2, r2
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	f042 0220 	orr.w	r2, r2, #32
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	f002 021f 	and.w	r2, r2, #31
 8002e06:	2101      	movs	r1, #1
 8002e08:	fa01 f202 	lsl.w	r2, r1, r2
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d17b      	bne.n	8002f0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e0f3      	b.n	8002ffe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d13c      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x178>
 8002e1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e22:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e26:	fa93 f3a3 	rbit	r3, r3
 8002e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e2e:	fab3 f383 	clz	r3, r3
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	095b      	lsrs	r3, r3, #5
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d102      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x128>
 8002e42:	4b4f      	ldr	r3, [pc, #316]	; (8002f80 <HAL_RCC_ClockConfig+0x260>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	e00f      	b.n	8002e68 <HAL_RCC_ClockConfig+0x148>
 8002e48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e4c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e50:	fa93 f3a3 	rbit	r3, r3
 8002e54:	647b      	str	r3, [r7, #68]	; 0x44
 8002e56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e5a:	643b      	str	r3, [r7, #64]	; 0x40
 8002e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e5e:	fa93 f3a3 	rbit	r3, r3
 8002e62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e64:	4b46      	ldr	r3, [pc, #280]	; (8002f80 <HAL_RCC_ClockConfig+0x260>)
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e6c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002e6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e70:	fa92 f2a2 	rbit	r2, r2
 8002e74:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002e76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e78:	fab2 f282 	clz	r2, r2
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	f042 0220 	orr.w	r2, r2, #32
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	f002 021f 	and.w	r2, r2, #31
 8002e88:	2101      	movs	r1, #1
 8002e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8e:	4013      	ands	r3, r2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d13a      	bne.n	8002f0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0b2      	b.n	8002ffe <HAL_RCC_ClockConfig+0x2de>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9e:	fa93 f3a3 	rbit	r3, r3
 8002ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea6:	fab3 f383 	clz	r3, r3
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	095b      	lsrs	r3, r3, #5
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d102      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0x1a0>
 8002eba:	4b31      	ldr	r3, [pc, #196]	; (8002f80 <HAL_RCC_ClockConfig+0x260>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	e00d      	b.n	8002edc <HAL_RCC_ClockConfig+0x1bc>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec6:	fa93 f3a3 	rbit	r3, r3
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24
 8002ecc:	2302      	movs	r3, #2
 8002ece:	623b      	str	r3, [r7, #32]
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	fa93 f3a3 	rbit	r3, r3
 8002ed6:	61fb      	str	r3, [r7, #28]
 8002ed8:	4b29      	ldr	r3, [pc, #164]	; (8002f80 <HAL_RCC_ClockConfig+0x260>)
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	2202      	movs	r2, #2
 8002ede:	61ba      	str	r2, [r7, #24]
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	fa92 f2a2 	rbit	r2, r2
 8002ee6:	617a      	str	r2, [r7, #20]
  return result;
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	fab2 f282 	clz	r2, r2
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	f042 0220 	orr.w	r2, r2, #32
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	f002 021f 	and.w	r2, r2, #31
 8002efa:	2101      	movs	r1, #1
 8002efc:	fa01 f202 	lsl.w	r2, r1, r2
 8002f00:	4013      	ands	r3, r2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e079      	b.n	8002ffe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f0a:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <HAL_RCC_ClockConfig+0x260>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f023 0203 	bic.w	r2, r3, #3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	491a      	ldr	r1, [pc, #104]	; (8002f80 <HAL_RCC_ClockConfig+0x260>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f1c:	f7fe fabc 	bl	8001498 <HAL_GetTick>
 8002f20:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f22:	e00a      	b.n	8002f3a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f24:	f7fe fab8 	bl	8001498 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e061      	b.n	8002ffe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3a:	4b11      	ldr	r3, [pc, #68]	; (8002f80 <HAL_RCC_ClockConfig+0x260>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 020c 	and.w	r2, r3, #12
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d1eb      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <HAL_RCC_ClockConfig+0x25c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d214      	bcs.n	8002f84 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5a:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <HAL_RCC_ClockConfig+0x25c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f023 0207 	bic.w	r2, r3, #7
 8002f62:	4906      	ldr	r1, [pc, #24]	; (8002f7c <HAL_RCC_ClockConfig+0x25c>)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6a:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <HAL_RCC_ClockConfig+0x25c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d005      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e040      	b.n	8002ffe <HAL_RCC_ClockConfig+0x2de>
 8002f7c:	40022000 	.word	0x40022000
 8002f80:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d008      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f90:	4b1d      	ldr	r3, [pc, #116]	; (8003008 <HAL_RCC_ClockConfig+0x2e8>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	491a      	ldr	r1, [pc, #104]	; (8003008 <HAL_RCC_ClockConfig+0x2e8>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d009      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fae:	4b16      	ldr	r3, [pc, #88]	; (8003008 <HAL_RCC_ClockConfig+0x2e8>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	4912      	ldr	r1, [pc, #72]	; (8003008 <HAL_RCC_ClockConfig+0x2e8>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002fc2:	f000 f829 	bl	8003018 <HAL_RCC_GetSysClockFreq>
 8002fc6:	4601      	mov	r1, r0
 8002fc8:	4b0f      	ldr	r3, [pc, #60]	; (8003008 <HAL_RCC_ClockConfig+0x2e8>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fd0:	22f0      	movs	r2, #240	; 0xf0
 8002fd2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	fa92 f2a2 	rbit	r2, r2
 8002fda:	60fa      	str	r2, [r7, #12]
  return result;
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	fab2 f282 	clz	r2, r2
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	40d3      	lsrs	r3, r2
 8002fe6:	4a09      	ldr	r2, [pc, #36]	; (800300c <HAL_RCC_ClockConfig+0x2ec>)
 8002fe8:	5cd3      	ldrb	r3, [r2, r3]
 8002fea:	fa21 f303 	lsr.w	r3, r1, r3
 8002fee:	4a08      	ldr	r2, [pc, #32]	; (8003010 <HAL_RCC_ClockConfig+0x2f0>)
 8002ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002ff2:	4b08      	ldr	r3, [pc, #32]	; (8003014 <HAL_RCC_ClockConfig+0x2f4>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fe fa0a 	bl	8001410 <HAL_InitTick>
  
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3778      	adds	r7, #120	; 0x78
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40021000 	.word	0x40021000
 800300c:	08006224 	.word	0x08006224
 8003010:	20000000 	.word	0x20000000
 8003014:	20000004 	.word	0x20000004

08003018 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003018:	b480      	push	{r7}
 800301a:	b08b      	sub	sp, #44	; 0x2c
 800301c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
 8003022:	2300      	movs	r3, #0
 8003024:	61bb      	str	r3, [r7, #24]
 8003026:	2300      	movs	r3, #0
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003032:	4b29      	ldr	r3, [pc, #164]	; (80030d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b04      	cmp	r3, #4
 8003040:	d002      	beq.n	8003048 <HAL_RCC_GetSysClockFreq+0x30>
 8003042:	2b08      	cmp	r3, #8
 8003044:	d003      	beq.n	800304e <HAL_RCC_GetSysClockFreq+0x36>
 8003046:	e03c      	b.n	80030c2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003048:	4b24      	ldr	r3, [pc, #144]	; (80030dc <HAL_RCC_GetSysClockFreq+0xc4>)
 800304a:	623b      	str	r3, [r7, #32]
      break;
 800304c:	e03c      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003054:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003058:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	fa92 f2a2 	rbit	r2, r2
 8003060:	607a      	str	r2, [r7, #4]
  return result;
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	fab2 f282 	clz	r2, r2
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	40d3      	lsrs	r3, r2
 800306c:	4a1c      	ldr	r2, [pc, #112]	; (80030e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800306e:	5cd3      	ldrb	r3, [r2, r3]
 8003070:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003072:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	220f      	movs	r2, #15
 800307c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	fa92 f2a2 	rbit	r2, r2
 8003084:	60fa      	str	r2, [r7, #12]
  return result;
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	fab2 f282 	clz	r2, r2
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	40d3      	lsrs	r3, r2
 8003090:	4a14      	ldr	r2, [pc, #80]	; (80030e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003092:	5cd3      	ldrb	r3, [r2, r3]
 8003094:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d008      	beq.n	80030b2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030a0:	4a0e      	ldr	r2, [pc, #56]	; (80030dc <HAL_RCC_GetSysClockFreq+0xc4>)
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	fb02 f303 	mul.w	r3, r2, r3
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24
 80030b0:	e004      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	4a0c      	ldr	r2, [pc, #48]	; (80030e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80030b6:	fb02 f303 	mul.w	r3, r2, r3
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	623b      	str	r3, [r7, #32]
      break;
 80030c0:	e002      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030c2:	4b06      	ldr	r3, [pc, #24]	; (80030dc <HAL_RCC_GetSysClockFreq+0xc4>)
 80030c4:	623b      	str	r3, [r7, #32]
      break;
 80030c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030c8:	6a3b      	ldr	r3, [r7, #32]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	372c      	adds	r7, #44	; 0x2c
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	40021000 	.word	0x40021000
 80030dc:	007a1200 	.word	0x007a1200
 80030e0:	0800623c 	.word	0x0800623c
 80030e4:	0800624c 	.word	0x0800624c
 80030e8:	003d0900 	.word	0x003d0900

080030ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030f0:	4b03      	ldr	r3, [pc, #12]	; (8003100 <HAL_RCC_GetHCLKFreq+0x14>)
 80030f2:	681b      	ldr	r3, [r3, #0]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	20000000 	.word	0x20000000

08003104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800310a:	f7ff ffef 	bl	80030ec <HAL_RCC_GetHCLKFreq>
 800310e:	4601      	mov	r1, r0
 8003110:	4b0b      	ldr	r3, [pc, #44]	; (8003140 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003118:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800311c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	fa92 f2a2 	rbit	r2, r2
 8003124:	603a      	str	r2, [r7, #0]
  return result;
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	fab2 f282 	clz	r2, r2
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	40d3      	lsrs	r3, r2
 8003130:	4a04      	ldr	r2, [pc, #16]	; (8003144 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003132:	5cd3      	ldrb	r3, [r2, r3]
 8003134:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003138:	4618      	mov	r0, r3
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40021000 	.word	0x40021000
 8003144:	08006234 	.word	0x08006234

08003148 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800314e:	f7ff ffcd 	bl	80030ec <HAL_RCC_GetHCLKFreq>
 8003152:	4601      	mov	r1, r0
 8003154:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800315c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003160:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	fa92 f2a2 	rbit	r2, r2
 8003168:	603a      	str	r2, [r7, #0]
  return result;
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	fab2 f282 	clz	r2, r2
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	40d3      	lsrs	r3, r2
 8003174:	4a04      	ldr	r2, [pc, #16]	; (8003188 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003176:	5cd3      	ldrb	r3, [r2, r3]
 8003178:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800317c:	4618      	mov	r0, r3
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40021000 	.word	0x40021000
 8003188:	08006234 	.word	0x08006234

0800318c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b092      	sub	sp, #72	; 0x48
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003194:	2300      	movs	r3, #0
 8003196:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800319c:	2300      	movs	r3, #0
 800319e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 80d4 	beq.w	8003358 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031b0:	4b4e      	ldr	r3, [pc, #312]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031b2:	69db      	ldr	r3, [r3, #28]
 80031b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10e      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031bc:	4b4b      	ldr	r3, [pc, #300]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	4a4a      	ldr	r2, [pc, #296]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c6:	61d3      	str	r3, [r2, #28]
 80031c8:	4b48      	ldr	r3, [pc, #288]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031d4:	2301      	movs	r3, #1
 80031d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031da:	4b45      	ldr	r3, [pc, #276]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d118      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031e6:	4b42      	ldr	r3, [pc, #264]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a41      	ldr	r2, [pc, #260]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031f2:	f7fe f951 	bl	8001498 <HAL_GetTick>
 80031f6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f8:	e008      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031fa:	f7fe f94d 	bl	8001498 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b64      	cmp	r3, #100	; 0x64
 8003206:	d901      	bls.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e169      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800320c:	4b38      	ldr	r3, [pc, #224]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0f0      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003218:	4b34      	ldr	r3, [pc, #208]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003220:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 8084 	beq.w	8003332 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003232:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003234:	429a      	cmp	r2, r3
 8003236:	d07c      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003238:	4b2c      	ldr	r3, [pc, #176]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003240:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003242:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003246:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324a:	fa93 f3a3 	rbit	r3, r3
 800324e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003252:	fab3 f383 	clz	r3, r3
 8003256:	b2db      	uxtb	r3, r3
 8003258:	461a      	mov	r2, r3
 800325a:	4b26      	ldr	r3, [pc, #152]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800325c:	4413      	add	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	461a      	mov	r2, r3
 8003262:	2301      	movs	r3, #1
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800326a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326e:	fa93 f3a3 	rbit	r3, r3
 8003272:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003276:	fab3 f383 	clz	r3, r3
 800327a:	b2db      	uxtb	r3, r3
 800327c:	461a      	mov	r2, r3
 800327e:	4b1d      	ldr	r3, [pc, #116]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	461a      	mov	r2, r3
 8003286:	2300      	movs	r3, #0
 8003288:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800328a:	4a18      	ldr	r2, [pc, #96]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800328e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	d04b      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329a:	f7fe f8fd 	bl	8001498 <HAL_GetTick>
 800329e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a0:	e00a      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a2:	f7fe f8f9 	bl	8001498 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e113      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80032b8:	2302      	movs	r3, #2
 80032ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032be:	fa93 f3a3 	rbit	r3, r3
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24
 80032c4:	2302      	movs	r3, #2
 80032c6:	623b      	str	r3, [r7, #32]
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	fa93 f3a3 	rbit	r3, r3
 80032ce:	61fb      	str	r3, [r7, #28]
  return result;
 80032d0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d2:	fab3 f383 	clz	r3, r3
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	095b      	lsrs	r3, r3, #5
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	f043 0302 	orr.w	r3, r3, #2
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d108      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80032e6:	4b01      	ldr	r3, [pc, #4]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	e00d      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80032ec:	40021000 	.word	0x40021000
 80032f0:	40007000 	.word	0x40007000
 80032f4:	10908100 	.word	0x10908100
 80032f8:	2302      	movs	r3, #2
 80032fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	fa93 f3a3 	rbit	r3, r3
 8003302:	617b      	str	r3, [r7, #20]
 8003304:	4b78      	ldr	r3, [pc, #480]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	2202      	movs	r2, #2
 800330a:	613a      	str	r2, [r7, #16]
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	fa92 f2a2 	rbit	r2, r2
 8003312:	60fa      	str	r2, [r7, #12]
  return result;
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	fab2 f282 	clz	r2, r2
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	f002 021f 	and.w	r2, r2, #31
 8003326:	2101      	movs	r1, #1
 8003328:	fa01 f202 	lsl.w	r2, r1, r2
 800332c:	4013      	ands	r3, r2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0b7      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003332:	4b6d      	ldr	r3, [pc, #436]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	496a      	ldr	r1, [pc, #424]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003340:	4313      	orrs	r3, r2
 8003342:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003344:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003348:	2b01      	cmp	r3, #1
 800334a:	d105      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800334c:	4b66      	ldr	r3, [pc, #408]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	4a65      	ldr	r2, [pc, #404]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003352:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003356:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	d008      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003364:	4b60      	ldr	r3, [pc, #384]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	f023 0203 	bic.w	r2, r3, #3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	495d      	ldr	r1, [pc, #372]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003372:	4313      	orrs	r3, r2
 8003374:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d008      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003382:	4b59      	ldr	r3, [pc, #356]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	4956      	ldr	r1, [pc, #344]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003390:	4313      	orrs	r3, r2
 8003392:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033a0:	4b51      	ldr	r3, [pc, #324]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	494e      	ldr	r1, [pc, #312]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0320 	and.w	r3, r3, #32
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d008      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033be:	4b4a      	ldr	r3, [pc, #296]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	f023 0210 	bic.w	r2, r3, #16
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	4947      	ldr	r1, [pc, #284]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80033dc:	4b42      	ldr	r3, [pc, #264]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e8:	493f      	ldr	r1, [pc, #252]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d008      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033fa:	4b3b      	ldr	r3, [pc, #236]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	f023 0220 	bic.w	r2, r3, #32
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	4938      	ldr	r1, [pc, #224]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003408:	4313      	orrs	r3, r2
 800340a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b00      	cmp	r3, #0
 8003416:	d008      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003418:	4b33      	ldr	r3, [pc, #204]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	4930      	ldr	r1, [pc, #192]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003426:	4313      	orrs	r3, r2
 8003428:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0310 	and.w	r3, r3, #16
 8003432:	2b00      	cmp	r3, #0
 8003434:	d008      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003436:	4b2c      	ldr	r3, [pc, #176]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	4929      	ldr	r1, [pc, #164]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003444:	4313      	orrs	r3, r2
 8003446:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003450:	2b00      	cmp	r3, #0
 8003452:	d008      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003454:	4b24      	ldr	r3, [pc, #144]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003460:	4921      	ldr	r1, [pc, #132]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003462:	4313      	orrs	r3, r2
 8003464:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346e:	2b00      	cmp	r3, #0
 8003470:	d008      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003472:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003476:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	491a      	ldr	r1, [pc, #104]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003480:	4313      	orrs	r3, r2
 8003482:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348c:	2b00      	cmp	r3, #0
 800348e:	d008      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003490:	4b15      	ldr	r3, [pc, #84]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003494:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349c:	4912      	ldr	r1, [pc, #72]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d008      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80034ae:	4b0e      	ldr	r3, [pc, #56]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	490b      	ldr	r1, [pc, #44]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80034cc:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d8:	4903      	ldr	r1, [pc, #12]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3748      	adds	r7, #72	; 0x48
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40021000 	.word	0x40021000

080034ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e049      	b.n	8003592 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7fd fd1c 	bl	8000f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3304      	adds	r3, #4
 8003528:	4619      	mov	r1, r3
 800352a:	4610      	mov	r0, r2
 800352c:	f000 fcfa 	bl	8003f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d001      	beq.n	80035b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e042      	b.n	800363a <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a21      	ldr	r2, [pc, #132]	; (8003648 <HAL_TIM_Base_Start+0xac>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d018      	beq.n	80035f8 <HAL_TIM_Base_Start+0x5c>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ce:	d013      	beq.n	80035f8 <HAL_TIM_Base_Start+0x5c>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a1d      	ldr	r2, [pc, #116]	; (800364c <HAL_TIM_Base_Start+0xb0>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d00e      	beq.n	80035f8 <HAL_TIM_Base_Start+0x5c>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a1c      	ldr	r2, [pc, #112]	; (8003650 <HAL_TIM_Base_Start+0xb4>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d009      	beq.n	80035f8 <HAL_TIM_Base_Start+0x5c>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a1a      	ldr	r2, [pc, #104]	; (8003654 <HAL_TIM_Base_Start+0xb8>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d004      	beq.n	80035f8 <HAL_TIM_Base_Start+0x5c>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a19      	ldr	r2, [pc, #100]	; (8003658 <HAL_TIM_Base_Start+0xbc>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d115      	bne.n	8003624 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	4b17      	ldr	r3, [pc, #92]	; (800365c <HAL_TIM_Base_Start+0xc0>)
 8003600:	4013      	ands	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2b06      	cmp	r3, #6
 8003608:	d015      	beq.n	8003636 <HAL_TIM_Base_Start+0x9a>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003610:	d011      	beq.n	8003636 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f042 0201 	orr.w	r2, r2, #1
 8003620:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003622:	e008      	b.n	8003636 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	e000      	b.n	8003638 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003636:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40012c00 	.word	0x40012c00
 800364c:	40000400 	.word	0x40000400
 8003650:	40000800 	.word	0x40000800
 8003654:	40013400 	.word	0x40013400
 8003658:	40014000 	.word	0x40014000
 800365c:	00010007 	.word	0x00010007

08003660 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e049      	b.n	8003706 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d106      	bne.n	800368c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f841 	bl	800370e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3304      	adds	r3, #4
 800369c:	4619      	mov	r1, r3
 800369e:	4610      	mov	r0, r2
 80036a0:	f000 fc40 	bl	8003f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b082      	sub	sp, #8
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e049      	b.n	80037c8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d106      	bne.n	800374e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f841 	bl	80037d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2202      	movs	r2, #2
 8003752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	3304      	adds	r3, #4
 800375e:	4619      	mov	r1, r3
 8003760:	4610      	mov	r0, r2
 8003762:	f000 fbdf 	bl	8003f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d122      	bne.n	8003840 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b02      	cmp	r3, #2
 8003806:	d11b      	bne.n	8003840 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f06f 0202 	mvn.w	r2, #2
 8003810:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fb5d 	bl	8003ee6 <HAL_TIM_IC_CaptureCallback>
 800382c:	e005      	b.n	800383a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fb4f 	bl	8003ed2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 fb60 	bl	8003efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	2b04      	cmp	r3, #4
 800384c:	d122      	bne.n	8003894 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b04      	cmp	r3, #4
 800385a:	d11b      	bne.n	8003894 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f06f 0204 	mvn.w	r2, #4
 8003864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2202      	movs	r2, #2
 800386a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 fb33 	bl	8003ee6 <HAL_TIM_IC_CaptureCallback>
 8003880:	e005      	b.n	800388e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 fb25 	bl	8003ed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 fb36 	bl	8003efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b08      	cmp	r3, #8
 80038a0:	d122      	bne.n	80038e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f003 0308 	and.w	r3, r3, #8
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d11b      	bne.n	80038e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f06f 0208 	mvn.w	r2, #8
 80038b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2204      	movs	r2, #4
 80038be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	f003 0303 	and.w	r3, r3, #3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fb09 	bl	8003ee6 <HAL_TIM_IC_CaptureCallback>
 80038d4:	e005      	b.n	80038e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 fafb 	bl	8003ed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 fb0c 	bl	8003efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	f003 0310 	and.w	r3, r3, #16
 80038f2:	2b10      	cmp	r3, #16
 80038f4:	d122      	bne.n	800393c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f003 0310 	and.w	r3, r3, #16
 8003900:	2b10      	cmp	r3, #16
 8003902:	d11b      	bne.n	800393c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f06f 0210 	mvn.w	r2, #16
 800390c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2208      	movs	r2, #8
 8003912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fadf 	bl	8003ee6 <HAL_TIM_IC_CaptureCallback>
 8003928:	e005      	b.n	8003936 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 fad1 	bl	8003ed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 fae2 	bl	8003efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b01      	cmp	r3, #1
 8003948:	d10e      	bne.n	8003968 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b01      	cmp	r3, #1
 8003956:	d107      	bne.n	8003968 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f06f 0201 	mvn.w	r2, #1
 8003960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7fd f914 	bl	8000b90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003972:	2b80      	cmp	r3, #128	; 0x80
 8003974:	d10e      	bne.n	8003994 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003980:	2b80      	cmp	r3, #128	; 0x80
 8003982:	d107      	bne.n	8003994 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800398c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 ffd0 	bl	8004934 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039a2:	d10e      	bne.n	80039c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ae:	2b80      	cmp	r3, #128	; 0x80
 80039b0:	d107      	bne.n	80039c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80039ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 ffc3 	bl	8004948 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039cc:	2b40      	cmp	r3, #64	; 0x40
 80039ce:	d10e      	bne.n	80039ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039da:	2b40      	cmp	r3, #64	; 0x40
 80039dc:	d107      	bne.n	80039ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 fa90 	bl	8003f0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	f003 0320 	and.w	r3, r3, #32
 80039f8:	2b20      	cmp	r3, #32
 80039fa:	d10e      	bne.n	8003a1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f003 0320 	and.w	r3, r3, #32
 8003a06:	2b20      	cmp	r3, #32
 8003a08:	d107      	bne.n	8003a1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f06f 0220 	mvn.w	r2, #32
 8003a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 ff83 	bl	8004920 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d101      	bne.n	8003a42 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003a3e:	2302      	movs	r3, #2
 8003a40:	e066      	b.n	8003b10 <HAL_TIM_OC_ConfigChannel+0xec>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b14      	cmp	r3, #20
 8003a4e:	d857      	bhi.n	8003b00 <HAL_TIM_OC_ConfigChannel+0xdc>
 8003a50:	a201      	add	r2, pc, #4	; (adr r2, 8003a58 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a56:	bf00      	nop
 8003a58:	08003aad 	.word	0x08003aad
 8003a5c:	08003b01 	.word	0x08003b01
 8003a60:	08003b01 	.word	0x08003b01
 8003a64:	08003b01 	.word	0x08003b01
 8003a68:	08003abb 	.word	0x08003abb
 8003a6c:	08003b01 	.word	0x08003b01
 8003a70:	08003b01 	.word	0x08003b01
 8003a74:	08003b01 	.word	0x08003b01
 8003a78:	08003ac9 	.word	0x08003ac9
 8003a7c:	08003b01 	.word	0x08003b01
 8003a80:	08003b01 	.word	0x08003b01
 8003a84:	08003b01 	.word	0x08003b01
 8003a88:	08003ad7 	.word	0x08003ad7
 8003a8c:	08003b01 	.word	0x08003b01
 8003a90:	08003b01 	.word	0x08003b01
 8003a94:	08003b01 	.word	0x08003b01
 8003a98:	08003ae5 	.word	0x08003ae5
 8003a9c:	08003b01 	.word	0x08003b01
 8003aa0:	08003b01 	.word	0x08003b01
 8003aa4:	08003b01 	.word	0x08003b01
 8003aa8:	08003af3 	.word	0x08003af3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68b9      	ldr	r1, [r7, #8]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 fac6 	bl	8004044 <TIM_OC1_SetConfig>
      break;
 8003ab8:	e025      	b.n	8003b06 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68b9      	ldr	r1, [r7, #8]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f000 fb4f 	bl	8004164 <TIM_OC2_SetConfig>
      break;
 8003ac6:	e01e      	b.n	8003b06 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68b9      	ldr	r1, [r7, #8]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 fbd2 	bl	8004278 <TIM_OC3_SetConfig>
      break;
 8003ad4:	e017      	b.n	8003b06 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68b9      	ldr	r1, [r7, #8]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 fc53 	bl	8004388 <TIM_OC4_SetConfig>
      break;
 8003ae2:	e010      	b.n	8003b06 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68b9      	ldr	r1, [r7, #8]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 fcb6 	bl	800445c <TIM_OC5_SetConfig>
      break;
 8003af0:	e009      	b.n	8003b06 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68b9      	ldr	r1, [r7, #8]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 fd13 	bl	8004524 <TIM_OC6_SetConfig>
      break;
 8003afe:	e002      	b.n	8003b06 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	75fb      	strb	r3, [r7, #23]
      break;
 8003b04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d101      	bne.n	8003b36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b32:	2302      	movs	r3, #2
 8003b34:	e0ff      	b.n	8003d36 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b14      	cmp	r3, #20
 8003b42:	f200 80f0 	bhi.w	8003d26 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003b46:	a201      	add	r2, pc, #4	; (adr r2, 8003b4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4c:	08003ba1 	.word	0x08003ba1
 8003b50:	08003d27 	.word	0x08003d27
 8003b54:	08003d27 	.word	0x08003d27
 8003b58:	08003d27 	.word	0x08003d27
 8003b5c:	08003be1 	.word	0x08003be1
 8003b60:	08003d27 	.word	0x08003d27
 8003b64:	08003d27 	.word	0x08003d27
 8003b68:	08003d27 	.word	0x08003d27
 8003b6c:	08003c23 	.word	0x08003c23
 8003b70:	08003d27 	.word	0x08003d27
 8003b74:	08003d27 	.word	0x08003d27
 8003b78:	08003d27 	.word	0x08003d27
 8003b7c:	08003c63 	.word	0x08003c63
 8003b80:	08003d27 	.word	0x08003d27
 8003b84:	08003d27 	.word	0x08003d27
 8003b88:	08003d27 	.word	0x08003d27
 8003b8c:	08003ca5 	.word	0x08003ca5
 8003b90:	08003d27 	.word	0x08003d27
 8003b94:	08003d27 	.word	0x08003d27
 8003b98:	08003d27 	.word	0x08003d27
 8003b9c:	08003ce5 	.word	0x08003ce5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68b9      	ldr	r1, [r7, #8]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 fa4c 	bl	8004044 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	699a      	ldr	r2, [r3, #24]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0208 	orr.w	r2, r2, #8
 8003bba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	699a      	ldr	r2, [r3, #24]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0204 	bic.w	r2, r2, #4
 8003bca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6999      	ldr	r1, [r3, #24]
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	691a      	ldr	r2, [r3, #16]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	619a      	str	r2, [r3, #24]
      break;
 8003bde:	e0a5      	b.n	8003d2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68b9      	ldr	r1, [r7, #8]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 fabc 	bl	8004164 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699a      	ldr	r2, [r3, #24]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699a      	ldr	r2, [r3, #24]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6999      	ldr	r1, [r3, #24]
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	021a      	lsls	r2, r3, #8
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	619a      	str	r2, [r3, #24]
      break;
 8003c20:	e084      	b.n	8003d2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68b9      	ldr	r1, [r7, #8]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 fb25 	bl	8004278 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	69da      	ldr	r2, [r3, #28]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f042 0208 	orr.w	r2, r2, #8
 8003c3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	69da      	ldr	r2, [r3, #28]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0204 	bic.w	r2, r2, #4
 8003c4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	69d9      	ldr	r1, [r3, #28]
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	691a      	ldr	r2, [r3, #16]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	61da      	str	r2, [r3, #28]
      break;
 8003c60:	e064      	b.n	8003d2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68b9      	ldr	r1, [r7, #8]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f000 fb8d 	bl	8004388 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	69da      	ldr	r2, [r3, #28]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	69da      	ldr	r2, [r3, #28]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	69d9      	ldr	r1, [r3, #28]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	021a      	lsls	r2, r3, #8
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	61da      	str	r2, [r3, #28]
      break;
 8003ca2:	e043      	b.n	8003d2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68b9      	ldr	r1, [r7, #8]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 fbd6 	bl	800445c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0208 	orr.w	r2, r2, #8
 8003cbe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0204 	bic.w	r2, r2, #4
 8003cce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	691a      	ldr	r2, [r3, #16]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003ce2:	e023      	b.n	8003d2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68b9      	ldr	r1, [r7, #8]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 fc1a 	bl	8004524 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cfe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d0e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	021a      	lsls	r2, r3, #8
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003d24:	e002      	b.n	8003d2c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	75fb      	strb	r3, [r7, #23]
      break;
 8003d2a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3718      	adds	r7, #24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop

08003d40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_TIM_ConfigClockSource+0x1c>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e0b6      	b.n	8003eca <HAL_TIM_ConfigClockSource+0x18a>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d98:	d03e      	beq.n	8003e18 <HAL_TIM_ConfigClockSource+0xd8>
 8003d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d9e:	f200 8087 	bhi.w	8003eb0 <HAL_TIM_ConfigClockSource+0x170>
 8003da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da6:	f000 8086 	beq.w	8003eb6 <HAL_TIM_ConfigClockSource+0x176>
 8003daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dae:	d87f      	bhi.n	8003eb0 <HAL_TIM_ConfigClockSource+0x170>
 8003db0:	2b70      	cmp	r3, #112	; 0x70
 8003db2:	d01a      	beq.n	8003dea <HAL_TIM_ConfigClockSource+0xaa>
 8003db4:	2b70      	cmp	r3, #112	; 0x70
 8003db6:	d87b      	bhi.n	8003eb0 <HAL_TIM_ConfigClockSource+0x170>
 8003db8:	2b60      	cmp	r3, #96	; 0x60
 8003dba:	d050      	beq.n	8003e5e <HAL_TIM_ConfigClockSource+0x11e>
 8003dbc:	2b60      	cmp	r3, #96	; 0x60
 8003dbe:	d877      	bhi.n	8003eb0 <HAL_TIM_ConfigClockSource+0x170>
 8003dc0:	2b50      	cmp	r3, #80	; 0x50
 8003dc2:	d03c      	beq.n	8003e3e <HAL_TIM_ConfigClockSource+0xfe>
 8003dc4:	2b50      	cmp	r3, #80	; 0x50
 8003dc6:	d873      	bhi.n	8003eb0 <HAL_TIM_ConfigClockSource+0x170>
 8003dc8:	2b40      	cmp	r3, #64	; 0x40
 8003dca:	d058      	beq.n	8003e7e <HAL_TIM_ConfigClockSource+0x13e>
 8003dcc:	2b40      	cmp	r3, #64	; 0x40
 8003dce:	d86f      	bhi.n	8003eb0 <HAL_TIM_ConfigClockSource+0x170>
 8003dd0:	2b30      	cmp	r3, #48	; 0x30
 8003dd2:	d064      	beq.n	8003e9e <HAL_TIM_ConfigClockSource+0x15e>
 8003dd4:	2b30      	cmp	r3, #48	; 0x30
 8003dd6:	d86b      	bhi.n	8003eb0 <HAL_TIM_ConfigClockSource+0x170>
 8003dd8:	2b20      	cmp	r3, #32
 8003dda:	d060      	beq.n	8003e9e <HAL_TIM_ConfigClockSource+0x15e>
 8003ddc:	2b20      	cmp	r3, #32
 8003dde:	d867      	bhi.n	8003eb0 <HAL_TIM_ConfigClockSource+0x170>
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d05c      	beq.n	8003e9e <HAL_TIM_ConfigClockSource+0x15e>
 8003de4:	2b10      	cmp	r3, #16
 8003de6:	d05a      	beq.n	8003e9e <HAL_TIM_ConfigClockSource+0x15e>
 8003de8:	e062      	b.n	8003eb0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dfa:	f000 fc73 	bl	80046e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	609a      	str	r2, [r3, #8]
      break;
 8003e16:	e04f      	b.n	8003eb8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e28:	f000 fc5c 	bl	80046e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e3a:	609a      	str	r2, [r3, #8]
      break;
 8003e3c:	e03c      	b.n	8003eb8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	f000 fbd0 	bl	80045f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2150      	movs	r1, #80	; 0x50
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fc29 	bl	80046ae <TIM_ITRx_SetConfig>
      break;
 8003e5c:	e02c      	b.n	8003eb8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	f000 fbef 	bl	800464e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2160      	movs	r1, #96	; 0x60
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 fc19 	bl	80046ae <TIM_ITRx_SetConfig>
      break;
 8003e7c:	e01c      	b.n	8003eb8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	f000 fbb0 	bl	80045f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2140      	movs	r1, #64	; 0x40
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 fc09 	bl	80046ae <TIM_ITRx_SetConfig>
      break;
 8003e9c:	e00c      	b.n	8003eb8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	4610      	mov	r0, r2
 8003eaa:	f000 fc00 	bl	80046ae <TIM_ITRx_SetConfig>
      break;
 8003eae:	e003      	b.n	8003eb8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8003eb4:	e000      	b.n	8003eb8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003eb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b083      	sub	sp, #12
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003eee:	bf00      	nop
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f02:	bf00      	nop
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b083      	sub	sp, #12
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
	...

08003f24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a3c      	ldr	r2, [pc, #240]	; (8004028 <TIM_Base_SetConfig+0x104>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d00f      	beq.n	8003f5c <TIM_Base_SetConfig+0x38>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f42:	d00b      	beq.n	8003f5c <TIM_Base_SetConfig+0x38>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a39      	ldr	r2, [pc, #228]	; (800402c <TIM_Base_SetConfig+0x108>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d007      	beq.n	8003f5c <TIM_Base_SetConfig+0x38>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a38      	ldr	r2, [pc, #224]	; (8004030 <TIM_Base_SetConfig+0x10c>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d003      	beq.n	8003f5c <TIM_Base_SetConfig+0x38>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a37      	ldr	r2, [pc, #220]	; (8004034 <TIM_Base_SetConfig+0x110>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d108      	bne.n	8003f6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a2d      	ldr	r2, [pc, #180]	; (8004028 <TIM_Base_SetConfig+0x104>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d01b      	beq.n	8003fae <TIM_Base_SetConfig+0x8a>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f7c:	d017      	beq.n	8003fae <TIM_Base_SetConfig+0x8a>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a2a      	ldr	r2, [pc, #168]	; (800402c <TIM_Base_SetConfig+0x108>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d013      	beq.n	8003fae <TIM_Base_SetConfig+0x8a>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a29      	ldr	r2, [pc, #164]	; (8004030 <TIM_Base_SetConfig+0x10c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d00f      	beq.n	8003fae <TIM_Base_SetConfig+0x8a>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a28      	ldr	r2, [pc, #160]	; (8004034 <TIM_Base_SetConfig+0x110>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d00b      	beq.n	8003fae <TIM_Base_SetConfig+0x8a>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a27      	ldr	r2, [pc, #156]	; (8004038 <TIM_Base_SetConfig+0x114>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d007      	beq.n	8003fae <TIM_Base_SetConfig+0x8a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a26      	ldr	r2, [pc, #152]	; (800403c <TIM_Base_SetConfig+0x118>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d003      	beq.n	8003fae <TIM_Base_SetConfig+0x8a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a25      	ldr	r2, [pc, #148]	; (8004040 <TIM_Base_SetConfig+0x11c>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d108      	bne.n	8003fc0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a10      	ldr	r2, [pc, #64]	; (8004028 <TIM_Base_SetConfig+0x104>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d00f      	beq.n	800400c <TIM_Base_SetConfig+0xe8>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a11      	ldr	r2, [pc, #68]	; (8004034 <TIM_Base_SetConfig+0x110>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d00b      	beq.n	800400c <TIM_Base_SetConfig+0xe8>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a10      	ldr	r2, [pc, #64]	; (8004038 <TIM_Base_SetConfig+0x114>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d007      	beq.n	800400c <TIM_Base_SetConfig+0xe8>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a0f      	ldr	r2, [pc, #60]	; (800403c <TIM_Base_SetConfig+0x118>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d003      	beq.n	800400c <TIM_Base_SetConfig+0xe8>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a0e      	ldr	r2, [pc, #56]	; (8004040 <TIM_Base_SetConfig+0x11c>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d103      	bne.n	8004014 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	691a      	ldr	r2, [r3, #16]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	615a      	str	r2, [r3, #20]
}
 800401a:	bf00      	nop
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	40012c00 	.word	0x40012c00
 800402c:	40000400 	.word	0x40000400
 8004030:	40000800 	.word	0x40000800
 8004034:	40013400 	.word	0x40013400
 8004038:	40014000 	.word	0x40014000
 800403c:	40014400 	.word	0x40014400
 8004040:	40014800 	.word	0x40014800

08004044 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	f023 0201 	bic.w	r2, r3, #1
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f023 0303 	bic.w	r3, r3, #3
 800407e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4313      	orrs	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f023 0302 	bic.w	r3, r3, #2
 8004090:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	4313      	orrs	r3, r2
 800409a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a2c      	ldr	r2, [pc, #176]	; (8004150 <TIM_OC1_SetConfig+0x10c>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d00f      	beq.n	80040c4 <TIM_OC1_SetConfig+0x80>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a2b      	ldr	r2, [pc, #172]	; (8004154 <TIM_OC1_SetConfig+0x110>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d00b      	beq.n	80040c4 <TIM_OC1_SetConfig+0x80>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a2a      	ldr	r2, [pc, #168]	; (8004158 <TIM_OC1_SetConfig+0x114>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d007      	beq.n	80040c4 <TIM_OC1_SetConfig+0x80>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a29      	ldr	r2, [pc, #164]	; (800415c <TIM_OC1_SetConfig+0x118>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d003      	beq.n	80040c4 <TIM_OC1_SetConfig+0x80>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a28      	ldr	r2, [pc, #160]	; (8004160 <TIM_OC1_SetConfig+0x11c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d10c      	bne.n	80040de <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f023 0308 	bic.w	r3, r3, #8
 80040ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f023 0304 	bic.w	r3, r3, #4
 80040dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a1b      	ldr	r2, [pc, #108]	; (8004150 <TIM_OC1_SetConfig+0x10c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d00f      	beq.n	8004106 <TIM_OC1_SetConfig+0xc2>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a1a      	ldr	r2, [pc, #104]	; (8004154 <TIM_OC1_SetConfig+0x110>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d00b      	beq.n	8004106 <TIM_OC1_SetConfig+0xc2>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a19      	ldr	r2, [pc, #100]	; (8004158 <TIM_OC1_SetConfig+0x114>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d007      	beq.n	8004106 <TIM_OC1_SetConfig+0xc2>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a18      	ldr	r2, [pc, #96]	; (800415c <TIM_OC1_SetConfig+0x118>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d003      	beq.n	8004106 <TIM_OC1_SetConfig+0xc2>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a17      	ldr	r2, [pc, #92]	; (8004160 <TIM_OC1_SetConfig+0x11c>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d111      	bne.n	800412a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800410c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004114:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	621a      	str	r2, [r3, #32]
}
 8004144:	bf00      	nop
 8004146:	371c      	adds	r7, #28
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	40012c00 	.word	0x40012c00
 8004154:	40013400 	.word	0x40013400
 8004158:	40014000 	.word	0x40014000
 800415c:	40014400 	.word	0x40014400
 8004160:	40014800 	.word	0x40014800

08004164 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	f023 0210 	bic.w	r2, r3, #16
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800419e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	021b      	lsls	r3, r3, #8
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f023 0320 	bic.w	r3, r3, #32
 80041b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	4313      	orrs	r3, r2
 80041be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a28      	ldr	r2, [pc, #160]	; (8004264 <TIM_OC2_SetConfig+0x100>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d003      	beq.n	80041d0 <TIM_OC2_SetConfig+0x6c>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a27      	ldr	r2, [pc, #156]	; (8004268 <TIM_OC2_SetConfig+0x104>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d10d      	bne.n	80041ec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a1d      	ldr	r2, [pc, #116]	; (8004264 <TIM_OC2_SetConfig+0x100>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d00f      	beq.n	8004214 <TIM_OC2_SetConfig+0xb0>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a1c      	ldr	r2, [pc, #112]	; (8004268 <TIM_OC2_SetConfig+0x104>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00b      	beq.n	8004214 <TIM_OC2_SetConfig+0xb0>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a1b      	ldr	r2, [pc, #108]	; (800426c <TIM_OC2_SetConfig+0x108>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d007      	beq.n	8004214 <TIM_OC2_SetConfig+0xb0>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a1a      	ldr	r2, [pc, #104]	; (8004270 <TIM_OC2_SetConfig+0x10c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d003      	beq.n	8004214 <TIM_OC2_SetConfig+0xb0>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a19      	ldr	r2, [pc, #100]	; (8004274 <TIM_OC2_SetConfig+0x110>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d113      	bne.n	800423c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800421a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004222:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4313      	orrs	r3, r2
 800422e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	621a      	str	r2, [r3, #32]
}
 8004256:	bf00      	nop
 8004258:	371c      	adds	r7, #28
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	40012c00 	.word	0x40012c00
 8004268:	40013400 	.word	0x40013400
 800426c:	40014000 	.word	0x40014000
 8004270:	40014400 	.word	0x40014400
 8004274:	40014800 	.word	0x40014800

08004278 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 0303 	bic.w	r3, r3, #3
 80042b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	021b      	lsls	r3, r3, #8
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a27      	ldr	r2, [pc, #156]	; (8004374 <TIM_OC3_SetConfig+0xfc>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d003      	beq.n	80042e2 <TIM_OC3_SetConfig+0x6a>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a26      	ldr	r2, [pc, #152]	; (8004378 <TIM_OC3_SetConfig+0x100>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d10d      	bne.n	80042fe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	021b      	lsls	r3, r3, #8
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042fc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a1c      	ldr	r2, [pc, #112]	; (8004374 <TIM_OC3_SetConfig+0xfc>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d00f      	beq.n	8004326 <TIM_OC3_SetConfig+0xae>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a1b      	ldr	r2, [pc, #108]	; (8004378 <TIM_OC3_SetConfig+0x100>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d00b      	beq.n	8004326 <TIM_OC3_SetConfig+0xae>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a1a      	ldr	r2, [pc, #104]	; (800437c <TIM_OC3_SetConfig+0x104>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d007      	beq.n	8004326 <TIM_OC3_SetConfig+0xae>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a19      	ldr	r2, [pc, #100]	; (8004380 <TIM_OC3_SetConfig+0x108>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d003      	beq.n	8004326 <TIM_OC3_SetConfig+0xae>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a18      	ldr	r2, [pc, #96]	; (8004384 <TIM_OC3_SetConfig+0x10c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d113      	bne.n	800434e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800432c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	4313      	orrs	r3, r2
 8004340:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	4313      	orrs	r3, r2
 800434c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	621a      	str	r2, [r3, #32]
}
 8004368:	bf00      	nop
 800436a:	371c      	adds	r7, #28
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	40012c00 	.word	0x40012c00
 8004378:	40013400 	.word	0x40013400
 800437c:	40014000 	.word	0x40014000
 8004380:	40014400 	.word	0x40014400
 8004384:	40014800 	.word	0x40014800

08004388 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	021b      	lsls	r3, r3, #8
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	031b      	lsls	r3, r3, #12
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a18      	ldr	r2, [pc, #96]	; (8004448 <TIM_OC4_SetConfig+0xc0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d00f      	beq.n	800440c <TIM_OC4_SetConfig+0x84>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a17      	ldr	r2, [pc, #92]	; (800444c <TIM_OC4_SetConfig+0xc4>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d00b      	beq.n	800440c <TIM_OC4_SetConfig+0x84>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a16      	ldr	r2, [pc, #88]	; (8004450 <TIM_OC4_SetConfig+0xc8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d007      	beq.n	800440c <TIM_OC4_SetConfig+0x84>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a15      	ldr	r2, [pc, #84]	; (8004454 <TIM_OC4_SetConfig+0xcc>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d003      	beq.n	800440c <TIM_OC4_SetConfig+0x84>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a14      	ldr	r2, [pc, #80]	; (8004458 <TIM_OC4_SetConfig+0xd0>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d109      	bne.n	8004420 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004412:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	019b      	lsls	r3, r3, #6
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	4313      	orrs	r3, r2
 800441e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	621a      	str	r2, [r3, #32]
}
 800443a:	bf00      	nop
 800443c:	371c      	adds	r7, #28
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	40012c00 	.word	0x40012c00
 800444c:	40013400 	.word	0x40013400
 8004450:	40014000 	.word	0x40014000
 8004454:	40014400 	.word	0x40014400
 8004458:	40014800 	.word	0x40014800

0800445c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800445c:	b480      	push	{r7}
 800445e:	b087      	sub	sp, #28
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800448a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	4313      	orrs	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80044a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	041b      	lsls	r3, r3, #16
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a17      	ldr	r2, [pc, #92]	; (8004510 <TIM_OC5_SetConfig+0xb4>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00f      	beq.n	80044d6 <TIM_OC5_SetConfig+0x7a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a16      	ldr	r2, [pc, #88]	; (8004514 <TIM_OC5_SetConfig+0xb8>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00b      	beq.n	80044d6 <TIM_OC5_SetConfig+0x7a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a15      	ldr	r2, [pc, #84]	; (8004518 <TIM_OC5_SetConfig+0xbc>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d007      	beq.n	80044d6 <TIM_OC5_SetConfig+0x7a>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a14      	ldr	r2, [pc, #80]	; (800451c <TIM_OC5_SetConfig+0xc0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d003      	beq.n	80044d6 <TIM_OC5_SetConfig+0x7a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a13      	ldr	r2, [pc, #76]	; (8004520 <TIM_OC5_SetConfig+0xc4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d109      	bne.n	80044ea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	021b      	lsls	r3, r3, #8
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	621a      	str	r2, [r3, #32]
}
 8004504:	bf00      	nop
 8004506:	371c      	adds	r7, #28
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	40012c00 	.word	0x40012c00
 8004514:	40013400 	.word	0x40013400
 8004518:	40014000 	.word	0x40014000
 800451c:	40014400 	.word	0x40014400
 8004520:	40014800 	.word	0x40014800

08004524 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004524:	b480      	push	{r7}
 8004526:	b087      	sub	sp, #28
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	021b      	lsls	r3, r3, #8
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	4313      	orrs	r3, r2
 8004562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800456a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	051b      	lsls	r3, r3, #20
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	4313      	orrs	r3, r2
 8004576:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a18      	ldr	r2, [pc, #96]	; (80045dc <TIM_OC6_SetConfig+0xb8>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d00f      	beq.n	80045a0 <TIM_OC6_SetConfig+0x7c>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a17      	ldr	r2, [pc, #92]	; (80045e0 <TIM_OC6_SetConfig+0xbc>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d00b      	beq.n	80045a0 <TIM_OC6_SetConfig+0x7c>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a16      	ldr	r2, [pc, #88]	; (80045e4 <TIM_OC6_SetConfig+0xc0>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d007      	beq.n	80045a0 <TIM_OC6_SetConfig+0x7c>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a15      	ldr	r2, [pc, #84]	; (80045e8 <TIM_OC6_SetConfig+0xc4>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d003      	beq.n	80045a0 <TIM_OC6_SetConfig+0x7c>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a14      	ldr	r2, [pc, #80]	; (80045ec <TIM_OC6_SetConfig+0xc8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d109      	bne.n	80045b4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	029b      	lsls	r3, r3, #10
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	621a      	str	r2, [r3, #32]
}
 80045ce:	bf00      	nop
 80045d0:	371c      	adds	r7, #28
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	40012c00 	.word	0x40012c00
 80045e0:	40013400 	.word	0x40013400
 80045e4:	40014000 	.word	0x40014000
 80045e8:	40014400 	.word	0x40014400
 80045ec:	40014800 	.word	0x40014800

080045f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	f023 0201 	bic.w	r2, r3, #1
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800461a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	011b      	lsls	r3, r3, #4
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	4313      	orrs	r3, r2
 8004624:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f023 030a 	bic.w	r3, r3, #10
 800462c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	4313      	orrs	r3, r2
 8004634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	621a      	str	r2, [r3, #32]
}
 8004642:	bf00      	nop
 8004644:	371c      	adds	r7, #28
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800464e:	b480      	push	{r7}
 8004650:	b087      	sub	sp, #28
 8004652:	af00      	add	r7, sp, #0
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	f023 0210 	bic.w	r2, r3, #16
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004678:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	031b      	lsls	r3, r3, #12
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	4313      	orrs	r3, r2
 8004682:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800468a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4313      	orrs	r3, r2
 8004694:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	621a      	str	r2, [r3, #32]
}
 80046a2:	bf00      	nop
 80046a4:	371c      	adds	r7, #28
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b085      	sub	sp, #20
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f043 0307 	orr.w	r3, r3, #7
 80046d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	609a      	str	r2, [r3, #8]
}
 80046d8:	bf00      	nop
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b087      	sub	sp, #28
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	021a      	lsls	r2, r3, #8
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	431a      	orrs	r2, r3
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	4313      	orrs	r3, r2
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	4313      	orrs	r3, r2
 8004710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	609a      	str	r2, [r3, #8]
}
 8004718:	bf00      	nop
 800471a:	371c      	adds	r7, #28
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004738:	2302      	movs	r3, #2
 800473a:	e063      	b.n	8004804 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a2b      	ldr	r2, [pc, #172]	; (8004810 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d004      	beq.n	8004770 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a2a      	ldr	r2, [pc, #168]	; (8004814 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d108      	bne.n	8004782 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004776:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	4313      	orrs	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004788:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	4313      	orrs	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a1b      	ldr	r2, [pc, #108]	; (8004810 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d018      	beq.n	80047d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ae:	d013      	beq.n	80047d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a18      	ldr	r2, [pc, #96]	; (8004818 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d00e      	beq.n	80047d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a17      	ldr	r2, [pc, #92]	; (800481c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d009      	beq.n	80047d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a12      	ldr	r2, [pc, #72]	; (8004814 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d004      	beq.n	80047d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a13      	ldr	r2, [pc, #76]	; (8004820 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d10c      	bne.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	40012c00 	.word	0x40012c00
 8004814:	40013400 	.word	0x40013400
 8004818:	40000400 	.word	0x40000400
 800481c:	40000800 	.word	0x40000800
 8004820:	40014000 	.word	0x40014000

08004824 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800482e:	2300      	movs	r3, #0
 8004830:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004838:	2b01      	cmp	r3, #1
 800483a:	d101      	bne.n	8004840 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800483c:	2302      	movs	r3, #2
 800483e:	e065      	b.n	800490c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	4313      	orrs	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	4313      	orrs	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	4313      	orrs	r3, r2
 8004870:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4313      	orrs	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	4313      	orrs	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	4313      	orrs	r3, r2
 800489a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a6:	4313      	orrs	r3, r2
 80048a8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	041b      	lsls	r3, r3, #16
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a16      	ldr	r2, [pc, #88]	; (8004918 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d004      	beq.n	80048ce <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a14      	ldr	r2, [pc, #80]	; (800491c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d115      	bne.n	80048fa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	051b      	lsls	r3, r3, #20
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	40012c00 	.word	0x40012c00
 800491c:	40013400 	.word	0x40013400

08004920 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e040      	b.n	80049f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004972:	2b00      	cmp	r3, #0
 8004974:	d106      	bne.n	8004984 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7fc fbba 	bl	80010f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2224      	movs	r2, #36	; 0x24
 8004988:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 0201 	bic.w	r2, r2, #1
 8004998:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f8b6 	bl	8004b0c <UART_SetConfig>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d101      	bne.n	80049aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e022      	b.n	80049f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d002      	beq.n	80049b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 fa7e 	bl	8004eb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689a      	ldr	r2, [r3, #8]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0201 	orr.w	r2, r2, #1
 80049e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 fb05 	bl	8004ff8 <UART_CheckIdleState>
 80049ee:	4603      	mov	r3, r0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b08a      	sub	sp, #40	; 0x28
 80049fc:	af02      	add	r7, sp, #8
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	603b      	str	r3, [r7, #0]
 8004a04:	4613      	mov	r3, r2
 8004a06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a0c:	2b20      	cmp	r3, #32
 8004a0e:	d178      	bne.n	8004b02 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d002      	beq.n	8004a1c <HAL_UART_Transmit+0x24>
 8004a16:	88fb      	ldrh	r3, [r7, #6]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e071      	b.n	8004b04 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2221      	movs	r2, #33	; 0x21
 8004a2c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a2e:	f7fc fd33 	bl	8001498 <HAL_GetTick>
 8004a32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	88fa      	ldrh	r2, [r7, #6]
 8004a38:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	88fa      	ldrh	r2, [r7, #6]
 8004a40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a4c:	d108      	bne.n	8004a60 <HAL_UART_Transmit+0x68>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d104      	bne.n	8004a60 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004a56:	2300      	movs	r3, #0
 8004a58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	61bb      	str	r3, [r7, #24]
 8004a5e:	e003      	b.n	8004a68 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a64:	2300      	movs	r3, #0
 8004a66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a68:	e030      	b.n	8004acc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	2200      	movs	r2, #0
 8004a72:	2180      	movs	r1, #128	; 0x80
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f000 fb67 	bl	8005148 <UART_WaitOnFlagUntilTimeout>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d004      	beq.n	8004a8a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2220      	movs	r2, #32
 8004a84:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e03c      	b.n	8004b04 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10b      	bne.n	8004aa8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	881a      	ldrh	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a9c:	b292      	uxth	r2, r2
 8004a9e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	3302      	adds	r3, #2
 8004aa4:	61bb      	str	r3, [r7, #24]
 8004aa6:	e008      	b.n	8004aba <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	781a      	ldrb	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	b292      	uxth	r2, r2
 8004ab2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1c8      	bne.n	8004a6a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	2140      	movs	r1, #64	; 0x40
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 fb30 	bl	8005148 <UART_WaitOnFlagUntilTimeout>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d004      	beq.n	8004af8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2220      	movs	r2, #32
 8004af2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e005      	b.n	8004b04 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2220      	movs	r2, #32
 8004afc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004afe:	2300      	movs	r3, #0
 8004b00:	e000      	b.n	8004b04 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004b02:	2302      	movs	r3, #2
  }
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3720      	adds	r7, #32
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b088      	sub	sp, #32
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b14:	2300      	movs	r3, #0
 8004b16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	431a      	orrs	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	431a      	orrs	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004b3a:	f023 030c 	bic.w	r3, r3, #12
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	6812      	ldr	r2, [r2, #0]
 8004b42:	6979      	ldr	r1, [r7, #20]
 8004b44:	430b      	orrs	r3, r1
 8004b46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68da      	ldr	r2, [r3, #12]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4aa7      	ldr	r2, [pc, #668]	; (8004e24 <UART_SetConfig+0x318>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d120      	bne.n	8004bce <UART_SetConfig+0xc2>
 8004b8c:	4ba6      	ldr	r3, [pc, #664]	; (8004e28 <UART_SetConfig+0x31c>)
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	f003 0303 	and.w	r3, r3, #3
 8004b94:	2b03      	cmp	r3, #3
 8004b96:	d817      	bhi.n	8004bc8 <UART_SetConfig+0xbc>
 8004b98:	a201      	add	r2, pc, #4	; (adr r2, 8004ba0 <UART_SetConfig+0x94>)
 8004b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9e:	bf00      	nop
 8004ba0:	08004bb1 	.word	0x08004bb1
 8004ba4:	08004bbd 	.word	0x08004bbd
 8004ba8:	08004bc3 	.word	0x08004bc3
 8004bac:	08004bb7 	.word	0x08004bb7
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	77fb      	strb	r3, [r7, #31]
 8004bb4:	e0b5      	b.n	8004d22 <UART_SetConfig+0x216>
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	77fb      	strb	r3, [r7, #31]
 8004bba:	e0b2      	b.n	8004d22 <UART_SetConfig+0x216>
 8004bbc:	2304      	movs	r3, #4
 8004bbe:	77fb      	strb	r3, [r7, #31]
 8004bc0:	e0af      	b.n	8004d22 <UART_SetConfig+0x216>
 8004bc2:	2308      	movs	r3, #8
 8004bc4:	77fb      	strb	r3, [r7, #31]
 8004bc6:	e0ac      	b.n	8004d22 <UART_SetConfig+0x216>
 8004bc8:	2310      	movs	r3, #16
 8004bca:	77fb      	strb	r3, [r7, #31]
 8004bcc:	e0a9      	b.n	8004d22 <UART_SetConfig+0x216>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a96      	ldr	r2, [pc, #600]	; (8004e2c <UART_SetConfig+0x320>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d124      	bne.n	8004c22 <UART_SetConfig+0x116>
 8004bd8:	4b93      	ldr	r3, [pc, #588]	; (8004e28 <UART_SetConfig+0x31c>)
 8004bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004be0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004be4:	d011      	beq.n	8004c0a <UART_SetConfig+0xfe>
 8004be6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bea:	d817      	bhi.n	8004c1c <UART_SetConfig+0x110>
 8004bec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bf0:	d011      	beq.n	8004c16 <UART_SetConfig+0x10a>
 8004bf2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bf6:	d811      	bhi.n	8004c1c <UART_SetConfig+0x110>
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <UART_SetConfig+0xf8>
 8004bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c00:	d006      	beq.n	8004c10 <UART_SetConfig+0x104>
 8004c02:	e00b      	b.n	8004c1c <UART_SetConfig+0x110>
 8004c04:	2300      	movs	r3, #0
 8004c06:	77fb      	strb	r3, [r7, #31]
 8004c08:	e08b      	b.n	8004d22 <UART_SetConfig+0x216>
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	77fb      	strb	r3, [r7, #31]
 8004c0e:	e088      	b.n	8004d22 <UART_SetConfig+0x216>
 8004c10:	2304      	movs	r3, #4
 8004c12:	77fb      	strb	r3, [r7, #31]
 8004c14:	e085      	b.n	8004d22 <UART_SetConfig+0x216>
 8004c16:	2308      	movs	r3, #8
 8004c18:	77fb      	strb	r3, [r7, #31]
 8004c1a:	e082      	b.n	8004d22 <UART_SetConfig+0x216>
 8004c1c:	2310      	movs	r3, #16
 8004c1e:	77fb      	strb	r3, [r7, #31]
 8004c20:	e07f      	b.n	8004d22 <UART_SetConfig+0x216>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a82      	ldr	r2, [pc, #520]	; (8004e30 <UART_SetConfig+0x324>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d124      	bne.n	8004c76 <UART_SetConfig+0x16a>
 8004c2c:	4b7e      	ldr	r3, [pc, #504]	; (8004e28 <UART_SetConfig+0x31c>)
 8004c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c30:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004c34:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c38:	d011      	beq.n	8004c5e <UART_SetConfig+0x152>
 8004c3a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c3e:	d817      	bhi.n	8004c70 <UART_SetConfig+0x164>
 8004c40:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c44:	d011      	beq.n	8004c6a <UART_SetConfig+0x15e>
 8004c46:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c4a:	d811      	bhi.n	8004c70 <UART_SetConfig+0x164>
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <UART_SetConfig+0x14c>
 8004c50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c54:	d006      	beq.n	8004c64 <UART_SetConfig+0x158>
 8004c56:	e00b      	b.n	8004c70 <UART_SetConfig+0x164>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	77fb      	strb	r3, [r7, #31]
 8004c5c:	e061      	b.n	8004d22 <UART_SetConfig+0x216>
 8004c5e:	2302      	movs	r3, #2
 8004c60:	77fb      	strb	r3, [r7, #31]
 8004c62:	e05e      	b.n	8004d22 <UART_SetConfig+0x216>
 8004c64:	2304      	movs	r3, #4
 8004c66:	77fb      	strb	r3, [r7, #31]
 8004c68:	e05b      	b.n	8004d22 <UART_SetConfig+0x216>
 8004c6a:	2308      	movs	r3, #8
 8004c6c:	77fb      	strb	r3, [r7, #31]
 8004c6e:	e058      	b.n	8004d22 <UART_SetConfig+0x216>
 8004c70:	2310      	movs	r3, #16
 8004c72:	77fb      	strb	r3, [r7, #31]
 8004c74:	e055      	b.n	8004d22 <UART_SetConfig+0x216>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a6e      	ldr	r2, [pc, #440]	; (8004e34 <UART_SetConfig+0x328>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d124      	bne.n	8004cca <UART_SetConfig+0x1be>
 8004c80:	4b69      	ldr	r3, [pc, #420]	; (8004e28 <UART_SetConfig+0x31c>)
 8004c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c84:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004c88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c8c:	d011      	beq.n	8004cb2 <UART_SetConfig+0x1a6>
 8004c8e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c92:	d817      	bhi.n	8004cc4 <UART_SetConfig+0x1b8>
 8004c94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c98:	d011      	beq.n	8004cbe <UART_SetConfig+0x1b2>
 8004c9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c9e:	d811      	bhi.n	8004cc4 <UART_SetConfig+0x1b8>
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d003      	beq.n	8004cac <UART_SetConfig+0x1a0>
 8004ca4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ca8:	d006      	beq.n	8004cb8 <UART_SetConfig+0x1ac>
 8004caa:	e00b      	b.n	8004cc4 <UART_SetConfig+0x1b8>
 8004cac:	2300      	movs	r3, #0
 8004cae:	77fb      	strb	r3, [r7, #31]
 8004cb0:	e037      	b.n	8004d22 <UART_SetConfig+0x216>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	77fb      	strb	r3, [r7, #31]
 8004cb6:	e034      	b.n	8004d22 <UART_SetConfig+0x216>
 8004cb8:	2304      	movs	r3, #4
 8004cba:	77fb      	strb	r3, [r7, #31]
 8004cbc:	e031      	b.n	8004d22 <UART_SetConfig+0x216>
 8004cbe:	2308      	movs	r3, #8
 8004cc0:	77fb      	strb	r3, [r7, #31]
 8004cc2:	e02e      	b.n	8004d22 <UART_SetConfig+0x216>
 8004cc4:	2310      	movs	r3, #16
 8004cc6:	77fb      	strb	r3, [r7, #31]
 8004cc8:	e02b      	b.n	8004d22 <UART_SetConfig+0x216>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a5a      	ldr	r2, [pc, #360]	; (8004e38 <UART_SetConfig+0x32c>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d124      	bne.n	8004d1e <UART_SetConfig+0x212>
 8004cd4:	4b54      	ldr	r3, [pc, #336]	; (8004e28 <UART_SetConfig+0x31c>)
 8004cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004cdc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ce0:	d011      	beq.n	8004d06 <UART_SetConfig+0x1fa>
 8004ce2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ce6:	d817      	bhi.n	8004d18 <UART_SetConfig+0x20c>
 8004ce8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cec:	d011      	beq.n	8004d12 <UART_SetConfig+0x206>
 8004cee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cf2:	d811      	bhi.n	8004d18 <UART_SetConfig+0x20c>
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d003      	beq.n	8004d00 <UART_SetConfig+0x1f4>
 8004cf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cfc:	d006      	beq.n	8004d0c <UART_SetConfig+0x200>
 8004cfe:	e00b      	b.n	8004d18 <UART_SetConfig+0x20c>
 8004d00:	2300      	movs	r3, #0
 8004d02:	77fb      	strb	r3, [r7, #31]
 8004d04:	e00d      	b.n	8004d22 <UART_SetConfig+0x216>
 8004d06:	2302      	movs	r3, #2
 8004d08:	77fb      	strb	r3, [r7, #31]
 8004d0a:	e00a      	b.n	8004d22 <UART_SetConfig+0x216>
 8004d0c:	2304      	movs	r3, #4
 8004d0e:	77fb      	strb	r3, [r7, #31]
 8004d10:	e007      	b.n	8004d22 <UART_SetConfig+0x216>
 8004d12:	2308      	movs	r3, #8
 8004d14:	77fb      	strb	r3, [r7, #31]
 8004d16:	e004      	b.n	8004d22 <UART_SetConfig+0x216>
 8004d18:	2310      	movs	r3, #16
 8004d1a:	77fb      	strb	r3, [r7, #31]
 8004d1c:	e001      	b.n	8004d22 <UART_SetConfig+0x216>
 8004d1e:	2310      	movs	r3, #16
 8004d20:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d2a:	d15b      	bne.n	8004de4 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8004d2c:	7ffb      	ldrb	r3, [r7, #31]
 8004d2e:	2b08      	cmp	r3, #8
 8004d30:	d827      	bhi.n	8004d82 <UART_SetConfig+0x276>
 8004d32:	a201      	add	r2, pc, #4	; (adr r2, 8004d38 <UART_SetConfig+0x22c>)
 8004d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d38:	08004d5d 	.word	0x08004d5d
 8004d3c:	08004d65 	.word	0x08004d65
 8004d40:	08004d6d 	.word	0x08004d6d
 8004d44:	08004d83 	.word	0x08004d83
 8004d48:	08004d73 	.word	0x08004d73
 8004d4c:	08004d83 	.word	0x08004d83
 8004d50:	08004d83 	.word	0x08004d83
 8004d54:	08004d83 	.word	0x08004d83
 8004d58:	08004d7b 	.word	0x08004d7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d5c:	f7fe f9d2 	bl	8003104 <HAL_RCC_GetPCLK1Freq>
 8004d60:	61b8      	str	r0, [r7, #24]
        break;
 8004d62:	e013      	b.n	8004d8c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d64:	f7fe f9f0 	bl	8003148 <HAL_RCC_GetPCLK2Freq>
 8004d68:	61b8      	str	r0, [r7, #24]
        break;
 8004d6a:	e00f      	b.n	8004d8c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d6c:	4b33      	ldr	r3, [pc, #204]	; (8004e3c <UART_SetConfig+0x330>)
 8004d6e:	61bb      	str	r3, [r7, #24]
        break;
 8004d70:	e00c      	b.n	8004d8c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d72:	f7fe f951 	bl	8003018 <HAL_RCC_GetSysClockFreq>
 8004d76:	61b8      	str	r0, [r7, #24]
        break;
 8004d78:	e008      	b.n	8004d8c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d7e:	61bb      	str	r3, [r7, #24]
        break;
 8004d80:	e004      	b.n	8004d8c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	77bb      	strb	r3, [r7, #30]
        break;
 8004d8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f000 8082 	beq.w	8004e98 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	005a      	lsls	r2, r3, #1
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	085b      	lsrs	r3, r3, #1
 8004d9e:	441a      	add	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	2b0f      	cmp	r3, #15
 8004dae:	d916      	bls.n	8004dde <UART_SetConfig+0x2d2>
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db6:	d212      	bcs.n	8004dde <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	f023 030f 	bic.w	r3, r3, #15
 8004dc0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	085b      	lsrs	r3, r3, #1
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	f003 0307 	and.w	r3, r3, #7
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	89fb      	ldrh	r3, [r7, #14]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	89fa      	ldrh	r2, [r7, #14]
 8004dda:	60da      	str	r2, [r3, #12]
 8004ddc:	e05c      	b.n	8004e98 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	77bb      	strb	r3, [r7, #30]
 8004de2:	e059      	b.n	8004e98 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004de4:	7ffb      	ldrb	r3, [r7, #31]
 8004de6:	2b08      	cmp	r3, #8
 8004de8:	d835      	bhi.n	8004e56 <UART_SetConfig+0x34a>
 8004dea:	a201      	add	r2, pc, #4	; (adr r2, 8004df0 <UART_SetConfig+0x2e4>)
 8004dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df0:	08004e15 	.word	0x08004e15
 8004df4:	08004e1d 	.word	0x08004e1d
 8004df8:	08004e41 	.word	0x08004e41
 8004dfc:	08004e57 	.word	0x08004e57
 8004e00:	08004e47 	.word	0x08004e47
 8004e04:	08004e57 	.word	0x08004e57
 8004e08:	08004e57 	.word	0x08004e57
 8004e0c:	08004e57 	.word	0x08004e57
 8004e10:	08004e4f 	.word	0x08004e4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e14:	f7fe f976 	bl	8003104 <HAL_RCC_GetPCLK1Freq>
 8004e18:	61b8      	str	r0, [r7, #24]
        break;
 8004e1a:	e021      	b.n	8004e60 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e1c:	f7fe f994 	bl	8003148 <HAL_RCC_GetPCLK2Freq>
 8004e20:	61b8      	str	r0, [r7, #24]
        break;
 8004e22:	e01d      	b.n	8004e60 <UART_SetConfig+0x354>
 8004e24:	40013800 	.word	0x40013800
 8004e28:	40021000 	.word	0x40021000
 8004e2c:	40004400 	.word	0x40004400
 8004e30:	40004800 	.word	0x40004800
 8004e34:	40004c00 	.word	0x40004c00
 8004e38:	40005000 	.word	0x40005000
 8004e3c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e40:	4b1b      	ldr	r3, [pc, #108]	; (8004eb0 <UART_SetConfig+0x3a4>)
 8004e42:	61bb      	str	r3, [r7, #24]
        break;
 8004e44:	e00c      	b.n	8004e60 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e46:	f7fe f8e7 	bl	8003018 <HAL_RCC_GetSysClockFreq>
 8004e4a:	61b8      	str	r0, [r7, #24]
        break;
 8004e4c:	e008      	b.n	8004e60 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e52:	61bb      	str	r3, [r7, #24]
        break;
 8004e54:	e004      	b.n	8004e60 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	77bb      	strb	r3, [r7, #30]
        break;
 8004e5e:	bf00      	nop
    }

    if (pclk != 0U)
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d018      	beq.n	8004e98 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	085a      	lsrs	r2, r3, #1
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	441a      	add	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e78:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	2b0f      	cmp	r3, #15
 8004e7e:	d909      	bls.n	8004e94 <UART_SetConfig+0x388>
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e86:	d205      	bcs.n	8004e94 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	60da      	str	r2, [r3, #12]
 8004e92:	e001      	b.n	8004e98 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004ea4:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3720      	adds	r7, #32
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	007a1200 	.word	0x007a1200

08004eb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00a      	beq.n	8004ede <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00a      	beq.n	8004f00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00a      	beq.n	8004f22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	f003 0308 	and.w	r3, r3, #8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00a      	beq.n	8004f44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	f003 0310 	and.w	r3, r3, #16
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00a      	beq.n	8004f66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00a      	beq.n	8004f88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	430a      	orrs	r2, r1
 8004f86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d01a      	beq.n	8004fca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fb2:	d10a      	bne.n	8004fca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00a      	beq.n	8004fec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	605a      	str	r2, [r3, #4]
  }
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b098      	sub	sp, #96	; 0x60
 8004ffc:	af02      	add	r7, sp, #8
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005008:	f7fc fa46 	bl	8001498 <HAL_GetTick>
 800500c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0308 	and.w	r3, r3, #8
 8005018:	2b08      	cmp	r3, #8
 800501a:	d12e      	bne.n	800507a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800501c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005024:	2200      	movs	r2, #0
 8005026:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f88c 	bl	8005148 <UART_WaitOnFlagUntilTimeout>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d021      	beq.n	800507a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503e:	e853 3f00 	ldrex	r3, [r3]
 8005042:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005046:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800504a:	653b      	str	r3, [r7, #80]	; 0x50
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	461a      	mov	r2, r3
 8005052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005054:	647b      	str	r3, [r7, #68]	; 0x44
 8005056:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005058:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800505a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800505c:	e841 2300 	strex	r3, r2, [r1]
 8005060:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1e6      	bne.n	8005036 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2220      	movs	r2, #32
 800506c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e062      	b.n	8005140 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b04      	cmp	r3, #4
 8005086:	d149      	bne.n	800511c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005088:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005090:	2200      	movs	r2, #0
 8005092:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f856 	bl	8005148 <UART_WaitOnFlagUntilTimeout>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d03c      	beq.n	800511c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	e853 3f00 	ldrex	r3, [r3]
 80050ae:	623b      	str	r3, [r7, #32]
   return(result);
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	461a      	mov	r2, r3
 80050be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c0:	633b      	str	r3, [r7, #48]	; 0x30
 80050c2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050c8:	e841 2300 	strex	r3, r2, [r1]
 80050cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1e6      	bne.n	80050a2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	3308      	adds	r3, #8
 80050da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	e853 3f00 	ldrex	r3, [r3]
 80050e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f023 0301 	bic.w	r3, r3, #1
 80050ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3308      	adds	r3, #8
 80050f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050f4:	61fa      	str	r2, [r7, #28]
 80050f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f8:	69b9      	ldr	r1, [r7, #24]
 80050fa:	69fa      	ldr	r2, [r7, #28]
 80050fc:	e841 2300 	strex	r3, r2, [r1]
 8005100:	617b      	str	r3, [r7, #20]
   return(result);
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1e5      	bne.n	80050d4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2220      	movs	r2, #32
 800510c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e011      	b.n	8005140 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2220      	movs	r2, #32
 8005120:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2220      	movs	r2, #32
 8005126:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3758      	adds	r7, #88	; 0x58
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	603b      	str	r3, [r7, #0]
 8005154:	4613      	mov	r3, r2
 8005156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005158:	e049      	b.n	80051ee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005160:	d045      	beq.n	80051ee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005162:	f7fc f999 	bl	8001498 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	429a      	cmp	r2, r3
 8005170:	d302      	bcc.n	8005178 <UART_WaitOnFlagUntilTimeout+0x30>
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d101      	bne.n	800517c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e048      	b.n	800520e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0304 	and.w	r3, r3, #4
 8005186:	2b00      	cmp	r3, #0
 8005188:	d031      	beq.n	80051ee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	f003 0308 	and.w	r3, r3, #8
 8005194:	2b08      	cmp	r3, #8
 8005196:	d110      	bne.n	80051ba <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2208      	movs	r2, #8
 800519e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f000 f838 	bl	8005216 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2208      	movs	r2, #8
 80051aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e029      	b.n	800520e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	69db      	ldr	r3, [r3, #28]
 80051c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051c8:	d111      	bne.n	80051ee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 f81e 	bl	8005216 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2220      	movs	r2, #32
 80051de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e00f      	b.n	800520e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69da      	ldr	r2, [r3, #28]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	4013      	ands	r3, r2
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	bf0c      	ite	eq
 80051fe:	2301      	moveq	r3, #1
 8005200:	2300      	movne	r3, #0
 8005202:	b2db      	uxtb	r3, r3
 8005204:	461a      	mov	r2, r3
 8005206:	79fb      	ldrb	r3, [r7, #7]
 8005208:	429a      	cmp	r2, r3
 800520a:	d0a6      	beq.n	800515a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005216:	b480      	push	{r7}
 8005218:	b095      	sub	sp, #84	; 0x54
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005226:	e853 3f00 	ldrex	r3, [r3]
 800522a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800522c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	461a      	mov	r2, r3
 800523a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800523c:	643b      	str	r3, [r7, #64]	; 0x40
 800523e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005240:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005242:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005244:	e841 2300 	strex	r3, r2, [r1]
 8005248:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800524a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1e6      	bne.n	800521e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	3308      	adds	r3, #8
 8005256:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	e853 3f00 	ldrex	r3, [r3]
 800525e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	f023 0301 	bic.w	r3, r3, #1
 8005266:	64bb      	str	r3, [r7, #72]	; 0x48
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	3308      	adds	r3, #8
 800526e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005270:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005272:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005274:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005276:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005278:	e841 2300 	strex	r3, r2, [r1]
 800527c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1e5      	bne.n	8005250 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005288:	2b01      	cmp	r3, #1
 800528a:	d118      	bne.n	80052be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	e853 3f00 	ldrex	r3, [r3]
 8005298:	60bb      	str	r3, [r7, #8]
   return(result);
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	f023 0310 	bic.w	r3, r3, #16
 80052a0:	647b      	str	r3, [r7, #68]	; 0x44
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052aa:	61bb      	str	r3, [r7, #24]
 80052ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ae:	6979      	ldr	r1, [r7, #20]
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	e841 2300 	strex	r3, r2, [r1]
 80052b6:	613b      	str	r3, [r7, #16]
   return(result);
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1e6      	bne.n	800528c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80052d2:	bf00      	nop
 80052d4:	3754      	adds	r7, #84	; 0x54
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
	...

080052e0 <std>:
 80052e0:	2300      	movs	r3, #0
 80052e2:	b510      	push	{r4, lr}
 80052e4:	4604      	mov	r4, r0
 80052e6:	e9c0 3300 	strd	r3, r3, [r0]
 80052ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052ee:	6083      	str	r3, [r0, #8]
 80052f0:	8181      	strh	r1, [r0, #12]
 80052f2:	6643      	str	r3, [r0, #100]	; 0x64
 80052f4:	81c2      	strh	r2, [r0, #14]
 80052f6:	6183      	str	r3, [r0, #24]
 80052f8:	4619      	mov	r1, r3
 80052fa:	2208      	movs	r2, #8
 80052fc:	305c      	adds	r0, #92	; 0x5c
 80052fe:	f000 f99b 	bl	8005638 <memset>
 8005302:	4b0d      	ldr	r3, [pc, #52]	; (8005338 <std+0x58>)
 8005304:	6263      	str	r3, [r4, #36]	; 0x24
 8005306:	4b0d      	ldr	r3, [pc, #52]	; (800533c <std+0x5c>)
 8005308:	62a3      	str	r3, [r4, #40]	; 0x28
 800530a:	4b0d      	ldr	r3, [pc, #52]	; (8005340 <std+0x60>)
 800530c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800530e:	4b0d      	ldr	r3, [pc, #52]	; (8005344 <std+0x64>)
 8005310:	6323      	str	r3, [r4, #48]	; 0x30
 8005312:	4b0d      	ldr	r3, [pc, #52]	; (8005348 <std+0x68>)
 8005314:	6224      	str	r4, [r4, #32]
 8005316:	429c      	cmp	r4, r3
 8005318:	d006      	beq.n	8005328 <std+0x48>
 800531a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800531e:	4294      	cmp	r4, r2
 8005320:	d002      	beq.n	8005328 <std+0x48>
 8005322:	33d0      	adds	r3, #208	; 0xd0
 8005324:	429c      	cmp	r4, r3
 8005326:	d105      	bne.n	8005334 <std+0x54>
 8005328:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800532c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005330:	f000 b9fa 	b.w	8005728 <__retarget_lock_init_recursive>
 8005334:	bd10      	pop	{r4, pc}
 8005336:	bf00      	nop
 8005338:	08005489 	.word	0x08005489
 800533c:	080054ab 	.word	0x080054ab
 8005340:	080054e3 	.word	0x080054e3
 8005344:	08005507 	.word	0x08005507
 8005348:	20000380 	.word	0x20000380

0800534c <stdio_exit_handler>:
 800534c:	4a02      	ldr	r2, [pc, #8]	; (8005358 <stdio_exit_handler+0xc>)
 800534e:	4903      	ldr	r1, [pc, #12]	; (800535c <stdio_exit_handler+0x10>)
 8005350:	4803      	ldr	r0, [pc, #12]	; (8005360 <stdio_exit_handler+0x14>)
 8005352:	f000 b869 	b.w	8005428 <_fwalk_sglue>
 8005356:	bf00      	nop
 8005358:	2000000c 	.word	0x2000000c
 800535c:	08005fd5 	.word	0x08005fd5
 8005360:	20000018 	.word	0x20000018

08005364 <cleanup_stdio>:
 8005364:	6841      	ldr	r1, [r0, #4]
 8005366:	4b0c      	ldr	r3, [pc, #48]	; (8005398 <cleanup_stdio+0x34>)
 8005368:	4299      	cmp	r1, r3
 800536a:	b510      	push	{r4, lr}
 800536c:	4604      	mov	r4, r0
 800536e:	d001      	beq.n	8005374 <cleanup_stdio+0x10>
 8005370:	f000 fe30 	bl	8005fd4 <_fflush_r>
 8005374:	68a1      	ldr	r1, [r4, #8]
 8005376:	4b09      	ldr	r3, [pc, #36]	; (800539c <cleanup_stdio+0x38>)
 8005378:	4299      	cmp	r1, r3
 800537a:	d002      	beq.n	8005382 <cleanup_stdio+0x1e>
 800537c:	4620      	mov	r0, r4
 800537e:	f000 fe29 	bl	8005fd4 <_fflush_r>
 8005382:	68e1      	ldr	r1, [r4, #12]
 8005384:	4b06      	ldr	r3, [pc, #24]	; (80053a0 <cleanup_stdio+0x3c>)
 8005386:	4299      	cmp	r1, r3
 8005388:	d004      	beq.n	8005394 <cleanup_stdio+0x30>
 800538a:	4620      	mov	r0, r4
 800538c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005390:	f000 be20 	b.w	8005fd4 <_fflush_r>
 8005394:	bd10      	pop	{r4, pc}
 8005396:	bf00      	nop
 8005398:	20000380 	.word	0x20000380
 800539c:	200003e8 	.word	0x200003e8
 80053a0:	20000450 	.word	0x20000450

080053a4 <global_stdio_init.part.0>:
 80053a4:	b510      	push	{r4, lr}
 80053a6:	4b0b      	ldr	r3, [pc, #44]	; (80053d4 <global_stdio_init.part.0+0x30>)
 80053a8:	4c0b      	ldr	r4, [pc, #44]	; (80053d8 <global_stdio_init.part.0+0x34>)
 80053aa:	4a0c      	ldr	r2, [pc, #48]	; (80053dc <global_stdio_init.part.0+0x38>)
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	4620      	mov	r0, r4
 80053b0:	2200      	movs	r2, #0
 80053b2:	2104      	movs	r1, #4
 80053b4:	f7ff ff94 	bl	80052e0 <std>
 80053b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80053bc:	2201      	movs	r2, #1
 80053be:	2109      	movs	r1, #9
 80053c0:	f7ff ff8e 	bl	80052e0 <std>
 80053c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80053c8:	2202      	movs	r2, #2
 80053ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053ce:	2112      	movs	r1, #18
 80053d0:	f7ff bf86 	b.w	80052e0 <std>
 80053d4:	200004b8 	.word	0x200004b8
 80053d8:	20000380 	.word	0x20000380
 80053dc:	0800534d 	.word	0x0800534d

080053e0 <__sfp_lock_acquire>:
 80053e0:	4801      	ldr	r0, [pc, #4]	; (80053e8 <__sfp_lock_acquire+0x8>)
 80053e2:	f000 b9a2 	b.w	800572a <__retarget_lock_acquire_recursive>
 80053e6:	bf00      	nop
 80053e8:	200004c1 	.word	0x200004c1

080053ec <__sfp_lock_release>:
 80053ec:	4801      	ldr	r0, [pc, #4]	; (80053f4 <__sfp_lock_release+0x8>)
 80053ee:	f000 b99d 	b.w	800572c <__retarget_lock_release_recursive>
 80053f2:	bf00      	nop
 80053f4:	200004c1 	.word	0x200004c1

080053f8 <__sinit>:
 80053f8:	b510      	push	{r4, lr}
 80053fa:	4604      	mov	r4, r0
 80053fc:	f7ff fff0 	bl	80053e0 <__sfp_lock_acquire>
 8005400:	6a23      	ldr	r3, [r4, #32]
 8005402:	b11b      	cbz	r3, 800540c <__sinit+0x14>
 8005404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005408:	f7ff bff0 	b.w	80053ec <__sfp_lock_release>
 800540c:	4b04      	ldr	r3, [pc, #16]	; (8005420 <__sinit+0x28>)
 800540e:	6223      	str	r3, [r4, #32]
 8005410:	4b04      	ldr	r3, [pc, #16]	; (8005424 <__sinit+0x2c>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1f5      	bne.n	8005404 <__sinit+0xc>
 8005418:	f7ff ffc4 	bl	80053a4 <global_stdio_init.part.0>
 800541c:	e7f2      	b.n	8005404 <__sinit+0xc>
 800541e:	bf00      	nop
 8005420:	08005365 	.word	0x08005365
 8005424:	200004b8 	.word	0x200004b8

08005428 <_fwalk_sglue>:
 8005428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800542c:	4607      	mov	r7, r0
 800542e:	4688      	mov	r8, r1
 8005430:	4614      	mov	r4, r2
 8005432:	2600      	movs	r6, #0
 8005434:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005438:	f1b9 0901 	subs.w	r9, r9, #1
 800543c:	d505      	bpl.n	800544a <_fwalk_sglue+0x22>
 800543e:	6824      	ldr	r4, [r4, #0]
 8005440:	2c00      	cmp	r4, #0
 8005442:	d1f7      	bne.n	8005434 <_fwalk_sglue+0xc>
 8005444:	4630      	mov	r0, r6
 8005446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800544a:	89ab      	ldrh	r3, [r5, #12]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d907      	bls.n	8005460 <_fwalk_sglue+0x38>
 8005450:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005454:	3301      	adds	r3, #1
 8005456:	d003      	beq.n	8005460 <_fwalk_sglue+0x38>
 8005458:	4629      	mov	r1, r5
 800545a:	4638      	mov	r0, r7
 800545c:	47c0      	blx	r8
 800545e:	4306      	orrs	r6, r0
 8005460:	3568      	adds	r5, #104	; 0x68
 8005462:	e7e9      	b.n	8005438 <_fwalk_sglue+0x10>

08005464 <iprintf>:
 8005464:	b40f      	push	{r0, r1, r2, r3}
 8005466:	b507      	push	{r0, r1, r2, lr}
 8005468:	4906      	ldr	r1, [pc, #24]	; (8005484 <iprintf+0x20>)
 800546a:	ab04      	add	r3, sp, #16
 800546c:	6808      	ldr	r0, [r1, #0]
 800546e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005472:	6881      	ldr	r1, [r0, #8]
 8005474:	9301      	str	r3, [sp, #4]
 8005476:	f000 fa7d 	bl	8005974 <_vfiprintf_r>
 800547a:	b003      	add	sp, #12
 800547c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005480:	b004      	add	sp, #16
 8005482:	4770      	bx	lr
 8005484:	20000064 	.word	0x20000064

08005488 <__sread>:
 8005488:	b510      	push	{r4, lr}
 800548a:	460c      	mov	r4, r1
 800548c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005490:	f000 f8fc 	bl	800568c <_read_r>
 8005494:	2800      	cmp	r0, #0
 8005496:	bfab      	itete	ge
 8005498:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800549a:	89a3      	ldrhlt	r3, [r4, #12]
 800549c:	181b      	addge	r3, r3, r0
 800549e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80054a2:	bfac      	ite	ge
 80054a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80054a6:	81a3      	strhlt	r3, [r4, #12]
 80054a8:	bd10      	pop	{r4, pc}

080054aa <__swrite>:
 80054aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054ae:	461f      	mov	r7, r3
 80054b0:	898b      	ldrh	r3, [r1, #12]
 80054b2:	05db      	lsls	r3, r3, #23
 80054b4:	4605      	mov	r5, r0
 80054b6:	460c      	mov	r4, r1
 80054b8:	4616      	mov	r6, r2
 80054ba:	d505      	bpl.n	80054c8 <__swrite+0x1e>
 80054bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054c0:	2302      	movs	r3, #2
 80054c2:	2200      	movs	r2, #0
 80054c4:	f000 f8d0 	bl	8005668 <_lseek_r>
 80054c8:	89a3      	ldrh	r3, [r4, #12]
 80054ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054d2:	81a3      	strh	r3, [r4, #12]
 80054d4:	4632      	mov	r2, r6
 80054d6:	463b      	mov	r3, r7
 80054d8:	4628      	mov	r0, r5
 80054da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054de:	f000 b8e7 	b.w	80056b0 <_write_r>

080054e2 <__sseek>:
 80054e2:	b510      	push	{r4, lr}
 80054e4:	460c      	mov	r4, r1
 80054e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ea:	f000 f8bd 	bl	8005668 <_lseek_r>
 80054ee:	1c43      	adds	r3, r0, #1
 80054f0:	89a3      	ldrh	r3, [r4, #12]
 80054f2:	bf15      	itete	ne
 80054f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80054f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054fe:	81a3      	strheq	r3, [r4, #12]
 8005500:	bf18      	it	ne
 8005502:	81a3      	strhne	r3, [r4, #12]
 8005504:	bd10      	pop	{r4, pc}

08005506 <__sclose>:
 8005506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800550a:	f000 b89d 	b.w	8005648 <_close_r>

0800550e <__swbuf_r>:
 800550e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005510:	460e      	mov	r6, r1
 8005512:	4614      	mov	r4, r2
 8005514:	4605      	mov	r5, r0
 8005516:	b118      	cbz	r0, 8005520 <__swbuf_r+0x12>
 8005518:	6a03      	ldr	r3, [r0, #32]
 800551a:	b90b      	cbnz	r3, 8005520 <__swbuf_r+0x12>
 800551c:	f7ff ff6c 	bl	80053f8 <__sinit>
 8005520:	69a3      	ldr	r3, [r4, #24]
 8005522:	60a3      	str	r3, [r4, #8]
 8005524:	89a3      	ldrh	r3, [r4, #12]
 8005526:	071a      	lsls	r2, r3, #28
 8005528:	d525      	bpl.n	8005576 <__swbuf_r+0x68>
 800552a:	6923      	ldr	r3, [r4, #16]
 800552c:	b31b      	cbz	r3, 8005576 <__swbuf_r+0x68>
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	6922      	ldr	r2, [r4, #16]
 8005532:	1a98      	subs	r0, r3, r2
 8005534:	6963      	ldr	r3, [r4, #20]
 8005536:	b2f6      	uxtb	r6, r6
 8005538:	4283      	cmp	r3, r0
 800553a:	4637      	mov	r7, r6
 800553c:	dc04      	bgt.n	8005548 <__swbuf_r+0x3a>
 800553e:	4621      	mov	r1, r4
 8005540:	4628      	mov	r0, r5
 8005542:	f000 fd47 	bl	8005fd4 <_fflush_r>
 8005546:	b9e0      	cbnz	r0, 8005582 <__swbuf_r+0x74>
 8005548:	68a3      	ldr	r3, [r4, #8]
 800554a:	3b01      	subs	r3, #1
 800554c:	60a3      	str	r3, [r4, #8]
 800554e:	6823      	ldr	r3, [r4, #0]
 8005550:	1c5a      	adds	r2, r3, #1
 8005552:	6022      	str	r2, [r4, #0]
 8005554:	701e      	strb	r6, [r3, #0]
 8005556:	6962      	ldr	r2, [r4, #20]
 8005558:	1c43      	adds	r3, r0, #1
 800555a:	429a      	cmp	r2, r3
 800555c:	d004      	beq.n	8005568 <__swbuf_r+0x5a>
 800555e:	89a3      	ldrh	r3, [r4, #12]
 8005560:	07db      	lsls	r3, r3, #31
 8005562:	d506      	bpl.n	8005572 <__swbuf_r+0x64>
 8005564:	2e0a      	cmp	r6, #10
 8005566:	d104      	bne.n	8005572 <__swbuf_r+0x64>
 8005568:	4621      	mov	r1, r4
 800556a:	4628      	mov	r0, r5
 800556c:	f000 fd32 	bl	8005fd4 <_fflush_r>
 8005570:	b938      	cbnz	r0, 8005582 <__swbuf_r+0x74>
 8005572:	4638      	mov	r0, r7
 8005574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005576:	4621      	mov	r1, r4
 8005578:	4628      	mov	r0, r5
 800557a:	f000 f805 	bl	8005588 <__swsetup_r>
 800557e:	2800      	cmp	r0, #0
 8005580:	d0d5      	beq.n	800552e <__swbuf_r+0x20>
 8005582:	f04f 37ff 	mov.w	r7, #4294967295
 8005586:	e7f4      	b.n	8005572 <__swbuf_r+0x64>

08005588 <__swsetup_r>:
 8005588:	b538      	push	{r3, r4, r5, lr}
 800558a:	4b2a      	ldr	r3, [pc, #168]	; (8005634 <__swsetup_r+0xac>)
 800558c:	4605      	mov	r5, r0
 800558e:	6818      	ldr	r0, [r3, #0]
 8005590:	460c      	mov	r4, r1
 8005592:	b118      	cbz	r0, 800559c <__swsetup_r+0x14>
 8005594:	6a03      	ldr	r3, [r0, #32]
 8005596:	b90b      	cbnz	r3, 800559c <__swsetup_r+0x14>
 8005598:	f7ff ff2e 	bl	80053f8 <__sinit>
 800559c:	89a3      	ldrh	r3, [r4, #12]
 800559e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055a2:	0718      	lsls	r0, r3, #28
 80055a4:	d422      	bmi.n	80055ec <__swsetup_r+0x64>
 80055a6:	06d9      	lsls	r1, r3, #27
 80055a8:	d407      	bmi.n	80055ba <__swsetup_r+0x32>
 80055aa:	2309      	movs	r3, #9
 80055ac:	602b      	str	r3, [r5, #0]
 80055ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80055b2:	81a3      	strh	r3, [r4, #12]
 80055b4:	f04f 30ff 	mov.w	r0, #4294967295
 80055b8:	e034      	b.n	8005624 <__swsetup_r+0x9c>
 80055ba:	0758      	lsls	r0, r3, #29
 80055bc:	d512      	bpl.n	80055e4 <__swsetup_r+0x5c>
 80055be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055c0:	b141      	cbz	r1, 80055d4 <__swsetup_r+0x4c>
 80055c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055c6:	4299      	cmp	r1, r3
 80055c8:	d002      	beq.n	80055d0 <__swsetup_r+0x48>
 80055ca:	4628      	mov	r0, r5
 80055cc:	f000 f8b0 	bl	8005730 <_free_r>
 80055d0:	2300      	movs	r3, #0
 80055d2:	6363      	str	r3, [r4, #52]	; 0x34
 80055d4:	89a3      	ldrh	r3, [r4, #12]
 80055d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80055da:	81a3      	strh	r3, [r4, #12]
 80055dc:	2300      	movs	r3, #0
 80055de:	6063      	str	r3, [r4, #4]
 80055e0:	6923      	ldr	r3, [r4, #16]
 80055e2:	6023      	str	r3, [r4, #0]
 80055e4:	89a3      	ldrh	r3, [r4, #12]
 80055e6:	f043 0308 	orr.w	r3, r3, #8
 80055ea:	81a3      	strh	r3, [r4, #12]
 80055ec:	6923      	ldr	r3, [r4, #16]
 80055ee:	b94b      	cbnz	r3, 8005604 <__swsetup_r+0x7c>
 80055f0:	89a3      	ldrh	r3, [r4, #12]
 80055f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055fa:	d003      	beq.n	8005604 <__swsetup_r+0x7c>
 80055fc:	4621      	mov	r1, r4
 80055fe:	4628      	mov	r0, r5
 8005600:	f000 fd36 	bl	8006070 <__smakebuf_r>
 8005604:	89a0      	ldrh	r0, [r4, #12]
 8005606:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800560a:	f010 0301 	ands.w	r3, r0, #1
 800560e:	d00a      	beq.n	8005626 <__swsetup_r+0x9e>
 8005610:	2300      	movs	r3, #0
 8005612:	60a3      	str	r3, [r4, #8]
 8005614:	6963      	ldr	r3, [r4, #20]
 8005616:	425b      	negs	r3, r3
 8005618:	61a3      	str	r3, [r4, #24]
 800561a:	6923      	ldr	r3, [r4, #16]
 800561c:	b943      	cbnz	r3, 8005630 <__swsetup_r+0xa8>
 800561e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005622:	d1c4      	bne.n	80055ae <__swsetup_r+0x26>
 8005624:	bd38      	pop	{r3, r4, r5, pc}
 8005626:	0781      	lsls	r1, r0, #30
 8005628:	bf58      	it	pl
 800562a:	6963      	ldrpl	r3, [r4, #20]
 800562c:	60a3      	str	r3, [r4, #8]
 800562e:	e7f4      	b.n	800561a <__swsetup_r+0x92>
 8005630:	2000      	movs	r0, #0
 8005632:	e7f7      	b.n	8005624 <__swsetup_r+0x9c>
 8005634:	20000064 	.word	0x20000064

08005638 <memset>:
 8005638:	4402      	add	r2, r0
 800563a:	4603      	mov	r3, r0
 800563c:	4293      	cmp	r3, r2
 800563e:	d100      	bne.n	8005642 <memset+0xa>
 8005640:	4770      	bx	lr
 8005642:	f803 1b01 	strb.w	r1, [r3], #1
 8005646:	e7f9      	b.n	800563c <memset+0x4>

08005648 <_close_r>:
 8005648:	b538      	push	{r3, r4, r5, lr}
 800564a:	4d06      	ldr	r5, [pc, #24]	; (8005664 <_close_r+0x1c>)
 800564c:	2300      	movs	r3, #0
 800564e:	4604      	mov	r4, r0
 8005650:	4608      	mov	r0, r1
 8005652:	602b      	str	r3, [r5, #0]
 8005654:	f7fb fe1f 	bl	8001296 <_close>
 8005658:	1c43      	adds	r3, r0, #1
 800565a:	d102      	bne.n	8005662 <_close_r+0x1a>
 800565c:	682b      	ldr	r3, [r5, #0]
 800565e:	b103      	cbz	r3, 8005662 <_close_r+0x1a>
 8005660:	6023      	str	r3, [r4, #0]
 8005662:	bd38      	pop	{r3, r4, r5, pc}
 8005664:	200004bc 	.word	0x200004bc

08005668 <_lseek_r>:
 8005668:	b538      	push	{r3, r4, r5, lr}
 800566a:	4d07      	ldr	r5, [pc, #28]	; (8005688 <_lseek_r+0x20>)
 800566c:	4604      	mov	r4, r0
 800566e:	4608      	mov	r0, r1
 8005670:	4611      	mov	r1, r2
 8005672:	2200      	movs	r2, #0
 8005674:	602a      	str	r2, [r5, #0]
 8005676:	461a      	mov	r2, r3
 8005678:	f7fb fe34 	bl	80012e4 <_lseek>
 800567c:	1c43      	adds	r3, r0, #1
 800567e:	d102      	bne.n	8005686 <_lseek_r+0x1e>
 8005680:	682b      	ldr	r3, [r5, #0]
 8005682:	b103      	cbz	r3, 8005686 <_lseek_r+0x1e>
 8005684:	6023      	str	r3, [r4, #0]
 8005686:	bd38      	pop	{r3, r4, r5, pc}
 8005688:	200004bc 	.word	0x200004bc

0800568c <_read_r>:
 800568c:	b538      	push	{r3, r4, r5, lr}
 800568e:	4d07      	ldr	r5, [pc, #28]	; (80056ac <_read_r+0x20>)
 8005690:	4604      	mov	r4, r0
 8005692:	4608      	mov	r0, r1
 8005694:	4611      	mov	r1, r2
 8005696:	2200      	movs	r2, #0
 8005698:	602a      	str	r2, [r5, #0]
 800569a:	461a      	mov	r2, r3
 800569c:	f7fb fdc2 	bl	8001224 <_read>
 80056a0:	1c43      	adds	r3, r0, #1
 80056a2:	d102      	bne.n	80056aa <_read_r+0x1e>
 80056a4:	682b      	ldr	r3, [r5, #0]
 80056a6:	b103      	cbz	r3, 80056aa <_read_r+0x1e>
 80056a8:	6023      	str	r3, [r4, #0]
 80056aa:	bd38      	pop	{r3, r4, r5, pc}
 80056ac:	200004bc 	.word	0x200004bc

080056b0 <_write_r>:
 80056b0:	b538      	push	{r3, r4, r5, lr}
 80056b2:	4d07      	ldr	r5, [pc, #28]	; (80056d0 <_write_r+0x20>)
 80056b4:	4604      	mov	r4, r0
 80056b6:	4608      	mov	r0, r1
 80056b8:	4611      	mov	r1, r2
 80056ba:	2200      	movs	r2, #0
 80056bc:	602a      	str	r2, [r5, #0]
 80056be:	461a      	mov	r2, r3
 80056c0:	f7fb fdcd 	bl	800125e <_write>
 80056c4:	1c43      	adds	r3, r0, #1
 80056c6:	d102      	bne.n	80056ce <_write_r+0x1e>
 80056c8:	682b      	ldr	r3, [r5, #0]
 80056ca:	b103      	cbz	r3, 80056ce <_write_r+0x1e>
 80056cc:	6023      	str	r3, [r4, #0]
 80056ce:	bd38      	pop	{r3, r4, r5, pc}
 80056d0:	200004bc 	.word	0x200004bc

080056d4 <__errno>:
 80056d4:	4b01      	ldr	r3, [pc, #4]	; (80056dc <__errno+0x8>)
 80056d6:	6818      	ldr	r0, [r3, #0]
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	20000064 	.word	0x20000064

080056e0 <__libc_init_array>:
 80056e0:	b570      	push	{r4, r5, r6, lr}
 80056e2:	4d0d      	ldr	r5, [pc, #52]	; (8005718 <__libc_init_array+0x38>)
 80056e4:	4c0d      	ldr	r4, [pc, #52]	; (800571c <__libc_init_array+0x3c>)
 80056e6:	1b64      	subs	r4, r4, r5
 80056e8:	10a4      	asrs	r4, r4, #2
 80056ea:	2600      	movs	r6, #0
 80056ec:	42a6      	cmp	r6, r4
 80056ee:	d109      	bne.n	8005704 <__libc_init_array+0x24>
 80056f0:	4d0b      	ldr	r5, [pc, #44]	; (8005720 <__libc_init_array+0x40>)
 80056f2:	4c0c      	ldr	r4, [pc, #48]	; (8005724 <__libc_init_array+0x44>)
 80056f4:	f000 fd2a 	bl	800614c <_init>
 80056f8:	1b64      	subs	r4, r4, r5
 80056fa:	10a4      	asrs	r4, r4, #2
 80056fc:	2600      	movs	r6, #0
 80056fe:	42a6      	cmp	r6, r4
 8005700:	d105      	bne.n	800570e <__libc_init_array+0x2e>
 8005702:	bd70      	pop	{r4, r5, r6, pc}
 8005704:	f855 3b04 	ldr.w	r3, [r5], #4
 8005708:	4798      	blx	r3
 800570a:	3601      	adds	r6, #1
 800570c:	e7ee      	b.n	80056ec <__libc_init_array+0xc>
 800570e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005712:	4798      	blx	r3
 8005714:	3601      	adds	r6, #1
 8005716:	e7f2      	b.n	80056fe <__libc_init_array+0x1e>
 8005718:	08006290 	.word	0x08006290
 800571c:	08006290 	.word	0x08006290
 8005720:	08006290 	.word	0x08006290
 8005724:	08006294 	.word	0x08006294

08005728 <__retarget_lock_init_recursive>:
 8005728:	4770      	bx	lr

0800572a <__retarget_lock_acquire_recursive>:
 800572a:	4770      	bx	lr

0800572c <__retarget_lock_release_recursive>:
 800572c:	4770      	bx	lr
	...

08005730 <_free_r>:
 8005730:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005732:	2900      	cmp	r1, #0
 8005734:	d044      	beq.n	80057c0 <_free_r+0x90>
 8005736:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800573a:	9001      	str	r0, [sp, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	f1a1 0404 	sub.w	r4, r1, #4
 8005742:	bfb8      	it	lt
 8005744:	18e4      	addlt	r4, r4, r3
 8005746:	f000 f8df 	bl	8005908 <__malloc_lock>
 800574a:	4a1e      	ldr	r2, [pc, #120]	; (80057c4 <_free_r+0x94>)
 800574c:	9801      	ldr	r0, [sp, #4]
 800574e:	6813      	ldr	r3, [r2, #0]
 8005750:	b933      	cbnz	r3, 8005760 <_free_r+0x30>
 8005752:	6063      	str	r3, [r4, #4]
 8005754:	6014      	str	r4, [r2, #0]
 8005756:	b003      	add	sp, #12
 8005758:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800575c:	f000 b8da 	b.w	8005914 <__malloc_unlock>
 8005760:	42a3      	cmp	r3, r4
 8005762:	d908      	bls.n	8005776 <_free_r+0x46>
 8005764:	6825      	ldr	r5, [r4, #0]
 8005766:	1961      	adds	r1, r4, r5
 8005768:	428b      	cmp	r3, r1
 800576a:	bf01      	itttt	eq
 800576c:	6819      	ldreq	r1, [r3, #0]
 800576e:	685b      	ldreq	r3, [r3, #4]
 8005770:	1949      	addeq	r1, r1, r5
 8005772:	6021      	streq	r1, [r4, #0]
 8005774:	e7ed      	b.n	8005752 <_free_r+0x22>
 8005776:	461a      	mov	r2, r3
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	b10b      	cbz	r3, 8005780 <_free_r+0x50>
 800577c:	42a3      	cmp	r3, r4
 800577e:	d9fa      	bls.n	8005776 <_free_r+0x46>
 8005780:	6811      	ldr	r1, [r2, #0]
 8005782:	1855      	adds	r5, r2, r1
 8005784:	42a5      	cmp	r5, r4
 8005786:	d10b      	bne.n	80057a0 <_free_r+0x70>
 8005788:	6824      	ldr	r4, [r4, #0]
 800578a:	4421      	add	r1, r4
 800578c:	1854      	adds	r4, r2, r1
 800578e:	42a3      	cmp	r3, r4
 8005790:	6011      	str	r1, [r2, #0]
 8005792:	d1e0      	bne.n	8005756 <_free_r+0x26>
 8005794:	681c      	ldr	r4, [r3, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	6053      	str	r3, [r2, #4]
 800579a:	440c      	add	r4, r1
 800579c:	6014      	str	r4, [r2, #0]
 800579e:	e7da      	b.n	8005756 <_free_r+0x26>
 80057a0:	d902      	bls.n	80057a8 <_free_r+0x78>
 80057a2:	230c      	movs	r3, #12
 80057a4:	6003      	str	r3, [r0, #0]
 80057a6:	e7d6      	b.n	8005756 <_free_r+0x26>
 80057a8:	6825      	ldr	r5, [r4, #0]
 80057aa:	1961      	adds	r1, r4, r5
 80057ac:	428b      	cmp	r3, r1
 80057ae:	bf04      	itt	eq
 80057b0:	6819      	ldreq	r1, [r3, #0]
 80057b2:	685b      	ldreq	r3, [r3, #4]
 80057b4:	6063      	str	r3, [r4, #4]
 80057b6:	bf04      	itt	eq
 80057b8:	1949      	addeq	r1, r1, r5
 80057ba:	6021      	streq	r1, [r4, #0]
 80057bc:	6054      	str	r4, [r2, #4]
 80057be:	e7ca      	b.n	8005756 <_free_r+0x26>
 80057c0:	b003      	add	sp, #12
 80057c2:	bd30      	pop	{r4, r5, pc}
 80057c4:	200004c4 	.word	0x200004c4

080057c8 <sbrk_aligned>:
 80057c8:	b570      	push	{r4, r5, r6, lr}
 80057ca:	4e0e      	ldr	r6, [pc, #56]	; (8005804 <sbrk_aligned+0x3c>)
 80057cc:	460c      	mov	r4, r1
 80057ce:	6831      	ldr	r1, [r6, #0]
 80057d0:	4605      	mov	r5, r0
 80057d2:	b911      	cbnz	r1, 80057da <sbrk_aligned+0x12>
 80057d4:	f000 fcaa 	bl	800612c <_sbrk_r>
 80057d8:	6030      	str	r0, [r6, #0]
 80057da:	4621      	mov	r1, r4
 80057dc:	4628      	mov	r0, r5
 80057de:	f000 fca5 	bl	800612c <_sbrk_r>
 80057e2:	1c43      	adds	r3, r0, #1
 80057e4:	d00a      	beq.n	80057fc <sbrk_aligned+0x34>
 80057e6:	1cc4      	adds	r4, r0, #3
 80057e8:	f024 0403 	bic.w	r4, r4, #3
 80057ec:	42a0      	cmp	r0, r4
 80057ee:	d007      	beq.n	8005800 <sbrk_aligned+0x38>
 80057f0:	1a21      	subs	r1, r4, r0
 80057f2:	4628      	mov	r0, r5
 80057f4:	f000 fc9a 	bl	800612c <_sbrk_r>
 80057f8:	3001      	adds	r0, #1
 80057fa:	d101      	bne.n	8005800 <sbrk_aligned+0x38>
 80057fc:	f04f 34ff 	mov.w	r4, #4294967295
 8005800:	4620      	mov	r0, r4
 8005802:	bd70      	pop	{r4, r5, r6, pc}
 8005804:	200004c8 	.word	0x200004c8

08005808 <_malloc_r>:
 8005808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800580c:	1ccd      	adds	r5, r1, #3
 800580e:	f025 0503 	bic.w	r5, r5, #3
 8005812:	3508      	adds	r5, #8
 8005814:	2d0c      	cmp	r5, #12
 8005816:	bf38      	it	cc
 8005818:	250c      	movcc	r5, #12
 800581a:	2d00      	cmp	r5, #0
 800581c:	4607      	mov	r7, r0
 800581e:	db01      	blt.n	8005824 <_malloc_r+0x1c>
 8005820:	42a9      	cmp	r1, r5
 8005822:	d905      	bls.n	8005830 <_malloc_r+0x28>
 8005824:	230c      	movs	r3, #12
 8005826:	603b      	str	r3, [r7, #0]
 8005828:	2600      	movs	r6, #0
 800582a:	4630      	mov	r0, r6
 800582c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005830:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005904 <_malloc_r+0xfc>
 8005834:	f000 f868 	bl	8005908 <__malloc_lock>
 8005838:	f8d8 3000 	ldr.w	r3, [r8]
 800583c:	461c      	mov	r4, r3
 800583e:	bb5c      	cbnz	r4, 8005898 <_malloc_r+0x90>
 8005840:	4629      	mov	r1, r5
 8005842:	4638      	mov	r0, r7
 8005844:	f7ff ffc0 	bl	80057c8 <sbrk_aligned>
 8005848:	1c43      	adds	r3, r0, #1
 800584a:	4604      	mov	r4, r0
 800584c:	d155      	bne.n	80058fa <_malloc_r+0xf2>
 800584e:	f8d8 4000 	ldr.w	r4, [r8]
 8005852:	4626      	mov	r6, r4
 8005854:	2e00      	cmp	r6, #0
 8005856:	d145      	bne.n	80058e4 <_malloc_r+0xdc>
 8005858:	2c00      	cmp	r4, #0
 800585a:	d048      	beq.n	80058ee <_malloc_r+0xe6>
 800585c:	6823      	ldr	r3, [r4, #0]
 800585e:	4631      	mov	r1, r6
 8005860:	4638      	mov	r0, r7
 8005862:	eb04 0903 	add.w	r9, r4, r3
 8005866:	f000 fc61 	bl	800612c <_sbrk_r>
 800586a:	4581      	cmp	r9, r0
 800586c:	d13f      	bne.n	80058ee <_malloc_r+0xe6>
 800586e:	6821      	ldr	r1, [r4, #0]
 8005870:	1a6d      	subs	r5, r5, r1
 8005872:	4629      	mov	r1, r5
 8005874:	4638      	mov	r0, r7
 8005876:	f7ff ffa7 	bl	80057c8 <sbrk_aligned>
 800587a:	3001      	adds	r0, #1
 800587c:	d037      	beq.n	80058ee <_malloc_r+0xe6>
 800587e:	6823      	ldr	r3, [r4, #0]
 8005880:	442b      	add	r3, r5
 8005882:	6023      	str	r3, [r4, #0]
 8005884:	f8d8 3000 	ldr.w	r3, [r8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d038      	beq.n	80058fe <_malloc_r+0xf6>
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	42a2      	cmp	r2, r4
 8005890:	d12b      	bne.n	80058ea <_malloc_r+0xe2>
 8005892:	2200      	movs	r2, #0
 8005894:	605a      	str	r2, [r3, #4]
 8005896:	e00f      	b.n	80058b8 <_malloc_r+0xb0>
 8005898:	6822      	ldr	r2, [r4, #0]
 800589a:	1b52      	subs	r2, r2, r5
 800589c:	d41f      	bmi.n	80058de <_malloc_r+0xd6>
 800589e:	2a0b      	cmp	r2, #11
 80058a0:	d917      	bls.n	80058d2 <_malloc_r+0xca>
 80058a2:	1961      	adds	r1, r4, r5
 80058a4:	42a3      	cmp	r3, r4
 80058a6:	6025      	str	r5, [r4, #0]
 80058a8:	bf18      	it	ne
 80058aa:	6059      	strne	r1, [r3, #4]
 80058ac:	6863      	ldr	r3, [r4, #4]
 80058ae:	bf08      	it	eq
 80058b0:	f8c8 1000 	streq.w	r1, [r8]
 80058b4:	5162      	str	r2, [r4, r5]
 80058b6:	604b      	str	r3, [r1, #4]
 80058b8:	4638      	mov	r0, r7
 80058ba:	f104 060b 	add.w	r6, r4, #11
 80058be:	f000 f829 	bl	8005914 <__malloc_unlock>
 80058c2:	f026 0607 	bic.w	r6, r6, #7
 80058c6:	1d23      	adds	r3, r4, #4
 80058c8:	1af2      	subs	r2, r6, r3
 80058ca:	d0ae      	beq.n	800582a <_malloc_r+0x22>
 80058cc:	1b9b      	subs	r3, r3, r6
 80058ce:	50a3      	str	r3, [r4, r2]
 80058d0:	e7ab      	b.n	800582a <_malloc_r+0x22>
 80058d2:	42a3      	cmp	r3, r4
 80058d4:	6862      	ldr	r2, [r4, #4]
 80058d6:	d1dd      	bne.n	8005894 <_malloc_r+0x8c>
 80058d8:	f8c8 2000 	str.w	r2, [r8]
 80058dc:	e7ec      	b.n	80058b8 <_malloc_r+0xb0>
 80058de:	4623      	mov	r3, r4
 80058e0:	6864      	ldr	r4, [r4, #4]
 80058e2:	e7ac      	b.n	800583e <_malloc_r+0x36>
 80058e4:	4634      	mov	r4, r6
 80058e6:	6876      	ldr	r6, [r6, #4]
 80058e8:	e7b4      	b.n	8005854 <_malloc_r+0x4c>
 80058ea:	4613      	mov	r3, r2
 80058ec:	e7cc      	b.n	8005888 <_malloc_r+0x80>
 80058ee:	230c      	movs	r3, #12
 80058f0:	603b      	str	r3, [r7, #0]
 80058f2:	4638      	mov	r0, r7
 80058f4:	f000 f80e 	bl	8005914 <__malloc_unlock>
 80058f8:	e797      	b.n	800582a <_malloc_r+0x22>
 80058fa:	6025      	str	r5, [r4, #0]
 80058fc:	e7dc      	b.n	80058b8 <_malloc_r+0xb0>
 80058fe:	605b      	str	r3, [r3, #4]
 8005900:	deff      	udf	#255	; 0xff
 8005902:	bf00      	nop
 8005904:	200004c4 	.word	0x200004c4

08005908 <__malloc_lock>:
 8005908:	4801      	ldr	r0, [pc, #4]	; (8005910 <__malloc_lock+0x8>)
 800590a:	f7ff bf0e 	b.w	800572a <__retarget_lock_acquire_recursive>
 800590e:	bf00      	nop
 8005910:	200004c0 	.word	0x200004c0

08005914 <__malloc_unlock>:
 8005914:	4801      	ldr	r0, [pc, #4]	; (800591c <__malloc_unlock+0x8>)
 8005916:	f7ff bf09 	b.w	800572c <__retarget_lock_release_recursive>
 800591a:	bf00      	nop
 800591c:	200004c0 	.word	0x200004c0

08005920 <__sfputc_r>:
 8005920:	6893      	ldr	r3, [r2, #8]
 8005922:	3b01      	subs	r3, #1
 8005924:	2b00      	cmp	r3, #0
 8005926:	b410      	push	{r4}
 8005928:	6093      	str	r3, [r2, #8]
 800592a:	da08      	bge.n	800593e <__sfputc_r+0x1e>
 800592c:	6994      	ldr	r4, [r2, #24]
 800592e:	42a3      	cmp	r3, r4
 8005930:	db01      	blt.n	8005936 <__sfputc_r+0x16>
 8005932:	290a      	cmp	r1, #10
 8005934:	d103      	bne.n	800593e <__sfputc_r+0x1e>
 8005936:	f85d 4b04 	ldr.w	r4, [sp], #4
 800593a:	f7ff bde8 	b.w	800550e <__swbuf_r>
 800593e:	6813      	ldr	r3, [r2, #0]
 8005940:	1c58      	adds	r0, r3, #1
 8005942:	6010      	str	r0, [r2, #0]
 8005944:	7019      	strb	r1, [r3, #0]
 8005946:	4608      	mov	r0, r1
 8005948:	f85d 4b04 	ldr.w	r4, [sp], #4
 800594c:	4770      	bx	lr

0800594e <__sfputs_r>:
 800594e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005950:	4606      	mov	r6, r0
 8005952:	460f      	mov	r7, r1
 8005954:	4614      	mov	r4, r2
 8005956:	18d5      	adds	r5, r2, r3
 8005958:	42ac      	cmp	r4, r5
 800595a:	d101      	bne.n	8005960 <__sfputs_r+0x12>
 800595c:	2000      	movs	r0, #0
 800595e:	e007      	b.n	8005970 <__sfputs_r+0x22>
 8005960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005964:	463a      	mov	r2, r7
 8005966:	4630      	mov	r0, r6
 8005968:	f7ff ffda 	bl	8005920 <__sfputc_r>
 800596c:	1c43      	adds	r3, r0, #1
 800596e:	d1f3      	bne.n	8005958 <__sfputs_r+0xa>
 8005970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005974 <_vfiprintf_r>:
 8005974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005978:	460d      	mov	r5, r1
 800597a:	b09d      	sub	sp, #116	; 0x74
 800597c:	4614      	mov	r4, r2
 800597e:	4698      	mov	r8, r3
 8005980:	4606      	mov	r6, r0
 8005982:	b118      	cbz	r0, 800598c <_vfiprintf_r+0x18>
 8005984:	6a03      	ldr	r3, [r0, #32]
 8005986:	b90b      	cbnz	r3, 800598c <_vfiprintf_r+0x18>
 8005988:	f7ff fd36 	bl	80053f8 <__sinit>
 800598c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800598e:	07d9      	lsls	r1, r3, #31
 8005990:	d405      	bmi.n	800599e <_vfiprintf_r+0x2a>
 8005992:	89ab      	ldrh	r3, [r5, #12]
 8005994:	059a      	lsls	r2, r3, #22
 8005996:	d402      	bmi.n	800599e <_vfiprintf_r+0x2a>
 8005998:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800599a:	f7ff fec6 	bl	800572a <__retarget_lock_acquire_recursive>
 800599e:	89ab      	ldrh	r3, [r5, #12]
 80059a0:	071b      	lsls	r3, r3, #28
 80059a2:	d501      	bpl.n	80059a8 <_vfiprintf_r+0x34>
 80059a4:	692b      	ldr	r3, [r5, #16]
 80059a6:	b99b      	cbnz	r3, 80059d0 <_vfiprintf_r+0x5c>
 80059a8:	4629      	mov	r1, r5
 80059aa:	4630      	mov	r0, r6
 80059ac:	f7ff fdec 	bl	8005588 <__swsetup_r>
 80059b0:	b170      	cbz	r0, 80059d0 <_vfiprintf_r+0x5c>
 80059b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059b4:	07dc      	lsls	r4, r3, #31
 80059b6:	d504      	bpl.n	80059c2 <_vfiprintf_r+0x4e>
 80059b8:	f04f 30ff 	mov.w	r0, #4294967295
 80059bc:	b01d      	add	sp, #116	; 0x74
 80059be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059c2:	89ab      	ldrh	r3, [r5, #12]
 80059c4:	0598      	lsls	r0, r3, #22
 80059c6:	d4f7      	bmi.n	80059b8 <_vfiprintf_r+0x44>
 80059c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059ca:	f7ff feaf 	bl	800572c <__retarget_lock_release_recursive>
 80059ce:	e7f3      	b.n	80059b8 <_vfiprintf_r+0x44>
 80059d0:	2300      	movs	r3, #0
 80059d2:	9309      	str	r3, [sp, #36]	; 0x24
 80059d4:	2320      	movs	r3, #32
 80059d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059da:	f8cd 800c 	str.w	r8, [sp, #12]
 80059de:	2330      	movs	r3, #48	; 0x30
 80059e0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005b94 <_vfiprintf_r+0x220>
 80059e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059e8:	f04f 0901 	mov.w	r9, #1
 80059ec:	4623      	mov	r3, r4
 80059ee:	469a      	mov	sl, r3
 80059f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059f4:	b10a      	cbz	r2, 80059fa <_vfiprintf_r+0x86>
 80059f6:	2a25      	cmp	r2, #37	; 0x25
 80059f8:	d1f9      	bne.n	80059ee <_vfiprintf_r+0x7a>
 80059fa:	ebba 0b04 	subs.w	fp, sl, r4
 80059fe:	d00b      	beq.n	8005a18 <_vfiprintf_r+0xa4>
 8005a00:	465b      	mov	r3, fp
 8005a02:	4622      	mov	r2, r4
 8005a04:	4629      	mov	r1, r5
 8005a06:	4630      	mov	r0, r6
 8005a08:	f7ff ffa1 	bl	800594e <__sfputs_r>
 8005a0c:	3001      	adds	r0, #1
 8005a0e:	f000 80a9 	beq.w	8005b64 <_vfiprintf_r+0x1f0>
 8005a12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a14:	445a      	add	r2, fp
 8005a16:	9209      	str	r2, [sp, #36]	; 0x24
 8005a18:	f89a 3000 	ldrb.w	r3, [sl]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 80a1 	beq.w	8005b64 <_vfiprintf_r+0x1f0>
 8005a22:	2300      	movs	r3, #0
 8005a24:	f04f 32ff 	mov.w	r2, #4294967295
 8005a28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a2c:	f10a 0a01 	add.w	sl, sl, #1
 8005a30:	9304      	str	r3, [sp, #16]
 8005a32:	9307      	str	r3, [sp, #28]
 8005a34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a38:	931a      	str	r3, [sp, #104]	; 0x68
 8005a3a:	4654      	mov	r4, sl
 8005a3c:	2205      	movs	r2, #5
 8005a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a42:	4854      	ldr	r0, [pc, #336]	; (8005b94 <_vfiprintf_r+0x220>)
 8005a44:	f7fa fbc4 	bl	80001d0 <memchr>
 8005a48:	9a04      	ldr	r2, [sp, #16]
 8005a4a:	b9d8      	cbnz	r0, 8005a84 <_vfiprintf_r+0x110>
 8005a4c:	06d1      	lsls	r1, r2, #27
 8005a4e:	bf44      	itt	mi
 8005a50:	2320      	movmi	r3, #32
 8005a52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a56:	0713      	lsls	r3, r2, #28
 8005a58:	bf44      	itt	mi
 8005a5a:	232b      	movmi	r3, #43	; 0x2b
 8005a5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a60:	f89a 3000 	ldrb.w	r3, [sl]
 8005a64:	2b2a      	cmp	r3, #42	; 0x2a
 8005a66:	d015      	beq.n	8005a94 <_vfiprintf_r+0x120>
 8005a68:	9a07      	ldr	r2, [sp, #28]
 8005a6a:	4654      	mov	r4, sl
 8005a6c:	2000      	movs	r0, #0
 8005a6e:	f04f 0c0a 	mov.w	ip, #10
 8005a72:	4621      	mov	r1, r4
 8005a74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a78:	3b30      	subs	r3, #48	; 0x30
 8005a7a:	2b09      	cmp	r3, #9
 8005a7c:	d94d      	bls.n	8005b1a <_vfiprintf_r+0x1a6>
 8005a7e:	b1b0      	cbz	r0, 8005aae <_vfiprintf_r+0x13a>
 8005a80:	9207      	str	r2, [sp, #28]
 8005a82:	e014      	b.n	8005aae <_vfiprintf_r+0x13a>
 8005a84:	eba0 0308 	sub.w	r3, r0, r8
 8005a88:	fa09 f303 	lsl.w	r3, r9, r3
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	9304      	str	r3, [sp, #16]
 8005a90:	46a2      	mov	sl, r4
 8005a92:	e7d2      	b.n	8005a3a <_vfiprintf_r+0xc6>
 8005a94:	9b03      	ldr	r3, [sp, #12]
 8005a96:	1d19      	adds	r1, r3, #4
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	9103      	str	r1, [sp, #12]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	bfbb      	ittet	lt
 8005aa0:	425b      	neglt	r3, r3
 8005aa2:	f042 0202 	orrlt.w	r2, r2, #2
 8005aa6:	9307      	strge	r3, [sp, #28]
 8005aa8:	9307      	strlt	r3, [sp, #28]
 8005aaa:	bfb8      	it	lt
 8005aac:	9204      	strlt	r2, [sp, #16]
 8005aae:	7823      	ldrb	r3, [r4, #0]
 8005ab0:	2b2e      	cmp	r3, #46	; 0x2e
 8005ab2:	d10c      	bne.n	8005ace <_vfiprintf_r+0x15a>
 8005ab4:	7863      	ldrb	r3, [r4, #1]
 8005ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ab8:	d134      	bne.n	8005b24 <_vfiprintf_r+0x1b0>
 8005aba:	9b03      	ldr	r3, [sp, #12]
 8005abc:	1d1a      	adds	r2, r3, #4
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	9203      	str	r2, [sp, #12]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	bfb8      	it	lt
 8005ac6:	f04f 33ff 	movlt.w	r3, #4294967295
 8005aca:	3402      	adds	r4, #2
 8005acc:	9305      	str	r3, [sp, #20]
 8005ace:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005ba4 <_vfiprintf_r+0x230>
 8005ad2:	7821      	ldrb	r1, [r4, #0]
 8005ad4:	2203      	movs	r2, #3
 8005ad6:	4650      	mov	r0, sl
 8005ad8:	f7fa fb7a 	bl	80001d0 <memchr>
 8005adc:	b138      	cbz	r0, 8005aee <_vfiprintf_r+0x17a>
 8005ade:	9b04      	ldr	r3, [sp, #16]
 8005ae0:	eba0 000a 	sub.w	r0, r0, sl
 8005ae4:	2240      	movs	r2, #64	; 0x40
 8005ae6:	4082      	lsls	r2, r0
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	3401      	adds	r4, #1
 8005aec:	9304      	str	r3, [sp, #16]
 8005aee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005af2:	4829      	ldr	r0, [pc, #164]	; (8005b98 <_vfiprintf_r+0x224>)
 8005af4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005af8:	2206      	movs	r2, #6
 8005afa:	f7fa fb69 	bl	80001d0 <memchr>
 8005afe:	2800      	cmp	r0, #0
 8005b00:	d03f      	beq.n	8005b82 <_vfiprintf_r+0x20e>
 8005b02:	4b26      	ldr	r3, [pc, #152]	; (8005b9c <_vfiprintf_r+0x228>)
 8005b04:	bb1b      	cbnz	r3, 8005b4e <_vfiprintf_r+0x1da>
 8005b06:	9b03      	ldr	r3, [sp, #12]
 8005b08:	3307      	adds	r3, #7
 8005b0a:	f023 0307 	bic.w	r3, r3, #7
 8005b0e:	3308      	adds	r3, #8
 8005b10:	9303      	str	r3, [sp, #12]
 8005b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b14:	443b      	add	r3, r7
 8005b16:	9309      	str	r3, [sp, #36]	; 0x24
 8005b18:	e768      	b.n	80059ec <_vfiprintf_r+0x78>
 8005b1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b1e:	460c      	mov	r4, r1
 8005b20:	2001      	movs	r0, #1
 8005b22:	e7a6      	b.n	8005a72 <_vfiprintf_r+0xfe>
 8005b24:	2300      	movs	r3, #0
 8005b26:	3401      	adds	r4, #1
 8005b28:	9305      	str	r3, [sp, #20]
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	f04f 0c0a 	mov.w	ip, #10
 8005b30:	4620      	mov	r0, r4
 8005b32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b36:	3a30      	subs	r2, #48	; 0x30
 8005b38:	2a09      	cmp	r2, #9
 8005b3a:	d903      	bls.n	8005b44 <_vfiprintf_r+0x1d0>
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d0c6      	beq.n	8005ace <_vfiprintf_r+0x15a>
 8005b40:	9105      	str	r1, [sp, #20]
 8005b42:	e7c4      	b.n	8005ace <_vfiprintf_r+0x15a>
 8005b44:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b48:	4604      	mov	r4, r0
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e7f0      	b.n	8005b30 <_vfiprintf_r+0x1bc>
 8005b4e:	ab03      	add	r3, sp, #12
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	462a      	mov	r2, r5
 8005b54:	4b12      	ldr	r3, [pc, #72]	; (8005ba0 <_vfiprintf_r+0x22c>)
 8005b56:	a904      	add	r1, sp, #16
 8005b58:	4630      	mov	r0, r6
 8005b5a:	f3af 8000 	nop.w
 8005b5e:	4607      	mov	r7, r0
 8005b60:	1c78      	adds	r0, r7, #1
 8005b62:	d1d6      	bne.n	8005b12 <_vfiprintf_r+0x19e>
 8005b64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b66:	07d9      	lsls	r1, r3, #31
 8005b68:	d405      	bmi.n	8005b76 <_vfiprintf_r+0x202>
 8005b6a:	89ab      	ldrh	r3, [r5, #12]
 8005b6c:	059a      	lsls	r2, r3, #22
 8005b6e:	d402      	bmi.n	8005b76 <_vfiprintf_r+0x202>
 8005b70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b72:	f7ff fddb 	bl	800572c <__retarget_lock_release_recursive>
 8005b76:	89ab      	ldrh	r3, [r5, #12]
 8005b78:	065b      	lsls	r3, r3, #25
 8005b7a:	f53f af1d 	bmi.w	80059b8 <_vfiprintf_r+0x44>
 8005b7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b80:	e71c      	b.n	80059bc <_vfiprintf_r+0x48>
 8005b82:	ab03      	add	r3, sp, #12
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	462a      	mov	r2, r5
 8005b88:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <_vfiprintf_r+0x22c>)
 8005b8a:	a904      	add	r1, sp, #16
 8005b8c:	4630      	mov	r0, r6
 8005b8e:	f000 f879 	bl	8005c84 <_printf_i>
 8005b92:	e7e4      	b.n	8005b5e <_vfiprintf_r+0x1ea>
 8005b94:	0800625c 	.word	0x0800625c
 8005b98:	08006266 	.word	0x08006266
 8005b9c:	00000000 	.word	0x00000000
 8005ba0:	0800594f 	.word	0x0800594f
 8005ba4:	08006262 	.word	0x08006262

08005ba8 <_printf_common>:
 8005ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bac:	4616      	mov	r6, r2
 8005bae:	4699      	mov	r9, r3
 8005bb0:	688a      	ldr	r2, [r1, #8]
 8005bb2:	690b      	ldr	r3, [r1, #16]
 8005bb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	bfb8      	it	lt
 8005bbc:	4613      	movlt	r3, r2
 8005bbe:	6033      	str	r3, [r6, #0]
 8005bc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bc4:	4607      	mov	r7, r0
 8005bc6:	460c      	mov	r4, r1
 8005bc8:	b10a      	cbz	r2, 8005bce <_printf_common+0x26>
 8005bca:	3301      	adds	r3, #1
 8005bcc:	6033      	str	r3, [r6, #0]
 8005bce:	6823      	ldr	r3, [r4, #0]
 8005bd0:	0699      	lsls	r1, r3, #26
 8005bd2:	bf42      	ittt	mi
 8005bd4:	6833      	ldrmi	r3, [r6, #0]
 8005bd6:	3302      	addmi	r3, #2
 8005bd8:	6033      	strmi	r3, [r6, #0]
 8005bda:	6825      	ldr	r5, [r4, #0]
 8005bdc:	f015 0506 	ands.w	r5, r5, #6
 8005be0:	d106      	bne.n	8005bf0 <_printf_common+0x48>
 8005be2:	f104 0a19 	add.w	sl, r4, #25
 8005be6:	68e3      	ldr	r3, [r4, #12]
 8005be8:	6832      	ldr	r2, [r6, #0]
 8005bea:	1a9b      	subs	r3, r3, r2
 8005bec:	42ab      	cmp	r3, r5
 8005bee:	dc26      	bgt.n	8005c3e <_printf_common+0x96>
 8005bf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bf4:	1e13      	subs	r3, r2, #0
 8005bf6:	6822      	ldr	r2, [r4, #0]
 8005bf8:	bf18      	it	ne
 8005bfa:	2301      	movne	r3, #1
 8005bfc:	0692      	lsls	r2, r2, #26
 8005bfe:	d42b      	bmi.n	8005c58 <_printf_common+0xb0>
 8005c00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c04:	4649      	mov	r1, r9
 8005c06:	4638      	mov	r0, r7
 8005c08:	47c0      	blx	r8
 8005c0a:	3001      	adds	r0, #1
 8005c0c:	d01e      	beq.n	8005c4c <_printf_common+0xa4>
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	6922      	ldr	r2, [r4, #16]
 8005c12:	f003 0306 	and.w	r3, r3, #6
 8005c16:	2b04      	cmp	r3, #4
 8005c18:	bf02      	ittt	eq
 8005c1a:	68e5      	ldreq	r5, [r4, #12]
 8005c1c:	6833      	ldreq	r3, [r6, #0]
 8005c1e:	1aed      	subeq	r5, r5, r3
 8005c20:	68a3      	ldr	r3, [r4, #8]
 8005c22:	bf0c      	ite	eq
 8005c24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c28:	2500      	movne	r5, #0
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	bfc4      	itt	gt
 8005c2e:	1a9b      	subgt	r3, r3, r2
 8005c30:	18ed      	addgt	r5, r5, r3
 8005c32:	2600      	movs	r6, #0
 8005c34:	341a      	adds	r4, #26
 8005c36:	42b5      	cmp	r5, r6
 8005c38:	d11a      	bne.n	8005c70 <_printf_common+0xc8>
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	e008      	b.n	8005c50 <_printf_common+0xa8>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	4652      	mov	r2, sl
 8005c42:	4649      	mov	r1, r9
 8005c44:	4638      	mov	r0, r7
 8005c46:	47c0      	blx	r8
 8005c48:	3001      	adds	r0, #1
 8005c4a:	d103      	bne.n	8005c54 <_printf_common+0xac>
 8005c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c54:	3501      	adds	r5, #1
 8005c56:	e7c6      	b.n	8005be6 <_printf_common+0x3e>
 8005c58:	18e1      	adds	r1, r4, r3
 8005c5a:	1c5a      	adds	r2, r3, #1
 8005c5c:	2030      	movs	r0, #48	; 0x30
 8005c5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c62:	4422      	add	r2, r4
 8005c64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c6c:	3302      	adds	r3, #2
 8005c6e:	e7c7      	b.n	8005c00 <_printf_common+0x58>
 8005c70:	2301      	movs	r3, #1
 8005c72:	4622      	mov	r2, r4
 8005c74:	4649      	mov	r1, r9
 8005c76:	4638      	mov	r0, r7
 8005c78:	47c0      	blx	r8
 8005c7a:	3001      	adds	r0, #1
 8005c7c:	d0e6      	beq.n	8005c4c <_printf_common+0xa4>
 8005c7e:	3601      	adds	r6, #1
 8005c80:	e7d9      	b.n	8005c36 <_printf_common+0x8e>
	...

08005c84 <_printf_i>:
 8005c84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c88:	7e0f      	ldrb	r7, [r1, #24]
 8005c8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c8c:	2f78      	cmp	r7, #120	; 0x78
 8005c8e:	4691      	mov	r9, r2
 8005c90:	4680      	mov	r8, r0
 8005c92:	460c      	mov	r4, r1
 8005c94:	469a      	mov	sl, r3
 8005c96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c9a:	d807      	bhi.n	8005cac <_printf_i+0x28>
 8005c9c:	2f62      	cmp	r7, #98	; 0x62
 8005c9e:	d80a      	bhi.n	8005cb6 <_printf_i+0x32>
 8005ca0:	2f00      	cmp	r7, #0
 8005ca2:	f000 80d4 	beq.w	8005e4e <_printf_i+0x1ca>
 8005ca6:	2f58      	cmp	r7, #88	; 0x58
 8005ca8:	f000 80c0 	beq.w	8005e2c <_printf_i+0x1a8>
 8005cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cb4:	e03a      	b.n	8005d2c <_printf_i+0xa8>
 8005cb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cba:	2b15      	cmp	r3, #21
 8005cbc:	d8f6      	bhi.n	8005cac <_printf_i+0x28>
 8005cbe:	a101      	add	r1, pc, #4	; (adr r1, 8005cc4 <_printf_i+0x40>)
 8005cc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cc4:	08005d1d 	.word	0x08005d1d
 8005cc8:	08005d31 	.word	0x08005d31
 8005ccc:	08005cad 	.word	0x08005cad
 8005cd0:	08005cad 	.word	0x08005cad
 8005cd4:	08005cad 	.word	0x08005cad
 8005cd8:	08005cad 	.word	0x08005cad
 8005cdc:	08005d31 	.word	0x08005d31
 8005ce0:	08005cad 	.word	0x08005cad
 8005ce4:	08005cad 	.word	0x08005cad
 8005ce8:	08005cad 	.word	0x08005cad
 8005cec:	08005cad 	.word	0x08005cad
 8005cf0:	08005e35 	.word	0x08005e35
 8005cf4:	08005d5d 	.word	0x08005d5d
 8005cf8:	08005def 	.word	0x08005def
 8005cfc:	08005cad 	.word	0x08005cad
 8005d00:	08005cad 	.word	0x08005cad
 8005d04:	08005e57 	.word	0x08005e57
 8005d08:	08005cad 	.word	0x08005cad
 8005d0c:	08005d5d 	.word	0x08005d5d
 8005d10:	08005cad 	.word	0x08005cad
 8005d14:	08005cad 	.word	0x08005cad
 8005d18:	08005df7 	.word	0x08005df7
 8005d1c:	682b      	ldr	r3, [r5, #0]
 8005d1e:	1d1a      	adds	r2, r3, #4
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	602a      	str	r2, [r5, #0]
 8005d24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e09f      	b.n	8005e70 <_printf_i+0x1ec>
 8005d30:	6820      	ldr	r0, [r4, #0]
 8005d32:	682b      	ldr	r3, [r5, #0]
 8005d34:	0607      	lsls	r7, r0, #24
 8005d36:	f103 0104 	add.w	r1, r3, #4
 8005d3a:	6029      	str	r1, [r5, #0]
 8005d3c:	d501      	bpl.n	8005d42 <_printf_i+0xbe>
 8005d3e:	681e      	ldr	r6, [r3, #0]
 8005d40:	e003      	b.n	8005d4a <_printf_i+0xc6>
 8005d42:	0646      	lsls	r6, r0, #25
 8005d44:	d5fb      	bpl.n	8005d3e <_printf_i+0xba>
 8005d46:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005d4a:	2e00      	cmp	r6, #0
 8005d4c:	da03      	bge.n	8005d56 <_printf_i+0xd2>
 8005d4e:	232d      	movs	r3, #45	; 0x2d
 8005d50:	4276      	negs	r6, r6
 8005d52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d56:	485a      	ldr	r0, [pc, #360]	; (8005ec0 <_printf_i+0x23c>)
 8005d58:	230a      	movs	r3, #10
 8005d5a:	e012      	b.n	8005d82 <_printf_i+0xfe>
 8005d5c:	682b      	ldr	r3, [r5, #0]
 8005d5e:	6820      	ldr	r0, [r4, #0]
 8005d60:	1d19      	adds	r1, r3, #4
 8005d62:	6029      	str	r1, [r5, #0]
 8005d64:	0605      	lsls	r5, r0, #24
 8005d66:	d501      	bpl.n	8005d6c <_printf_i+0xe8>
 8005d68:	681e      	ldr	r6, [r3, #0]
 8005d6a:	e002      	b.n	8005d72 <_printf_i+0xee>
 8005d6c:	0641      	lsls	r1, r0, #25
 8005d6e:	d5fb      	bpl.n	8005d68 <_printf_i+0xe4>
 8005d70:	881e      	ldrh	r6, [r3, #0]
 8005d72:	4853      	ldr	r0, [pc, #332]	; (8005ec0 <_printf_i+0x23c>)
 8005d74:	2f6f      	cmp	r7, #111	; 0x6f
 8005d76:	bf0c      	ite	eq
 8005d78:	2308      	moveq	r3, #8
 8005d7a:	230a      	movne	r3, #10
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d82:	6865      	ldr	r5, [r4, #4]
 8005d84:	60a5      	str	r5, [r4, #8]
 8005d86:	2d00      	cmp	r5, #0
 8005d88:	bfa2      	ittt	ge
 8005d8a:	6821      	ldrge	r1, [r4, #0]
 8005d8c:	f021 0104 	bicge.w	r1, r1, #4
 8005d90:	6021      	strge	r1, [r4, #0]
 8005d92:	b90e      	cbnz	r6, 8005d98 <_printf_i+0x114>
 8005d94:	2d00      	cmp	r5, #0
 8005d96:	d04b      	beq.n	8005e30 <_printf_i+0x1ac>
 8005d98:	4615      	mov	r5, r2
 8005d9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d9e:	fb03 6711 	mls	r7, r3, r1, r6
 8005da2:	5dc7      	ldrb	r7, [r0, r7]
 8005da4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005da8:	4637      	mov	r7, r6
 8005daa:	42bb      	cmp	r3, r7
 8005dac:	460e      	mov	r6, r1
 8005dae:	d9f4      	bls.n	8005d9a <_printf_i+0x116>
 8005db0:	2b08      	cmp	r3, #8
 8005db2:	d10b      	bne.n	8005dcc <_printf_i+0x148>
 8005db4:	6823      	ldr	r3, [r4, #0]
 8005db6:	07de      	lsls	r6, r3, #31
 8005db8:	d508      	bpl.n	8005dcc <_printf_i+0x148>
 8005dba:	6923      	ldr	r3, [r4, #16]
 8005dbc:	6861      	ldr	r1, [r4, #4]
 8005dbe:	4299      	cmp	r1, r3
 8005dc0:	bfde      	ittt	le
 8005dc2:	2330      	movle	r3, #48	; 0x30
 8005dc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005dc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005dcc:	1b52      	subs	r2, r2, r5
 8005dce:	6122      	str	r2, [r4, #16]
 8005dd0:	f8cd a000 	str.w	sl, [sp]
 8005dd4:	464b      	mov	r3, r9
 8005dd6:	aa03      	add	r2, sp, #12
 8005dd8:	4621      	mov	r1, r4
 8005dda:	4640      	mov	r0, r8
 8005ddc:	f7ff fee4 	bl	8005ba8 <_printf_common>
 8005de0:	3001      	adds	r0, #1
 8005de2:	d14a      	bne.n	8005e7a <_printf_i+0x1f6>
 8005de4:	f04f 30ff 	mov.w	r0, #4294967295
 8005de8:	b004      	add	sp, #16
 8005dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dee:	6823      	ldr	r3, [r4, #0]
 8005df0:	f043 0320 	orr.w	r3, r3, #32
 8005df4:	6023      	str	r3, [r4, #0]
 8005df6:	4833      	ldr	r0, [pc, #204]	; (8005ec4 <_printf_i+0x240>)
 8005df8:	2778      	movs	r7, #120	; 0x78
 8005dfa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	6829      	ldr	r1, [r5, #0]
 8005e02:	061f      	lsls	r7, r3, #24
 8005e04:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e08:	d402      	bmi.n	8005e10 <_printf_i+0x18c>
 8005e0a:	065f      	lsls	r7, r3, #25
 8005e0c:	bf48      	it	mi
 8005e0e:	b2b6      	uxthmi	r6, r6
 8005e10:	07df      	lsls	r7, r3, #31
 8005e12:	bf48      	it	mi
 8005e14:	f043 0320 	orrmi.w	r3, r3, #32
 8005e18:	6029      	str	r1, [r5, #0]
 8005e1a:	bf48      	it	mi
 8005e1c:	6023      	strmi	r3, [r4, #0]
 8005e1e:	b91e      	cbnz	r6, 8005e28 <_printf_i+0x1a4>
 8005e20:	6823      	ldr	r3, [r4, #0]
 8005e22:	f023 0320 	bic.w	r3, r3, #32
 8005e26:	6023      	str	r3, [r4, #0]
 8005e28:	2310      	movs	r3, #16
 8005e2a:	e7a7      	b.n	8005d7c <_printf_i+0xf8>
 8005e2c:	4824      	ldr	r0, [pc, #144]	; (8005ec0 <_printf_i+0x23c>)
 8005e2e:	e7e4      	b.n	8005dfa <_printf_i+0x176>
 8005e30:	4615      	mov	r5, r2
 8005e32:	e7bd      	b.n	8005db0 <_printf_i+0x12c>
 8005e34:	682b      	ldr	r3, [r5, #0]
 8005e36:	6826      	ldr	r6, [r4, #0]
 8005e38:	6961      	ldr	r1, [r4, #20]
 8005e3a:	1d18      	adds	r0, r3, #4
 8005e3c:	6028      	str	r0, [r5, #0]
 8005e3e:	0635      	lsls	r5, r6, #24
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	d501      	bpl.n	8005e48 <_printf_i+0x1c4>
 8005e44:	6019      	str	r1, [r3, #0]
 8005e46:	e002      	b.n	8005e4e <_printf_i+0x1ca>
 8005e48:	0670      	lsls	r0, r6, #25
 8005e4a:	d5fb      	bpl.n	8005e44 <_printf_i+0x1c0>
 8005e4c:	8019      	strh	r1, [r3, #0]
 8005e4e:	2300      	movs	r3, #0
 8005e50:	6123      	str	r3, [r4, #16]
 8005e52:	4615      	mov	r5, r2
 8005e54:	e7bc      	b.n	8005dd0 <_printf_i+0x14c>
 8005e56:	682b      	ldr	r3, [r5, #0]
 8005e58:	1d1a      	adds	r2, r3, #4
 8005e5a:	602a      	str	r2, [r5, #0]
 8005e5c:	681d      	ldr	r5, [r3, #0]
 8005e5e:	6862      	ldr	r2, [r4, #4]
 8005e60:	2100      	movs	r1, #0
 8005e62:	4628      	mov	r0, r5
 8005e64:	f7fa f9b4 	bl	80001d0 <memchr>
 8005e68:	b108      	cbz	r0, 8005e6e <_printf_i+0x1ea>
 8005e6a:	1b40      	subs	r0, r0, r5
 8005e6c:	6060      	str	r0, [r4, #4]
 8005e6e:	6863      	ldr	r3, [r4, #4]
 8005e70:	6123      	str	r3, [r4, #16]
 8005e72:	2300      	movs	r3, #0
 8005e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e78:	e7aa      	b.n	8005dd0 <_printf_i+0x14c>
 8005e7a:	6923      	ldr	r3, [r4, #16]
 8005e7c:	462a      	mov	r2, r5
 8005e7e:	4649      	mov	r1, r9
 8005e80:	4640      	mov	r0, r8
 8005e82:	47d0      	blx	sl
 8005e84:	3001      	adds	r0, #1
 8005e86:	d0ad      	beq.n	8005de4 <_printf_i+0x160>
 8005e88:	6823      	ldr	r3, [r4, #0]
 8005e8a:	079b      	lsls	r3, r3, #30
 8005e8c:	d413      	bmi.n	8005eb6 <_printf_i+0x232>
 8005e8e:	68e0      	ldr	r0, [r4, #12]
 8005e90:	9b03      	ldr	r3, [sp, #12]
 8005e92:	4298      	cmp	r0, r3
 8005e94:	bfb8      	it	lt
 8005e96:	4618      	movlt	r0, r3
 8005e98:	e7a6      	b.n	8005de8 <_printf_i+0x164>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	4632      	mov	r2, r6
 8005e9e:	4649      	mov	r1, r9
 8005ea0:	4640      	mov	r0, r8
 8005ea2:	47d0      	blx	sl
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	d09d      	beq.n	8005de4 <_printf_i+0x160>
 8005ea8:	3501      	adds	r5, #1
 8005eaa:	68e3      	ldr	r3, [r4, #12]
 8005eac:	9903      	ldr	r1, [sp, #12]
 8005eae:	1a5b      	subs	r3, r3, r1
 8005eb0:	42ab      	cmp	r3, r5
 8005eb2:	dcf2      	bgt.n	8005e9a <_printf_i+0x216>
 8005eb4:	e7eb      	b.n	8005e8e <_printf_i+0x20a>
 8005eb6:	2500      	movs	r5, #0
 8005eb8:	f104 0619 	add.w	r6, r4, #25
 8005ebc:	e7f5      	b.n	8005eaa <_printf_i+0x226>
 8005ebe:	bf00      	nop
 8005ec0:	0800626d 	.word	0x0800626d
 8005ec4:	0800627e 	.word	0x0800627e

08005ec8 <__sflush_r>:
 8005ec8:	898a      	ldrh	r2, [r1, #12]
 8005eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ece:	4605      	mov	r5, r0
 8005ed0:	0710      	lsls	r0, r2, #28
 8005ed2:	460c      	mov	r4, r1
 8005ed4:	d458      	bmi.n	8005f88 <__sflush_r+0xc0>
 8005ed6:	684b      	ldr	r3, [r1, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	dc05      	bgt.n	8005ee8 <__sflush_r+0x20>
 8005edc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	dc02      	bgt.n	8005ee8 <__sflush_r+0x20>
 8005ee2:	2000      	movs	r0, #0
 8005ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ee8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005eea:	2e00      	cmp	r6, #0
 8005eec:	d0f9      	beq.n	8005ee2 <__sflush_r+0x1a>
 8005eee:	2300      	movs	r3, #0
 8005ef0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ef4:	682f      	ldr	r7, [r5, #0]
 8005ef6:	6a21      	ldr	r1, [r4, #32]
 8005ef8:	602b      	str	r3, [r5, #0]
 8005efa:	d032      	beq.n	8005f62 <__sflush_r+0x9a>
 8005efc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005efe:	89a3      	ldrh	r3, [r4, #12]
 8005f00:	075a      	lsls	r2, r3, #29
 8005f02:	d505      	bpl.n	8005f10 <__sflush_r+0x48>
 8005f04:	6863      	ldr	r3, [r4, #4]
 8005f06:	1ac0      	subs	r0, r0, r3
 8005f08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f0a:	b10b      	cbz	r3, 8005f10 <__sflush_r+0x48>
 8005f0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f0e:	1ac0      	subs	r0, r0, r3
 8005f10:	2300      	movs	r3, #0
 8005f12:	4602      	mov	r2, r0
 8005f14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f16:	6a21      	ldr	r1, [r4, #32]
 8005f18:	4628      	mov	r0, r5
 8005f1a:	47b0      	blx	r6
 8005f1c:	1c43      	adds	r3, r0, #1
 8005f1e:	89a3      	ldrh	r3, [r4, #12]
 8005f20:	d106      	bne.n	8005f30 <__sflush_r+0x68>
 8005f22:	6829      	ldr	r1, [r5, #0]
 8005f24:	291d      	cmp	r1, #29
 8005f26:	d82b      	bhi.n	8005f80 <__sflush_r+0xb8>
 8005f28:	4a29      	ldr	r2, [pc, #164]	; (8005fd0 <__sflush_r+0x108>)
 8005f2a:	410a      	asrs	r2, r1
 8005f2c:	07d6      	lsls	r6, r2, #31
 8005f2e:	d427      	bmi.n	8005f80 <__sflush_r+0xb8>
 8005f30:	2200      	movs	r2, #0
 8005f32:	6062      	str	r2, [r4, #4]
 8005f34:	04d9      	lsls	r1, r3, #19
 8005f36:	6922      	ldr	r2, [r4, #16]
 8005f38:	6022      	str	r2, [r4, #0]
 8005f3a:	d504      	bpl.n	8005f46 <__sflush_r+0x7e>
 8005f3c:	1c42      	adds	r2, r0, #1
 8005f3e:	d101      	bne.n	8005f44 <__sflush_r+0x7c>
 8005f40:	682b      	ldr	r3, [r5, #0]
 8005f42:	b903      	cbnz	r3, 8005f46 <__sflush_r+0x7e>
 8005f44:	6560      	str	r0, [r4, #84]	; 0x54
 8005f46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f48:	602f      	str	r7, [r5, #0]
 8005f4a:	2900      	cmp	r1, #0
 8005f4c:	d0c9      	beq.n	8005ee2 <__sflush_r+0x1a>
 8005f4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f52:	4299      	cmp	r1, r3
 8005f54:	d002      	beq.n	8005f5c <__sflush_r+0x94>
 8005f56:	4628      	mov	r0, r5
 8005f58:	f7ff fbea 	bl	8005730 <_free_r>
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	6360      	str	r0, [r4, #52]	; 0x34
 8005f60:	e7c0      	b.n	8005ee4 <__sflush_r+0x1c>
 8005f62:	2301      	movs	r3, #1
 8005f64:	4628      	mov	r0, r5
 8005f66:	47b0      	blx	r6
 8005f68:	1c41      	adds	r1, r0, #1
 8005f6a:	d1c8      	bne.n	8005efe <__sflush_r+0x36>
 8005f6c:	682b      	ldr	r3, [r5, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0c5      	beq.n	8005efe <__sflush_r+0x36>
 8005f72:	2b1d      	cmp	r3, #29
 8005f74:	d001      	beq.n	8005f7a <__sflush_r+0xb2>
 8005f76:	2b16      	cmp	r3, #22
 8005f78:	d101      	bne.n	8005f7e <__sflush_r+0xb6>
 8005f7a:	602f      	str	r7, [r5, #0]
 8005f7c:	e7b1      	b.n	8005ee2 <__sflush_r+0x1a>
 8005f7e:	89a3      	ldrh	r3, [r4, #12]
 8005f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f84:	81a3      	strh	r3, [r4, #12]
 8005f86:	e7ad      	b.n	8005ee4 <__sflush_r+0x1c>
 8005f88:	690f      	ldr	r7, [r1, #16]
 8005f8a:	2f00      	cmp	r7, #0
 8005f8c:	d0a9      	beq.n	8005ee2 <__sflush_r+0x1a>
 8005f8e:	0793      	lsls	r3, r2, #30
 8005f90:	680e      	ldr	r6, [r1, #0]
 8005f92:	bf08      	it	eq
 8005f94:	694b      	ldreq	r3, [r1, #20]
 8005f96:	600f      	str	r7, [r1, #0]
 8005f98:	bf18      	it	ne
 8005f9a:	2300      	movne	r3, #0
 8005f9c:	eba6 0807 	sub.w	r8, r6, r7
 8005fa0:	608b      	str	r3, [r1, #8]
 8005fa2:	f1b8 0f00 	cmp.w	r8, #0
 8005fa6:	dd9c      	ble.n	8005ee2 <__sflush_r+0x1a>
 8005fa8:	6a21      	ldr	r1, [r4, #32]
 8005faa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005fac:	4643      	mov	r3, r8
 8005fae:	463a      	mov	r2, r7
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	47b0      	blx	r6
 8005fb4:	2800      	cmp	r0, #0
 8005fb6:	dc06      	bgt.n	8005fc6 <__sflush_r+0xfe>
 8005fb8:	89a3      	ldrh	r3, [r4, #12]
 8005fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fbe:	81a3      	strh	r3, [r4, #12]
 8005fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc4:	e78e      	b.n	8005ee4 <__sflush_r+0x1c>
 8005fc6:	4407      	add	r7, r0
 8005fc8:	eba8 0800 	sub.w	r8, r8, r0
 8005fcc:	e7e9      	b.n	8005fa2 <__sflush_r+0xda>
 8005fce:	bf00      	nop
 8005fd0:	dfbffffe 	.word	0xdfbffffe

08005fd4 <_fflush_r>:
 8005fd4:	b538      	push	{r3, r4, r5, lr}
 8005fd6:	690b      	ldr	r3, [r1, #16]
 8005fd8:	4605      	mov	r5, r0
 8005fda:	460c      	mov	r4, r1
 8005fdc:	b913      	cbnz	r3, 8005fe4 <_fflush_r+0x10>
 8005fde:	2500      	movs	r5, #0
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	bd38      	pop	{r3, r4, r5, pc}
 8005fe4:	b118      	cbz	r0, 8005fee <_fflush_r+0x1a>
 8005fe6:	6a03      	ldr	r3, [r0, #32]
 8005fe8:	b90b      	cbnz	r3, 8005fee <_fflush_r+0x1a>
 8005fea:	f7ff fa05 	bl	80053f8 <__sinit>
 8005fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d0f3      	beq.n	8005fde <_fflush_r+0xa>
 8005ff6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ff8:	07d0      	lsls	r0, r2, #31
 8005ffa:	d404      	bmi.n	8006006 <_fflush_r+0x32>
 8005ffc:	0599      	lsls	r1, r3, #22
 8005ffe:	d402      	bmi.n	8006006 <_fflush_r+0x32>
 8006000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006002:	f7ff fb92 	bl	800572a <__retarget_lock_acquire_recursive>
 8006006:	4628      	mov	r0, r5
 8006008:	4621      	mov	r1, r4
 800600a:	f7ff ff5d 	bl	8005ec8 <__sflush_r>
 800600e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006010:	07da      	lsls	r2, r3, #31
 8006012:	4605      	mov	r5, r0
 8006014:	d4e4      	bmi.n	8005fe0 <_fflush_r+0xc>
 8006016:	89a3      	ldrh	r3, [r4, #12]
 8006018:	059b      	lsls	r3, r3, #22
 800601a:	d4e1      	bmi.n	8005fe0 <_fflush_r+0xc>
 800601c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800601e:	f7ff fb85 	bl	800572c <__retarget_lock_release_recursive>
 8006022:	e7dd      	b.n	8005fe0 <_fflush_r+0xc>

08006024 <__swhatbuf_r>:
 8006024:	b570      	push	{r4, r5, r6, lr}
 8006026:	460c      	mov	r4, r1
 8006028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800602c:	2900      	cmp	r1, #0
 800602e:	b096      	sub	sp, #88	; 0x58
 8006030:	4615      	mov	r5, r2
 8006032:	461e      	mov	r6, r3
 8006034:	da0d      	bge.n	8006052 <__swhatbuf_r+0x2e>
 8006036:	89a3      	ldrh	r3, [r4, #12]
 8006038:	f013 0f80 	tst.w	r3, #128	; 0x80
 800603c:	f04f 0100 	mov.w	r1, #0
 8006040:	bf0c      	ite	eq
 8006042:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006046:	2340      	movne	r3, #64	; 0x40
 8006048:	2000      	movs	r0, #0
 800604a:	6031      	str	r1, [r6, #0]
 800604c:	602b      	str	r3, [r5, #0]
 800604e:	b016      	add	sp, #88	; 0x58
 8006050:	bd70      	pop	{r4, r5, r6, pc}
 8006052:	466a      	mov	r2, sp
 8006054:	f000 f848 	bl	80060e8 <_fstat_r>
 8006058:	2800      	cmp	r0, #0
 800605a:	dbec      	blt.n	8006036 <__swhatbuf_r+0x12>
 800605c:	9901      	ldr	r1, [sp, #4]
 800605e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006062:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006066:	4259      	negs	r1, r3
 8006068:	4159      	adcs	r1, r3
 800606a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800606e:	e7eb      	b.n	8006048 <__swhatbuf_r+0x24>

08006070 <__smakebuf_r>:
 8006070:	898b      	ldrh	r3, [r1, #12]
 8006072:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006074:	079d      	lsls	r5, r3, #30
 8006076:	4606      	mov	r6, r0
 8006078:	460c      	mov	r4, r1
 800607a:	d507      	bpl.n	800608c <__smakebuf_r+0x1c>
 800607c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006080:	6023      	str	r3, [r4, #0]
 8006082:	6123      	str	r3, [r4, #16]
 8006084:	2301      	movs	r3, #1
 8006086:	6163      	str	r3, [r4, #20]
 8006088:	b002      	add	sp, #8
 800608a:	bd70      	pop	{r4, r5, r6, pc}
 800608c:	ab01      	add	r3, sp, #4
 800608e:	466a      	mov	r2, sp
 8006090:	f7ff ffc8 	bl	8006024 <__swhatbuf_r>
 8006094:	9900      	ldr	r1, [sp, #0]
 8006096:	4605      	mov	r5, r0
 8006098:	4630      	mov	r0, r6
 800609a:	f7ff fbb5 	bl	8005808 <_malloc_r>
 800609e:	b948      	cbnz	r0, 80060b4 <__smakebuf_r+0x44>
 80060a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060a4:	059a      	lsls	r2, r3, #22
 80060a6:	d4ef      	bmi.n	8006088 <__smakebuf_r+0x18>
 80060a8:	f023 0303 	bic.w	r3, r3, #3
 80060ac:	f043 0302 	orr.w	r3, r3, #2
 80060b0:	81a3      	strh	r3, [r4, #12]
 80060b2:	e7e3      	b.n	800607c <__smakebuf_r+0xc>
 80060b4:	89a3      	ldrh	r3, [r4, #12]
 80060b6:	6020      	str	r0, [r4, #0]
 80060b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060bc:	81a3      	strh	r3, [r4, #12]
 80060be:	9b00      	ldr	r3, [sp, #0]
 80060c0:	6163      	str	r3, [r4, #20]
 80060c2:	9b01      	ldr	r3, [sp, #4]
 80060c4:	6120      	str	r0, [r4, #16]
 80060c6:	b15b      	cbz	r3, 80060e0 <__smakebuf_r+0x70>
 80060c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060cc:	4630      	mov	r0, r6
 80060ce:	f000 f81d 	bl	800610c <_isatty_r>
 80060d2:	b128      	cbz	r0, 80060e0 <__smakebuf_r+0x70>
 80060d4:	89a3      	ldrh	r3, [r4, #12]
 80060d6:	f023 0303 	bic.w	r3, r3, #3
 80060da:	f043 0301 	orr.w	r3, r3, #1
 80060de:	81a3      	strh	r3, [r4, #12]
 80060e0:	89a3      	ldrh	r3, [r4, #12]
 80060e2:	431d      	orrs	r5, r3
 80060e4:	81a5      	strh	r5, [r4, #12]
 80060e6:	e7cf      	b.n	8006088 <__smakebuf_r+0x18>

080060e8 <_fstat_r>:
 80060e8:	b538      	push	{r3, r4, r5, lr}
 80060ea:	4d07      	ldr	r5, [pc, #28]	; (8006108 <_fstat_r+0x20>)
 80060ec:	2300      	movs	r3, #0
 80060ee:	4604      	mov	r4, r0
 80060f0:	4608      	mov	r0, r1
 80060f2:	4611      	mov	r1, r2
 80060f4:	602b      	str	r3, [r5, #0]
 80060f6:	f7fb f8da 	bl	80012ae <_fstat>
 80060fa:	1c43      	adds	r3, r0, #1
 80060fc:	d102      	bne.n	8006104 <_fstat_r+0x1c>
 80060fe:	682b      	ldr	r3, [r5, #0]
 8006100:	b103      	cbz	r3, 8006104 <_fstat_r+0x1c>
 8006102:	6023      	str	r3, [r4, #0]
 8006104:	bd38      	pop	{r3, r4, r5, pc}
 8006106:	bf00      	nop
 8006108:	200004bc 	.word	0x200004bc

0800610c <_isatty_r>:
 800610c:	b538      	push	{r3, r4, r5, lr}
 800610e:	4d06      	ldr	r5, [pc, #24]	; (8006128 <_isatty_r+0x1c>)
 8006110:	2300      	movs	r3, #0
 8006112:	4604      	mov	r4, r0
 8006114:	4608      	mov	r0, r1
 8006116:	602b      	str	r3, [r5, #0]
 8006118:	f7fb f8d9 	bl	80012ce <_isatty>
 800611c:	1c43      	adds	r3, r0, #1
 800611e:	d102      	bne.n	8006126 <_isatty_r+0x1a>
 8006120:	682b      	ldr	r3, [r5, #0]
 8006122:	b103      	cbz	r3, 8006126 <_isatty_r+0x1a>
 8006124:	6023      	str	r3, [r4, #0]
 8006126:	bd38      	pop	{r3, r4, r5, pc}
 8006128:	200004bc 	.word	0x200004bc

0800612c <_sbrk_r>:
 800612c:	b538      	push	{r3, r4, r5, lr}
 800612e:	4d06      	ldr	r5, [pc, #24]	; (8006148 <_sbrk_r+0x1c>)
 8006130:	2300      	movs	r3, #0
 8006132:	4604      	mov	r4, r0
 8006134:	4608      	mov	r0, r1
 8006136:	602b      	str	r3, [r5, #0]
 8006138:	f7fb f8e2 	bl	8001300 <_sbrk>
 800613c:	1c43      	adds	r3, r0, #1
 800613e:	d102      	bne.n	8006146 <_sbrk_r+0x1a>
 8006140:	682b      	ldr	r3, [r5, #0]
 8006142:	b103      	cbz	r3, 8006146 <_sbrk_r+0x1a>
 8006144:	6023      	str	r3, [r4, #0]
 8006146:	bd38      	pop	{r3, r4, r5, pc}
 8006148:	200004bc 	.word	0x200004bc

0800614c <_init>:
 800614c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800614e:	bf00      	nop
 8006150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006152:	bc08      	pop	{r3}
 8006154:	469e      	mov	lr, r3
 8006156:	4770      	bx	lr

08006158 <_fini>:
 8006158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615a:	bf00      	nop
 800615c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800615e:	bc08      	pop	{r3}
 8006160:	469e      	mov	lr, r3
 8006162:	4770      	bx	lr
